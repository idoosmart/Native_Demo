// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name protocol_channel
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Flutter
import Foundation
import Swift
import _Concurrency
import _StringProcessing
@_exported import protocol_channel
public protocol IDOAlexaDelegate : ObjectiveC.NSObjectProtocol {
  func getHealthValue(valueType: protocol_channel.IDOGetValueType) -> Swift.Int
  func getHrValue(dataType: Swift.Int, timeType: Swift.Int) -> Swift.Int
  func functionControl(funType: Swift.Int)
}
public enum IDOAlexaLoginState : Swift.Int {
  case logging
  case logined
  case logout
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum IDOGetValueType : Swift.Int {
  case pedometer
  case calorie
  case heartRate
  case spO2
  case kilometer
  case swimmingDistance
  case sleepScore
  case runningCount
  case swimmingCount
  case dayWorkoutCount
  case weekWorkoutCount
  case bodyBattery
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum IDOAlexaAuthorizeResult : Swift.Int {
  case successful
  case failure
  case timeout
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum IDODeviceStateType : Swift.Int {
  case disconnected
  case connecting
  case connected
  case disconnecting
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum IDOBluetoothStateType : Swift.Int {
  case unknown
  case resetting
  case unsupported
  case unauthorized
  case poweredOff
  case poweredOn
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum IDOBluetoothScanType : Swift.Int {
  case scanning
  case stop
  case find
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum IDOConnectErrorType : Swift.Int {
  case none
  case abnormalUUIDMacAddress
  case bluetoothOff
  case connectCancel
  case fail
  case timeOut
  case serviceFail
  case characteristicsFail
  case pairFail
  case informationFail
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum IDOWriteType : Swift.Int {
  case withResponse
  case withoutResponse
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum IDOSppStateType : Swift.Int {
  case onStart
  case onSuccess
  case onFail
  case onBreak
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct IDODeviceModel {
  public var rssi: Swift.Int?
  public var name: Swift.String?
  public var state: protocol_channel.IDODeviceStateType?
  public var uuid: Swift.String?
  public var macAddress: Swift.String?
  public var otaMacAddress: Swift.String?
  public var btMacAddress: Swift.String?
  public var deviceId: Swift.Int?
  public var deviceType: Swift.Int?
  public var isOta: Swift.Bool?
  public var isTlwOta: Swift.Bool?
  public var bltVersion: Swift.Int?
  public var isPair: Swift.Bool?
  public init(rssi: Swift.Int? = nil, name: Swift.String? = nil, state: protocol_channel.IDODeviceStateType? = nil, uuid: Swift.String? = nil, macAddress: Swift.String? = nil, otaMacAddress: Swift.String? = nil, btMacAddress: Swift.String? = nil, deviceId: Swift.Int? = nil, deviceType: Swift.Int? = nil, isOta: Swift.Bool? = nil, isTlwOta: Swift.Bool? = nil, bltVersion: Swift.Int? = nil, isPair: Swift.Bool? = nil)
}
public struct IDOBluetoothStateModel {
  public var type: protocol_channel.IDOBluetoothStateType?
  public var scanType: protocol_channel.IDOBluetoothScanType?
  public init(type: protocol_channel.IDOBluetoothStateType? = nil, scanType: protocol_channel.IDOBluetoothScanType? = nil)
}
public struct IDODeviceStateModel {
  public var uuid: Swift.String?
  public var macAddress: Swift.String?
  public var state: protocol_channel.IDODeviceStateType?
  public var errorState: protocol_channel.IDOConnectErrorType?
  public init(uuid: Swift.String? = nil, macAddress: Swift.String? = nil, state: protocol_channel.IDODeviceStateType? = nil, errorState: protocol_channel.IDOConnectErrorType? = nil)
}
public struct IDOWriteStateModel {
  public var state: Swift.Bool?
  public var uuid: Swift.String?
  public var macAddress: Swift.String?
  public var type: protocol_channel.IDOWriteType?
  public init(state: Swift.Bool? = nil, uuid: Swift.String? = nil, macAddress: Swift.String? = nil, type: protocol_channel.IDOWriteType? = nil)
}
public struct IDOReceiveData {
  public var data: Foundation.Data?
  public var uuid: Swift.String?
  public var macAddress: Swift.String?
  public var spp: Swift.Bool?
  public init(data: Foundation.Data? = nil, uuid: Swift.String? = nil, macAddress: Swift.String? = nil, spp: Swift.Bool? = nil)
}
public struct IDOSppStateModel {
  public var type: protocol_channel.IDOSppStateType?
  public init(type: protocol_channel.IDOSppStateType? = nil)
}
public struct IDODfuConfig {
  public var filePath: Swift.String?
  public var uuid: Swift.String?
  public var macAddress: Swift.String?
  public var deviceId: Swift.String?
  public var platform: Swift.Int?
  public var isDeviceSupportPairedWithPhoneSystem: Swift.Bool?
  public var prn: Swift.Int?
  public var isNeedReOpenBluetoothSwitchIfFailed: Swift.Bool?
  public var maxRetryTime: Swift.Int?
  public var isNeedAuth: Swift.Bool?
  public var otaWorkMode: Swift.Int?
  public init(filePath: Swift.String? = nil, uuid: Swift.String? = nil, macAddress: Swift.String? = nil, deviceId: Swift.String? = nil, platform: Swift.Int? = nil, isDeviceSupportPairedWithPhoneSystem: Swift.Bool? = nil, prn: Swift.Int? = nil, isNeedReOpenBluetoothSwitchIfFailed: Swift.Bool? = nil, maxRetryTime: Swift.Int? = nil, isNeedAuth: Swift.Bool? = nil, otaWorkMode: Swift.Int? = nil)
}
public struct IDOBleData {
  public var data: Foundation.Data?
  public var macAddress: Swift.String?
  public var type: Swift.Int?
  public init(data: Foundation.Data? = nil, macAddress: Swift.String? = nil, type: Swift.Int? = nil)
}
public enum IDOStatusNotification : Swift.Int {
  case protocolConnectCompleted
  case functionTableUpdateCompleted
  case deviceInfoUpdateCompleted
  case deviceInfoFwVersionCompleted
  case unbindOnAuthCodeError
  case unbindOnBindStateError
  case fastSyncCompleted
  case fastSyncFailed
  case deviceInfoBtAddressUpdateCompleted
  case macAddressError
  case syncHealthDataIng
  case syncHealthDataCompleted
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct IDODeviceNotificationModel {
  public var dataType: Swift.Int?
  public var notifyType: Swift.Int?
  public var msgId: Swift.Int?
  public var msgNotice: Swift.Int?
  public var errorIndex: Swift.Int?
  public var controlEvt: Swift.Int?
  public var controlJson: Swift.String?
  public init(dataType: Swift.Int? = nil, notifyType: Swift.Int? = nil, msgId: Swift.Int? = nil, msgNotice: Swift.Int? = nil, errorIndex: Swift.Int? = nil, controlEvt: Swift.Int? = nil, controlJson: Swift.String? = nil)
}
public enum IDOLogType : Swift.Int {
  case none
  case debug
  case release
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum IDOOtaType : Swift.Int {
  case none
  case telink
  case nordic
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum IDOBindStatus : Swift.Int {
  case failed
  case successful
  case binded
  case needAuth
  case refusedBind
  case wrongDevice
  case authCodeCheckFailed
  case canceled
  case failedOnGetFunctionTable
  case failedOnGetDeviceInfo
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct CmdError : Swift.Error {
  public let code: Swift.Int
  public let message: Swift.String?
  public init(code: Swift.Int = -2, message: Swift.String? = nil)
}
public enum NoticeMessageType : Swift.Int {
  case sms
  case email
  case wx
  case qq
  case weibo
  case facebook
  case twitter
  case whatsapp
  case messenger
  case instagram
  case linkedin
  case calendar
  case skype
  case alarm
  case vkontakte
  case line
  case viber
  case kakao_talk
  case gmail
  case outlook
  case snapchat
  case telegram
  case chatwork
  case slack
  case tumblr
  case youtube
  case pinterest_yahoo
  case tiktok
  case redbus
  case dailyhunt
  case hotstar
  case inshorts
  case paytm
  case amazon
  case flipkart
  case prime
  case netflix
  case gpay
  case phonpe
  case swiggy
  case zomato
  case makemytrip
  case jiotv
  case keep
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct Cmds {
  public struct getSn : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<Swift.String>) -> protocol_channel.IDOCancellable
    public typealias DataType = Swift.String
  }
  public struct getBtName : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<Swift.String>) -> protocol_channel.IDOCancellable
    public typealias DataType = Swift.String
  }
  public struct getLiveData : protocol_channel.IDOCmdProtocol {
    public init(flag: Swift.Int)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOLiveDataModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOLiveDataModel
  }
  public struct getErrorRecord : protocol_channel.IDOCmdProtocol {
    public init(type: Swift.Int)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOErrorRecordModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOErrorRecordModel
  }
  public struct getHidInfo : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<Swift.Bool>) -> protocol_channel.IDOCancellable
    public typealias DataType = Swift.Bool
  }
  public struct getGpsInfo : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOGpsInfoModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOGpsInfoModel
  }
  public struct getVersionInfo : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOVersionInfoModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOVersionInfoModel
  }
  public struct getMtuInfo : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOMtuInfoModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOMtuInfoModel
  }
  public struct getAllHealthSwitchState : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOAllHealthSwitchStateModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOAllHealthSwitchStateModel
  }
  public struct getGpsStatus : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOGpsStatusModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOGpsStatusModel
  }
  public struct getUnerasableMeunList : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOUnerasableMeunListModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOUnerasableMeunListModel
  }
  public struct getActivitySwitch : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOActivitySwitchModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOActivitySwitchModel
  }
  public struct getUnreadAppReminder : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdGetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdGetResponseModel
  }
  public struct getFlashBinInfo : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOFlashBinInfoModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOFlashBinInfoModel
  }
  public struct getBtNotice : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOBtNoticeModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOBtNoticeModel
  }
  public struct getUpHandGesture : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOUpHandGestureModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOUpHandGestureModel
  }
  public struct getWatchDialId : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOWatchDialIdModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOWatchDialIdModel
  }
  public struct getNotDisturbStatus : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDONotDisturbStatusModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDONotDisturbStatusModel
  }
  public struct getMainSportGoal : protocol_channel.IDOCmdProtocol {
    public init(timeGoalType: Swift.Int)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOMainSportGoalModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOMainSportGoalModel
  }
  public struct getBpAlgVersion : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOBpAlgVersionModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOBpAlgVersionModel
  }
  public struct getScreenBrightness : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOScreenBrightnessModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOScreenBrightnessModel
  }
  public struct getHotStartParam : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOHotStartParamModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOHotStartParamModel
  }
  public struct getSupportMaxSetItemsNum : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOSupportMaxSetItemsNumModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOSupportMaxSetItemsNumModel
  }
  public struct getWalkRemind : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOWalkRemindModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOWalkRemindModel
  }
  public struct getStepGoal : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOStepGoalModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOStepGoalModel
  }
  public struct getDeviceName : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<Swift.String>) -> protocol_channel.IDOCancellable
    public typealias DataType = Swift.String
  }
  public struct getContactReviseTime : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOContactReviseTimeModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOContactReviseTimeModel
  }
  public struct getUpdateStatus : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOUpdateStatusModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOUpdateStatusModel
  }
  public struct getStressVal : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOStressValModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOStressValModel
  }
  public struct getHeartRateMode : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOHeartRateModeModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOHeartRateModeModel
  }
  public struct getBatteryInfo : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOBatteryInfoModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOBatteryInfoModel
  }
  public struct getDeviceLogState : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDODeviceLogStateModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDODeviceLogStateModel
  }
  public struct setBleVoice : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOBleVoiceParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setGpsControl : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOGpsControlParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOGpsControlModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOGpsControlModel
  }
  public struct setHeartRateModeSmart : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOHeartRateModeSmartParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setStressCalibration : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOStressCalibrationParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOStressCalibrationModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOStressCalibrationModel
  }
  public struct setHandWashingReminder : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOHandWashingReminderParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setSportGoal : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOSportGoalParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setWeatherData : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOWeatherDataParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setUnreadAppReminder : protocol_channel.IDOCmdProtocol {
    public init(open: Swift.Bool)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setNotificationStatus : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDONotificationStatusParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setScientificSleepSwitch : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOScientificSleepSwitchParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setBpCalibration : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOBpCalibrationParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOBpCalibrationModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOBpCalibrationModel
  }
  public struct setLostFind : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOLostFindParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setWatchDial : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOWatchDialParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setWeatherSwitch : protocol_channel.IDOCmdProtocol {
    public init(open: Swift.Bool)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setUnit : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOUnitParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setFindPhone : protocol_channel.IDOCmdProtocol {
    public init(open: Swift.Bool)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct getDownloadLanguage : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDODownloadLanguageModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDODownloadLanguageModel
  }
  public struct setOverFindPhone : protocol_channel.IDOCmdProtocol {
    public init(open: Swift.Bool)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct getMenuList : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOMenuListModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOMenuListModel
  }
  public struct setOnekeySOS : protocol_channel.IDOCmdProtocol {
    public init(open: Swift.Bool, phoneType: Swift.Int)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setSportModeSelect : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOSportModeSelectParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setSportModeSort : protocol_channel.IDOCmdProtocol {
    public init(items: [protocol_channel.IDOSportModeSortParamModel])
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setLongSit : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOLongSitParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setHeartRateMode : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOHeartRateModeParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setBodyPowerTurn : protocol_channel.IDOCmdProtocol {
    public init(open: Swift.Bool)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setRRespiRateTurn : protocol_channel.IDOCmdProtocol {
    public init(open: Swift.Bool)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setV3Noise : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOV3NoiseParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setWeatherSunTime : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOWeatherSunTimeParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setShortcut : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOShortcutParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct getNoticeStatus : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOSetNoticeStatusModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOSetNoticeStatusModel
  }
  public struct setNoticeStatus : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOSetNoticeStatusModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDONotificationCenterModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDONotificationCenterModel
  }
  public struct setTemperatureSwitch : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOTemperatureSwitchParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setSleepPeriod : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOSleepPeriodParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setUpHandGesture : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOUpHandGestureParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setTakingMedicineReminder : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOTakingMedicineReminderParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setSpo2Switch : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOSpo2SwitchParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setWeatherCityName : protocol_channel.IDOCmdProtocol {
    public init(cityName: Swift.String)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct getAlarm : protocol_channel.IDOCmdProtocol {
    public init(flag: Swift.Int)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOAlarmModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOAlarmModel
  }
  public struct setAlarm : protocol_channel.IDOCmdProtocol {
    public init(alarm: protocol_channel.IDOAlarmModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct getHabitInfo : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOHabitInfoModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOHabitInfoModel
  }
  public struct setFitnessGuidance : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOFitnessGuidanceParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setDisplayMode : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDODisplayModeParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setBpMeasurement : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOBpMeasurementParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOBpMeasurementModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOBpMeasurementModel
  }
  public struct setMusicOnOff : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOMusicOnOffParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setSendRunPlan : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDORunPlanParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOSendRunPlanModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOSendRunPlanModel
  }
  public struct setWeatherV3 : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOWeatherV3ParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct getBleMusicInfo : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOMusicInfoModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOMusicInfoModel
  }
  public struct musicControl : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOMusicControlParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setMusicOperate : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOMusicOpearteParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOMusicOperateModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOMusicOperateModel
  }
  public struct noticeMessageV3 : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDONoticeMessageParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setNoticeMessageState : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDONoticeMessageStateParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDONoticeMessageStateModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDONoticeMessageStateModel
  }
  public struct setNoticeAppName : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDONoticeMesaageParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setWorldTimeV3 : protocol_channel.IDOCmdProtocol {
    public init(_ param: [protocol_channel.IDOWorldTimeParamModel])
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setSchedulerReminder : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOSchedulerReminderParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOSchedulerReminderModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOSchedulerReminderModel
  }
  public struct getWatchDialInfo : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOWatchDialInfoModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOWatchDialInfoModel
  }
  public struct setBpCalControlV3 : protocol_channel.IDOCmdProtocol {
    public init(operate: Swift.Int, filePath: Swift.String)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOBpCalControlModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOBpCalControlModel
  }
  public struct setWatchFaceData : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOWatchFaceParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOWatchFaceModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOWatchFaceModel
  }
  public struct setSyncContact : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOSyncContactParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOSyncContactModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOSyncContactModel
  }
  public struct getWatchListV3 : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOWatchListModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOWatchListModel
  }
  public struct getWatchListV2 : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOWatchListV2Model>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOWatchListV2Model
  }
  public struct setSportParamSort : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOSportSortParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOSportSortModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOSportSortModel
  }
  public struct setSport100Sort : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOSport100SortParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOSport100SortModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOSport100SortModel
  }
  public struct setMainUISortV3 : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOMainUISortParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOMainUISortModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOMainUISortModel
  }
  public struct setHistoricalMenstruation : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOHistoricalMenstruationParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct getLanguageLibrary : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOLanguageLibraryModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOLanguageLibraryModel
  }
  public struct getBleBeep : protocol_channel.IDOCmdProtocol {
    public init()
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOBleBeepModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOBleBeepModel
  }
  public struct setLongCityNameV3 : protocol_channel.IDOCmdProtocol {
    public init(cityName: Swift.String)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setHeartMode : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOHeartModeParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOHeartModeModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOHeartModeModel
  }
  public struct setVoiceReplyText : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOVoiceReplyParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setWatchDialSort : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOWatchDialSortParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setWalkRemindTimes : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOWalkRemindTimesParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setWallpaperDialReply : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOWallpaperDialReplyV3ParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOWallpaperDialReplyV3Model>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOWallpaperDialReplyV3Model
  }
  public struct setDateTime : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDODateTimeParamModel)
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
}
public enum IDOAppExecType {
  case appStart(protocol_channel.IDOAppStartExchangeModel)
  case appEnd(protocol_channel.IDOAppEndExchangeModel)
  case appIng(protocol_channel.IDOAppIngExchangeModel)
  case appPause(protocol_channel.IDOAppPauseExchangeModel)
  case appRestore(protocol_channel.IDOAppRestoreExchangeModel)
  case appIngV3(protocol_channel.IDOAppIngV3ExchangeModel)
  case appOperatePlan(protocol_channel.IDOAppOperatePlanExchangeModel)
}
public enum IDOAppReplyType {
  case bleStartReply(protocol_channel.IDOBleStartReplyExchangeModel)
  case bleIngReply(protocol_channel.IDOBleIngReplyExchangeModel)
  case bleEndReply(protocol_channel.IDOBleEndReplyExchangeModel)
  case blePauseReply(protocol_channel.IDOBlePauseReplyExchangeModel)
  case bleRestoreReply(protocol_channel.IDOBleRestoreReplyExchangeModel)
  case bleOperatePlanReply(protocol_channel.IDOBleOperatePlanReplyExchangeModel)
  case appBlePauseReply(protocol_channel.IDOAppBlePauseReplyExchangeModel)
  case appBleRestoreReply(protocol_channel.IDOAppBleRestoreReplyExchangeModel)
  case appBleEndReply(protocol_channel.IDOAppBleEndReplyExchangeModel)
}
public enum IDOBleExecType {
  case bleStart(protocol_channel.IDOBleStartExchangeModel?)
  case bleIng(protocol_channel.IDOBleIngExchangeModel?)
  case bleEnd(protocol_channel.IDOBleEndExchangeModel?)
  case blePause(protocol_channel.IDOBlePauseExchangeModel?)
  case bleRestore(protocol_channel.IDOBleRestoreExchangeModel?)
  case bleOperatePlan(protocol_channel.IDOBleOperatePlanExchangeModel?)
  case appBlePause(protocol_channel.IDOAppBlePauseExchangeModel?)
  case appBleRestore(protocol_channel.IDOAppBleRestoreExchangeModel?)
  case appBleEnd(protocol_channel.IDOAppBleEndExchangeModel?)
}
public enum IDOBleReplyType {
  case appStartReply(protocol_channel.IDOAppStartReplyExchangeModel?)
  case appEndReply(protocol_channel.IDOAppEndReplyExchangeModel?)
  case appIngReply(protocol_channel.IDOAppIngReplyExchangeModel?)
  case appPauseReply(protocol_channel.IDOAppPauseReplyExchangeModel?)
  case appRestoreReply(protocol_channel.IDOAppRestoreReplyExchangeModel?)
  case appIngV3Reply(protocol_channel.IDOAppIngV3ReplyExchangeModel?)
  case appOperatePlanReply(protocol_channel.IDOAppOperatePlanReplyExchangeModel?)
  case appActivityDataReply(protocol_channel.IDOAppActivityDataV3ExchangeModel?)
  case appActivityHrReply(protocol_channel.IDOAppHrDataExchangeModel?)
  case appActivityGpsReply(protocol_channel.IDOAppGpsDataExchangeModel?)
}
public enum IDOExchangeStatus : Swift.Int {
  case initial
  case appStart
  case appStartReply
  case appEnd
  case appEndReply
  case appPause
  case appPauseReply
  case appRestore
  case appRestoreReply
  case appIng
  case appIngReply
  case getActivity
  case getActivityReply
  case getHr
  case getHrReply
  case appStartPlan
  case appStartPlanReply
  case appPausePlan
  case appPausePlanReply
  case appRestorePlan
  case appRestorePlanReply
  case appEndPlan
  case appEndPlanReply
  case appSwitchAction
  case appSwitchActionReply
  case appBlePause
  case appBlePauseReply
  case appBleRestore
  case appBleRestoreReply
  case appBleEnd
  case appBleEndReply
  case bleStart
  case bleStartReply
  case bleEnd
  case bleEndReply
  case blePause
  case blePauseReply
  case bleRestore
  case bleRestoreReply
  case bleIng
  case bleIngReply
  case bleStartPlan
  case blePausePlan
  case bleRestorePlan
  case bleEndPlan
  case bleSwitchAction
  case bleOperatePlanReply
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct IDOExchangeBaseModel {
  public var day: Swift.Int?
  public var hour: Swift.Int?
  public var minute: Swift.Int?
  public var second: Swift.Int?
  public var sportType: Swift.Int?
  public init(day: Swift.Int? = nil, hour: Swift.Int? = nil, minute: Swift.Int? = nil, second: Swift.Int? = nil, sportType: Swift.Int? = nil)
}
public struct IDOExchangeV2Model {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var operate: Swift.Int?
  public var targetValue: Swift.Int?
  public var targetType: Swift.Int?
  public var forceStart: Swift.Int?
  public var retCode: Swift.Int?
  public var calories: Swift.Int?
  public var distance: Swift.Int?
  public var durations: Swift.Int?
  public var step: Swift.Int?
  public var avgHr: Swift.Int?
  public var maxHr: Swift.Int?
  public var curHr: Swift.Int?
  public var hrSerial: Swift.Int?
  public var burnFatMins: Swift.Int?
  public var aerobicMins: Swift.Int?
  public var limitMins: Swift.Int?
  public var isSave: Swift.Bool?
  public var status: Swift.Int?
  public var interval: Swift.Int?
  public var hrValues: [Swift.Int?]?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, operate: Swift.Int? = nil, targetValue: Swift.Int? = nil, targetType: Swift.Int? = nil, forceStart: Swift.Int? = nil, retCode: Swift.Int? = nil, calories: Swift.Int? = nil, distance: Swift.Int? = nil, durations: Swift.Int? = nil, step: Swift.Int? = nil, avgHr: Swift.Int? = nil, maxHr: Swift.Int? = nil, curHr: Swift.Int? = nil, hrSerial: Swift.Int? = nil, burnFatMins: Swift.Int? = nil, aerobicMins: Swift.Int? = nil, limitMins: Swift.Int? = nil, isSave: Swift.Bool? = nil, status: Swift.Int? = nil, interval: Swift.Int? = nil, hrValues: [Swift.Int?]? = nil)
}
public struct IDOExchangeV3Model {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var year: Swift.Int?
  public var month: Swift.Int?
  public var planType: Swift.Int?
  public var actionType: Swift.Int?
  public var version: Swift.Int?
  public var operate: Swift.Int?
  public var targetValue: Swift.Int?
  public var targetType: Swift.Int?
  public var forceStart: Swift.Int?
  public var retCode: Swift.Int?
  public var calories: Swift.Int?
  public var distance: Swift.Int?
  public var durations: Swift.Int?
  public var step: Swift.Int?
  public var swimPosture: Swift.Int?
  public var status: Swift.Int?
  public var signalFlag: Swift.Int?
  public var isSave: Swift.Bool?
  public var realTimeSpeed: Swift.Int?
  public var realTimePace: Swift.Int?
  public var interval: Swift.Int?
  public var hrCount: Swift.Int?
  public var burnFatMins: Swift.Int?
  public var aerobicMins: Swift.Int?
  public var limitMins: Swift.Int?
  public var hrValues: [Swift.Int?]?
  public var warmUpSecond: Swift.Int?
  public var anaeroicSecond: Swift.Int?
  public var fatBurnSecond: Swift.Int?
  public var aerobicSecond: Swift.Int?
  public var limitSecond: Swift.Int?
  public var avgHr: Swift.Int?
  public var maxHr: Swift.Int?
  public var curHr: Swift.Int?
  public var warmUpValue: Swift.Int?
  public var fatBurnValue: Swift.Int?
  public var aerobicValue: Swift.Int?
  public var limitValue: Swift.Int?
  public var anaerobicValue: Swift.Int?
  public var avgSpeed: Swift.Int?
  public var maxSpeed: Swift.Int?
  public var avgStepFrequency: Swift.Int?
  public var maxStepFrequency: Swift.Int?
  public var avgStepStride: Swift.Int?
  public var maxStepStride: Swift.Int?
  public var kmSpeed: Swift.Int?
  public var fastKmSpeed: Swift.Int?
  public var kmSpeedCount: Swift.Int?
  public var kmSpeeds: [Swift.Int?]?
  public var mileCount: Swift.Int?
  public var mileSpeeds: [Swift.Int?]?
  public var stepsFrequencyCount: Swift.Int?
  public var stepsFrequencys: [Swift.Int?]?
  public var trainingEffect: Swift.Int?
  public var anaerobicTrainingEffect: Swift.Int?
  public var vo2Max: Swift.Int?
  public var actionDataCount: Swift.Int?
  public var inClassCalories: Swift.Int?
  public var completionRate: Swift.Int?
  public var hrCompletionRate: Swift.Int?
  public var recoverTime: Swift.Int?
  public var avgWeekActivityTime: Swift.Int?
  public var grade: Swift.Int?
  public var actionData: [[Swift.String : Any]?]?
  public var trainingOffset: Swift.Int?
  public var countHour: Swift.Int?
  public var countMinute: Swift.Int?
  public var countSecond: Swift.Int?
  public var time: Swift.Int?
  public var lowHeart: Swift.Int?
  public var heightHeart: Swift.Int?
  public var paceSpeedCount: Swift.Int?
  public var paceSpeeds: [Swift.Int?]?
  public var realSpeedCount: Swift.Int?
  public var realSpeeds: [Swift.Int?]?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, year: Swift.Int? = nil, month: Swift.Int? = nil, planType: Swift.Int? = nil, actionType: Swift.Int? = nil, version: Swift.Int? = nil, operate: Swift.Int? = nil, targetValue: Swift.Int? = nil, targetType: Swift.Int? = nil, forceStart: Swift.Int? = nil, retCode: Swift.Int? = nil, calories: Swift.Int? = nil, distance: Swift.Int? = nil, durations: Swift.Int? = nil, step: Swift.Int? = nil, swimPosture: Swift.Int? = nil, status: Swift.Int? = nil, signalFlag: Swift.Int? = nil, isSave: Swift.Bool? = nil, realTimeSpeed: Swift.Int? = nil, realTimePace: Swift.Int? = nil, interval: Swift.Int? = nil, hrCount: Swift.Int? = nil, burnFatMins: Swift.Int? = nil, aerobicMins: Swift.Int? = nil, limitMins: Swift.Int? = nil, hrValues: [Swift.Int?]? = nil, warmUpSecond: Swift.Int? = nil, anaeroicSecond: Swift.Int? = nil, fatBurnSecond: Swift.Int? = nil, aerobicSecond: Swift.Int? = nil, limitSecond: Swift.Int? = nil, avgHr: Swift.Int? = nil, maxHr: Swift.Int? = nil, curHr: Swift.Int? = nil, warmUpValue: Swift.Int? = nil, fatBurnValue: Swift.Int? = nil, aerobicValue: Swift.Int? = nil, limitValue: Swift.Int? = nil, anaerobicValue: Swift.Int? = nil, avgSpeed: Swift.Int? = nil, maxSpeed: Swift.Int? = nil, avgStepFrequency: Swift.Int? = nil, maxStepFrequency: Swift.Int? = nil, avgStepStride: Swift.Int? = nil, maxStepStride: Swift.Int? = nil, kmSpeed: Swift.Int? = nil, fastKmSpeed: Swift.Int? = nil, kmSpeedCount: Swift.Int? = nil, kmSpeeds: [Swift.Int?]? = nil, mileCount: Swift.Int? = nil, mileSpeeds: [Swift.Int?]? = nil, stepsFrequencyCount: Swift.Int? = nil, stepsFrequencys: [Swift.Int?]? = nil, trainingEffect: Swift.Int? = nil, anaerobicTrainingEffect: Swift.Int? = nil, vo2Max: Swift.Int? = nil, actionDataCount: Swift.Int? = nil, inClassCalories: Swift.Int? = nil, completionRate: Swift.Int? = nil, hrCompletionRate: Swift.Int? = nil, recoverTime: Swift.Int? = nil, avgWeekActivityTime: Swift.Int? = nil, grade: Swift.Int? = nil, actionData: [[Swift.String : Any]?]? = nil, trainingOffset: Swift.Int? = nil, countHour: Swift.Int? = nil, countMinute: Swift.Int? = nil, countSecond: Swift.Int? = nil, time: Swift.Int? = nil, lowHeart: Swift.Int? = nil, heightHeart: Swift.Int? = nil, paceSpeedCount: Swift.Int? = nil, paceSpeeds: [Swift.Int?]? = nil, realSpeedCount: Swift.Int? = nil, realSpeeds: [Swift.Int?]? = nil)
}
public struct IDOAppStartExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var targetType: Swift.Int?
  public var targetValue: Swift.Int?
  public var forceStart: Swift.Int?
  public var vo2max: Swift.Int?
  public var recoverTime: Swift.Int?
  public var avgWeekActivityTime: Swift.Int?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, targetType: Swift.Int? = nil, targetValue: Swift.Int? = nil, forceStart: Swift.Int? = nil, vo2max: Swift.Int? = nil, recoverTime: Swift.Int? = nil, avgWeekActivityTime: Swift.Int? = nil)
}
public struct IDOAppStartReplyExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var retCode: Swift.Int?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, retCode: Swift.Int? = nil)
}
public struct IDOAppEndExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var duration: Swift.Int?
  public var calories: Swift.Int?
  public var distance: Swift.Int?
  public var isSave: Swift.Int?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, duration: Swift.Int? = nil, calories: Swift.Int? = nil, distance: Swift.Int? = nil, isSave: Swift.Int? = nil)
}
public struct IDOAppIngExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var duration: Swift.Int?
  public var calories: Swift.Int?
  public var distance: Swift.Int?
  public var status: Swift.Int?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, duration: Swift.Int? = nil, calories: Swift.Int? = nil, distance: Swift.Int? = nil, status: Swift.Int? = nil)
}
public struct IDOAppPauseReplyExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var errCode: Swift.Int?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, errCode: Swift.Int? = nil)
}
public struct IDOAppRestoreExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil)
}
public struct IDOAppRestoreReplyExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var errCode: Swift.Int?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, errCode: Swift.Int? = nil)
}
public struct IDOAppIngV3ExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var version: Swift.Int?
  public var signal: Swift.Int?
  public var distance: Swift.Int?
  public var speed: Swift.Int?
  public var duration: Swift.Int?
  public var calories: Swift.Int?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, version: Swift.Int? = nil, signal: Swift.Int? = nil, distance: Swift.Int? = nil, speed: Swift.Int? = nil, duration: Swift.Int? = nil, calories: Swift.Int? = nil)
}
public struct IDOAppIngV3ReplyExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var version: Swift.Int?
  public var heartRate: Swift.Int?
  public var distance: Swift.Int?
  public var duration: Swift.Int?
  public var realTimeCalories: Swift.Int?
  public var realTimeSpeed: Swift.Int?
  public var kmSpeed: Swift.Int?
  public var steps: Swift.Int?
  public var swimPosture: Swift.Int?
  public var status: Swift.Int?
  public var realTimeSpeedPace: Swift.Int?
  public var trainingEffect: Swift.Int?
  public var anaerobicTrainingEffect: Swift.Int?
  public var actionType: Swift.Int?
  public var countHour: Swift.Int?
  public var countMinute: Swift.Int?
  public var countSecond: Swift.Int?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, version: Swift.Int? = nil, heartRate: Swift.Int? = nil, distance: Swift.Int? = nil, duration: Swift.Int? = nil, realTimeCalories: Swift.Int? = nil, realTimeSpeed: Swift.Int? = nil, kmSpeed: Swift.Int? = nil, steps: Swift.Int? = nil, swimPosture: Swift.Int? = nil, status: Swift.Int? = nil, realTimeSpeedPace: Swift.Int? = nil, trainingEffect: Swift.Int? = nil, anaerobicTrainingEffect: Swift.Int? = nil, actionType: Swift.Int? = nil, countHour: Swift.Int? = nil, countMinute: Swift.Int? = nil, countSecond: Swift.Int? = nil)
}
public struct IDOAppActivityDataV3ExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var year: Swift.Int?
  public var month: Swift.Int?
  public var version: Swift.Int?
  public var hrInterval: Swift.Int?
  public var step: Swift.Int?
  public var durations: Swift.Int?
  public var calories: Swift.Int?
  public var distance: Swift.Int?
  public var burnFatMins: Swift.Int?
  public var aerobicMins: Swift.Int?
  public var limitMins: Swift.Int?
  public var warmUp: Swift.Int?
  public var fatBurning: Swift.Int?
  public var aerobicExercise: Swift.Int?
  public var anaerobicExercise: Swift.Int?
  public var extremeExercise: Swift.Int?
  public var warmUpTime: Swift.Int?
  public var fatBurningTime: Swift.Int?
  public var aerobicExerciseTime: Swift.Int?
  public var anaerobicExerciseTime: Swift.Int?
  public var extremeExerciseTime: Swift.Int?
  public var avgSpeed: Swift.Int?
  public var maxSpeed: Swift.Int?
  public var avgStepStride: Swift.Int?
  public var maxStepStride: Swift.Int?
  public var kmSpeed: Swift.Int?
  public var fastKmSpeed: Swift.Int?
  public var avgStepFrequency: Swift.Int?
  public var maxStepFrequency: Swift.Int?
  public var avgHrValue: Swift.Int?
  public var maxHrValue: Swift.Int?
  public var recoverTime: Swift.Int?
  public var vo2max: Swift.Int?
  public var trainingEffect: Swift.Int?
  public var grade: Swift.Int?
  public var stepsFrequencyCount: Swift.Int?
  public var miSpeedCount: Swift.Int?
  public var realSpeedCount: Swift.Int?
  public var paceSpeedCount: Swift.Int?
  public var kmSpeedCount: Swift.Int?
  public var actionDataCount: Swift.Int?
  public var kmSpeeds: [Swift.Int?]?
  public var stepsFrequency: [Swift.Int?]?
  public var itemsMiSpeed: [Swift.Int?]?
  public var itemRealSpeed: [Swift.Int?]?
  public var paceSpeedItems: [Swift.Int?]?
  public var actionData: [[Swift.String : Any]?]?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, year: Swift.Int? = nil, month: Swift.Int? = nil, version: Swift.Int? = nil, hrInterval: Swift.Int? = nil, step: Swift.Int? = nil, durations: Swift.Int? = nil, calories: Swift.Int? = nil, distance: Swift.Int? = nil, burnFatMins: Swift.Int? = nil, aerobicMins: Swift.Int? = nil, limitMins: Swift.Int? = nil, warmUp: Swift.Int? = nil, fatBurning: Swift.Int? = nil, aerobicExercise: Swift.Int? = nil, anaerobicExercise: Swift.Int? = nil, extremeExercise: Swift.Int? = nil, warmUpTime: Swift.Int? = nil, fatBurningTime: Swift.Int? = nil, aerobicExerciseTime: Swift.Int? = nil, anaerobicExerciseTime: Swift.Int? = nil, extremeExerciseTime: Swift.Int? = nil, avgSpeed: Swift.Int? = nil, maxSpeed: Swift.Int? = nil, avgStepStride: Swift.Int? = nil, maxStepStride: Swift.Int? = nil, kmSpeed: Swift.Int? = nil, fastKmSpeed: Swift.Int? = nil, avgStepFrequency: Swift.Int? = nil, maxStepFrequency: Swift.Int? = nil, avgHrValue: Swift.Int? = nil, maxHrValue: Swift.Int? = nil, recoverTime: Swift.Int? = nil, vo2max: Swift.Int? = nil, trainingEffect: Swift.Int? = nil, grade: Swift.Int? = nil, stepsFrequencyCount: Swift.Int? = nil, miSpeedCount: Swift.Int? = nil, realSpeedCount: Swift.Int? = nil, paceSpeedCount: Swift.Int? = nil, kmSpeedCount: Swift.Int? = nil, actionDataCount: Swift.Int? = nil, kmSpeeds: [Swift.Int?]? = nil, stepsFrequency: [Swift.Int?]? = nil, itemsMiSpeed: [Swift.Int?]? = nil, itemRealSpeed: [Swift.Int?]? = nil, paceSpeedItems: [Swift.Int?]? = nil, actionData: [[Swift.String : Any]?]? = nil)
}
public struct IDOAppBlePauseExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil)
}
public struct IDOAppBlePauseReplyExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var errCode: Swift.Int?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, errCode: Swift.Int? = nil)
}
public struct IDOAppBleRestoreExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil)
}
public struct IDOAppBleRestoreReplyExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var errCode: Swift.Int?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, errCode: Swift.Int? = nil)
}
public struct IDOAppBleEndExchangeModel {
  public var duration: Swift.Int?
  public var calories: Swift.Int?
  public var distance: Swift.Int?
  public var avgHr: Swift.Int?
  public var maxHr: Swift.Int?
  public var burnFatMins: Swift.Int?
  public var aerobicMins: Swift.Int?
  public var limitMins: Swift.Int?
  public var isSave: Swift.Int?
  public init(duration: Swift.Int? = nil, calories: Swift.Int? = nil, distance: Swift.Int? = nil, avgHr: Swift.Int? = nil, maxHr: Swift.Int? = nil, burnFatMins: Swift.Int? = nil, aerobicMins: Swift.Int? = nil, limitMins: Swift.Int? = nil, isSave: Swift.Int? = nil)
}
public struct IDOAppBleEndReplyExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var errCode: Swift.Int?
  public var duration: Swift.Int?
  public var calories: Swift.Int?
  public var distance: Swift.Int?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, errCode: Swift.Int? = nil, duration: Swift.Int? = nil, calories: Swift.Int? = nil, distance: Swift.Int? = nil)
}
public struct IDOBleStartExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var operate: Swift.Int?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, operate: Swift.Int? = nil)
}
public struct IDOBleIngExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var distance: Swift.Int?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, distance: Swift.Int? = nil)
}
public struct IDOBleEndExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil)
}
public struct IDOBlePauseExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil)
}
public struct IDOBleRestoreExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil)
}
public struct IDOBleStartReplyExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var operate: Swift.Int?
  public var retCode: Swift.Int?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, operate: Swift.Int? = nil, retCode: Swift.Int? = nil)
}
public struct IDOBleIngReplyExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var distance: Swift.Int?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, distance: Swift.Int? = nil)
}
public struct IDOBleEndReplyExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var retCode: Swift.Int?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, retCode: Swift.Int? = nil)
}
public struct IDOBlePauseReplyExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var retCode: Swift.Int?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, retCode: Swift.Int? = nil)
}
public struct IDOBleRestoreReplyExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var retCode: Swift.Int?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, retCode: Swift.Int? = nil)
}
public struct IDOAppOperatePlanExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var operate: Swift.Int?
  public var trainingOffset: Swift.Int?
  public var planType: Swift.Int?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, operate: Swift.Int? = nil, trainingOffset: Swift.Int? = nil, planType: Swift.Int? = nil)
}
public struct IDOAppOperatePlanReplyExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var planType: Swift.Int?
  public var operate: Swift.Int?
  public var actionType: Swift.Int?
  public var errorCode: Swift.Int?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, planType: Swift.Int? = nil, operate: Swift.Int? = nil, actionType: Swift.Int? = nil, errorCode: Swift.Int? = nil)
}
public struct IDOBleOperatePlanExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var operate: Swift.Int?
  public var planType: Swift.Int?
  public var actionType: Swift.Int?
  public var errorCode: Swift.Int?
  public var trainingYear: Swift.Int?
  public var trainingMonth: Swift.Int?
  public var trainingDay: Swift.Int?
  public var time: Swift.Int?
  public var lowHeart: Swift.Int?
  public var heightHeart: Swift.Int?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, operate: Swift.Int? = nil, planType: Swift.Int? = nil, actionType: Swift.Int? = nil, errorCode: Swift.Int? = nil, trainingYear: Swift.Int? = nil, trainingMonth: Swift.Int? = nil, trainingDay: Swift.Int? = nil, time: Swift.Int? = nil, lowHeart: Swift.Int? = nil, heightHeart: Swift.Int? = nil)
}
public struct IDOBleOperatePlanReplyExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var operate: Swift.Int?
  public var planType: Swift.Int?
  public var actionType: Swift.Int?
  public var errorCode: Swift.Int?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, operate: Swift.Int? = nil, planType: Swift.Int? = nil, actionType: Swift.Int? = nil, errorCode: Swift.Int? = nil)
}
public struct IDOAppPauseExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var pauseHour: Swift.Int?
  public var pauseMinute: Swift.Int?
  public var pauseSecond: Swift.Int?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil)
}
public struct IDOAppIngReplyExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var calories: Swift.Int?
  public var distance: Swift.Int?
  public var status: Swift.Int?
  public var step: Swift.Int?
  public var currentHr: Swift.Int?
  public var interval: Swift.Int?
  public var hrSerial: Swift.Int?
  public var hrJson: [Swift.Int]?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, calories: Swift.Int? = nil, distance: Swift.Int? = nil, status: Swift.Int? = nil, step: Swift.Int? = nil, currentHr: Swift.Int? = nil, interval: Swift.Int? = nil, hrSerial: Swift.Int? = nil, hrJson: [Swift.Int]? = nil)
}
public struct IDOAppHrDataExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var version: Swift.Int?
  public var heartRateHistoryLen: Swift.Int?
  public var interval: Swift.Int?
  public var heartRates: [Swift.Int?]?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, version: Swift.Int? = nil, heartRateHistoryLen: Swift.Int? = nil, interval: Swift.Int? = nil, heartRates: [Swift.Int?]? = nil)
}
public struct IDOAppGpsDataExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var version: Swift.Int?
  public var intervalSecond: Swift.Int?
  public var gpsCount: Swift.Int?
  public var gpsData: [[Swift.String : Any]?]?
  public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, version: Swift.Int? = nil, intervalSecond: Swift.Int? = nil, gpsCount: Swift.Int? = nil, gpsData: [[Swift.String : Any]?]? = nil)
}
public struct IDOAppEndReplyExchangeModel {
  public var baseModel: protocol_channel.IDOExchangeBaseModel?
  public var errorCode: Swift.Int?
  public var calories: Swift.Int?
  public var distance: Swift.Int?
  public var step: Swift.Int?
  public var avgHr: Swift.Int?
  public var maxHr: Swift.Int?
  public var burnFatMins: Swift.Int?
  public var aerobicMins: Swift.Int?
  public var limitMins: Swift.Int?
}
public typealias BlockLogProgress = (_ progress: Swift.Double) -> Swift.Void
public enum IDODeviceLogType : Swift.Int {
  case initial
  case reboot
  case general
  case reset
  case hardware
  case algorithm
  case restart
  case battery
  case heat
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol IDOExchangeDataDelegate : ObjectiveC.NSObjectProtocol {
  func appListenBleExec(type: protocol_channel.IDOBleExecType)
  func appListenAppExec(type: protocol_channel.IDOBleReplyType)
  func exchangeV2Data(model: protocol_channel.IDOExchangeV2Model)
  func exchangeV3Data(model: protocol_channel.IDOExchangeV3Model)
}
public typealias BlockFileTransStatus = (_ currentIndex: Swift.Int, _ status: protocol_channel.IDOTransStatus?, _ errorCode: Swift.Int?, _ finishingTime: Swift.Int?) -> Swift.Void
public typealias BlockFileTransProgress = (_ currentIndex: Swift.Int, _ totalCount: Swift.Int, _ currentProgress: Swift.Float, _ totalProgress: Swift.Float) -> Swift.Void
public enum IDOTransType : Swift.Int, Swift.Codable {
  case fw
  case fzbin
  case bin
  case lang
  case bt
  case iwfLz
  case wallpaperZ
  case ml
  case onlineUbx
  case offlineUbx
  case mp3
  case msg
  case sport
  case sports
  case epo
  case gps
  case bpbin
  case voice
  case ton
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum IDOTransStatus : Swift.Int {
  case none
  case invalid
  case notExists
  case busy
  case config
  case beforeOpt
  case trans
  case finished
  case onFastSynchronizing
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol IDOTransBaseModel : Swift.Decodable, Swift.Encodable {
  var fileType: protocol_channel.IDOTransType! { get }
  var filePath: Swift.String! { get }
  var fileName: Swift.String! { get }
  var fileSize: Swift.Int? { get set }
}
public class IDOTransNormalModel : protocol_channel.IDOTransBaseModel {
  final public let fileType: protocol_channel.IDOTransType!
  final public let filePath: Swift.String!
  final public let fileName: Swift.String!
  public var fileSize: Swift.Int?
  public init(fileType: protocol_channel.IDOTransType!, filePath: Swift.String!, fileName: Swift.String!, fileSize: Swift.Int? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class IDOTransMessageModel : protocol_channel.IDOTransBaseModel {
  public var fileType: protocol_channel.IDOTransType!
  final public let filePath: Swift.String!
  final public let fileName: Swift.String!
  public var fileSize: Swift.Int?
  final public let evtType: Swift.Int!
  final public let packName: Swift.String!
  public init(filePath: Swift.String!, fileName: Swift.String!, fileSize: Swift.Int? = nil, evtType: Swift.Int, packName: Swift.String)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class IDOTransMusicModel : protocol_channel.IDOTransBaseModel {
  public var fileType: protocol_channel.IDOTransType!
  final public let filePath: Swift.String!
  final public let fileName: Swift.String!
  public var fileSize: Swift.Int?
  final public let musicId: Swift.Int
  public var singerName: Swift.String?
  public var useSpp: Swift.Bool
  public init(filePath: Swift.String!, fileName: Swift.String!, fileSize: Swift.Int? = nil, musicId: Swift.Int, singerName: Swift.String? = nil, useSpp: Swift.Bool = false)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class IDOTransSportModel : protocol_channel.IDOTransBaseModel {
  final public let fileType: protocol_channel.IDOTransType!
  final public let filePath: Swift.String!
  final public let fileName: Swift.String!
  public var fileSize: Swift.Int?
  final public let sportType: Swift.Int!
  final public let iconType: Swift.Int!
  final public let isSports: Swift.Bool!
  public init(filePath: Swift.String!, fileName: Swift.String!, fileSize: Swift.Int? = nil, sportType: Swift.Int!, iconType: Swift.Int!, isSports: Swift.Bool!)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct IDOActivitySwitchModel : protocol_channel.IDOBaseModel {
  public let errCode: Swift.Int
  public let autoIdentifySportWalk: Swift.Int
  public let autoIdentifySportRun: Swift.Int
  public let autoIdentifySportBicycle: Swift.Int
  public let autoPauseOnOff: Swift.Int
  public let autoEndRemindOnOffOnOff: Swift.Int
  public let autoIdentifySportElliptical: Swift.Int
  public let autoIdentifySportRowing: Swift.Int
  public let autoIdentifySportSwim: Swift.Int
  public let autoIdentifySportSmartRope: Swift.Int
  public init(errCode: Swift.Int, autoIdentifySportWalk: Swift.Int, autoIdentifySportRun: Swift.Int, autoIdentifySportBicycle: Swift.Int, autoPauseOnOff: Swift.Int, autoEndRemindOnOffOnOff: Swift.Int, autoIdentifySportElliptical: Swift.Int, autoIdentifySportRowing: Swift.Int, autoIdentifySportSwim: Swift.Int, autoIdentifySportSmartRope: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOAlarmModel : protocol_channel.IDOBaseModel {
  public let items: [protocol_channel.IDOAlarmItem]
  public init(items: [protocol_channel.IDOAlarmItem])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOAlarmItem : Swift.Codable {
  public let alarmID: Swift.Int
  public let delayMin: Swift.Int
  public let hour: Swift.Int
  public let minute: Swift.Int
  public let name: Swift.String
  public var repeats: Swift.Set<protocol_channel.IDOWeek>
  public var isOpenRepeat: Swift.Bool
  public let repeatTimes: Swift.Int
  public let shockOnOff: Swift.Int
  public let status: protocol_channel.IDOAlarmStatus
  public let tsnoozeDuration: Swift.Int
  public let type: protocol_channel.IDOAlarmType
  public init(alarmID: Swift.Int, delayMin: Swift.Int, hour: Swift.Int, minute: Swift.Int, name: Swift.String, repeats: Swift.Set<protocol_channel.IDOWeek>, isOpenRepeat: Swift.Bool, repeatTimes: Swift.Int, shockOnOff: Swift.Int, status: protocol_channel.IDOAlarmStatus, tsnoozeDuration: Swift.Int, type: protocol_channel.IDOAlarmType)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum IDOAlarmType : Swift.Int {
  case wakeUp
  case sleep
  case exercise
  case medication
  case date
  case gathering
  case meeting
  case other
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum IDOWeek : Swift.Int {
  case monday, tuesday, wednesday, thursday, friday, saturday, sunday
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum IDOAlarmStatus : Swift.Int {
  case invalid
  case hidden
  case displayed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol IDOAlexaInterface {
  func onNetworkChanged(hasNetwork: Swift.Bool)
  func setupAlexa(delegate: protocol_channel.IDOAlexaDelegate, clientId: Swift.String)
  var isLogin: Swift.Bool { get }
  func onLoginStateChanged(handle: @escaping (protocol_channel.IDOAlexaLoginState) -> Swift.Void)
  func authorizeRequest(productId: Swift.String, handle: @escaping (_ verificationUri: Swift.String, _ pairCode: Swift.String) -> Swift.Void, completion: @escaping (_ rs: protocol_channel.IDOAlexaAuthorizeResult) -> Swift.Void) -> protocol_channel.IDOCancellable
  func logout()
}
public struct IDOAllHealthSwitchStateModel : protocol_channel.IDOBaseModel {
  public let heartMode: Swift.Int
  public let pressureMode: Swift.Int
  public let spo2Mode: Swift.Int
  public let scienceMode: Swift.Int
  public let temperatureMode: Swift.Int
  public let noiseMode: Swift.Int
  public let menstrualMode: Swift.Int
  public let walkMode: Swift.Int
  public let handwashingMode: Swift.Int
  public let respirRateState: Swift.Int
  public let bodyPowerState: Swift.Int
  public let drinkwaterMode: Swift.Int
  public let heartmodeNotifyFlag: Swift.Int
  public let pressureNotifyFlag: Swift.Int
  public let spo2NotifyFlag: Swift.Int
  public let menstrualNotifyFlag: Swift.Int
  public let guidanceNotifyFlag: Swift.Int
  public let reminderNotifyFlag: Swift.Int
  public init(heartMode: Swift.Int, pressureMode: Swift.Int, spo2Mode: Swift.Int, scienceMode: Swift.Int, temperatureMode: Swift.Int, noiseMode: Swift.Int, menstrualMode: Swift.Int, walkMode: Swift.Int, handwashingMode: Swift.Int, respirRateState: Swift.Int, bodyPowerState: Swift.Int, drinkwaterMode: Swift.Int, heartmodeNotifyFlag: Swift.Int, pressureNotifyFlag: Swift.Int, spo2NotifyFlag: Swift.Int, menstrualNotifyFlag: Swift.Int, guidanceNotifyFlag: Swift.Int, reminderNotifyFlag: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol IDOBaseModel : Swift.Decodable, Swift.Encodable {
  func toJsonString() -> Swift.String?
}
public struct IDOBatteryInfoModel : protocol_channel.IDOBaseModel {
  public let type: Swift.Int
  public let voltage: Swift.Int
  public let status: Swift.Int
  public let level: Swift.Int
  public let lastChargingYear: Swift.Int
  public let lastChargingMonth: Swift.Int
  public let lastChargingDay: Swift.Int
  public let lastChargingHour: Swift.Int
  public let lastChargingMinute: Swift.Int
  public let lastChargingSecond: Swift.Int
  public let mode: Swift.Int
  public init(type: Swift.Int, voltage: Swift.Int, status: Swift.Int, level: Swift.Int, lastChargingYear: Swift.Int, lastChargingMonth: Swift.Int, lastChargingDay: Swift.Int, lastChargingHour: Swift.Int, lastChargingMinute: Swift.Int, lastChargingSecond: Swift.Int, mode: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOBleBeepModel : protocol_channel.IDOBaseModel {
  public let errCode: Swift.Int
  public let items: [protocol_channel.IDOBleBeepItem]
  public init(errCode: Swift.Int, items: [protocol_channel.IDOBleBeepItem])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOBleBeepItem : Swift.Codable {
  public let name: Swift.String
  public init(name: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol IDOBleInterface {
  func addBleDelegate(api: protocol_channel.IDOBleDelegate?)
  func addDfuDelegate(api: protocol_channel.IDODfuDelegate?)
  func startScan(macAddress: Swift.String?, completion: @escaping ([protocol_channel.IDODeviceModel]?) -> Swift.Void)
  func scanFilter(deviceName: [Swift.String]?, deviceID: [Swift.Int]?, macAddress: [Swift.String]?, uuid: [Swift.String]?)
  func stopScan()
  func connect(device: protocol_channel.IDODeviceModel?)
  func autoConnect(device: protocol_channel.IDODeviceModel?)
  func cancelConnect(macAddress: Swift.String?, completion: @escaping (Swift.Bool) -> Swift.Void)
  func getBluetoothState(completion: @escaping (protocol_channel.IDOBluetoothStateModel) -> Swift.Void)
  func getDeviceState(device: protocol_channel.IDODeviceModel?, completion: @escaping (protocol_channel.IDODeviceStateModel) -> Swift.Void)
  func setBtPair(device: protocol_channel.IDODeviceModel)
  func cancelPair(device: protocol_channel.IDODeviceModel?)
  func connectSPP(btMacAddress: Swift.String)
  func disconnectSPP(btMacAddress: Swift.String)
  func startNordicDFU(config: protocol_channel.IDODfuConfig)
}
public protocol IDODfuDelegate : ObjectiveC.NSObjectProtocol {
  func dfuComplete()
  func dfuError(error: Swift.String)
  func dfuProgress(progress: Swift.Int)
}
public protocol IDOBleDelegate : ObjectiveC.NSObjectProtocol {
  func scanResult(list: [protocol_channel.IDODeviceModel]?)
  func bluetoothState(state: protocol_channel.IDOBluetoothStateModel)
  func deviceState(state: protocol_channel.IDODeviceStateModel)
}
public struct IDOBleVoiceParamModel : protocol_channel.IDOBaseModel {
  public let totalVolume: Swift.Int
  public let currentVolume: Swift.Int
  public init(totalVolume: Swift.Int, currentVolume: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOBpAlgVersionModel : protocol_channel.IDOBaseModel {
  public let bpVersion1: Swift.Int
  public let bpVersion2: Swift.Int
  public let bpVersion3: Swift.Int
  public init(bpVersion1: Swift.Int, bpVersion2: Swift.Int, bpVersion3: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOBpCalControlModel : protocol_channel.IDOBaseModel {
  public let errorCode: Swift.Int
  public let operate: Swift.Int
  public let sbpPpgFeatureNum: Swift.Int
  public let dbpPpgFeatureNum: Swift.Int
  public let sbpPpgFeatureItems: [Swift.Int]
  public let dbpPpgFeatureItems: [Swift.Int]
  public init(errorCode: Swift.Int, operate: Swift.Int, sbpPpgFeatureNum: Swift.Int, dbpPpgFeatureNum: Swift.Int, sbpPpgFeatureItems: [Swift.Int], dbpPpgFeatureItems: [Swift.Int])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOBpCalibrationModel : protocol_channel.IDOBaseModel {
  public let retCode: Swift.Int
  public init(retCode: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOBpCalibrationParamModel : protocol_channel.IDOBaseModel {
  public let flag: Swift.Int
  public let diastolic: Swift.Int
  public let systolic: Swift.Int
  public init(flag: Swift.Int, diastolic: Swift.Int, systolic: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOBpMeasurementModel : protocol_channel.IDOBaseModel {
  public let status: Swift.Int
  public let systolicBp: Swift.Int
  public let diastolicBp: Swift.Int
  public init(status: Swift.Int, systolicBp: Swift.Int, diastolicBp: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOBpMeasurementParamModel : protocol_channel.IDOBaseModel {
  public let flag: Swift.Int
  public init(flag: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol IDOBridgeInterface {
  func setupBridge(delegate: protocol_channel.IDOBridgeDelegate, logType: protocol_channel.IDOLogType)
}
public protocol IDOBridgeDelegate : ObjectiveC.NSObjectProtocol {
  func listenStatusNotification(status: protocol_channel.IDOStatusNotification)
  func listenDeviceNotification(model: protocol_channel.IDODeviceNotificationModel)
}
public struct IDOBtNoticeModel : protocol_channel.IDOBaseModel {
  public let btConnectStates: Swift.Int
  public let btPairStates: Swift.Int
  public let a2dpConnectStates: Swift.Int
  public let hfpConnectStates: Swift.Int
  public init(btConnectStates: Swift.Int, btPairStates: Swift.Int, a2dpConnectStates: Swift.Int, hfpConnectStates: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOCmdGetResponseModel : protocol_channel.IDOBaseModel {
  public let onOff: Swift.Int
  public init(onOff: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public typealias IDOCmdResponse<U> = (Swift.Result<U?, protocol_channel.CmdError>) -> ()
public protocol IDOCmdProtocol {
  associatedtype DataType
  func send(completion: @escaping protocol_channel.IDOCmdResponse<Self.DataType>) -> protocol_channel.IDOCancellable
}
public protocol IDOCmdInterface {
  var isBinding: Swift.Bool { get }
  func bind(osVersion: Swift.Int, onDeviceInfo: ((protocol_channel.IDODeviceInterface) -> Swift.Void)?, onFuncTable: ((protocol_channel.IDOFuncTableInterface) -> Swift.Void)?, completion: @escaping (protocol_channel.IDOBindStatus) -> Swift.Void)
  func cancelBind()
  func unbind(macAddress: Swift.String, isForceRemove: Swift.Bool, completion: @escaping (Swift.Bool) -> Swift.Void)
  func setAuthCode(code: Swift.String, osVersion: Swift.Int, completion: @escaping (Swift.Bool) -> Swift.Void)
  func setV2CallEvt(contactText: Swift.String, phoneNumber: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
  func setV2NoticeEvt(type: protocol_channel.NoticeMessageType, contactText: Swift.String, phoneNumber: Swift.String, dataText: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
  func stopV2CallEvt(completion: @escaping (Swift.Bool) -> Swift.Void)
  func missedV2MissedCallEvt(completion: @escaping (Swift.Bool) -> Swift.Void)
}
public struct IDOCmdSetResponseModel : protocol_channel.IDOBaseModel {
  public let isSuccess: Swift.Int
  public init(isSuccess: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOContactReviseTimeModel : protocol_channel.IDOBaseModel {
  public let result: Swift.Int
  public init(result: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol IDODataExchangeInterface {
  var supportV3ActivityExchange: Swift.Bool { get }
  var status: protocol_channel.IDOExchangeStatus { get }
  func addExchange(delegate: protocol_channel.IDOExchangeDataDelegate?)
  func appExec(_ type: protocol_channel.IDOAppExecType)
  func appReplyExec(_ type: protocol_channel.IDOAppReplyType)
  func getLastActivityData()
  func getActivityHrData()
  func getActivityGpsData()
}
public struct IDODataTranConfigModel : protocol_channel.IDOBaseModel {
  public let errCode: Swift.Int
  public let type: Swift.Int
  public let evtType: Swift.Int
  public let sportType: Swift.Int
  public let iconWidth: Swift.Int
  public let iconHeight: Swift.Int
  public let format: Swift.Int
  public let blockSize: Swift.Int
  public let bigSportsNum: Swift.Int
  public let msgNum: Swift.Int
  public let smallSportsAndAnimationNum: Swift.Int
  public let mediumNum: Swift.Int
  public init(errCode: Swift.Int, type: Swift.Int, evtType: Swift.Int, sportType: Swift.Int, iconWidth: Swift.Int, iconHeight: Swift.Int, format: Swift.Int, blockSize: Swift.Int, bigSportsNum: Swift.Int, msgNum: Swift.Int, smallSportsAndAnimationNum: Swift.Int, mediumNum: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDODateTimeParamModel : protocol_channel.IDOBaseModel {
  public let year: Swift.Int, monuth: Swift.Int, day: Swift.Int, hour: Swift.Int
  public let minute: Swift.Int, second: Swift.Int
  public let week: Swift.Int
  public let timeZone: Swift.Int
  public init(year: Swift.Int, monuth: Swift.Int, day: Swift.Int, hour: Swift.Int, minute: Swift.Int, second: Swift.Int, week: Swift.Int, timeZone: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol IDODeviceInterface {
  var deviceMode: Swift.Int { get }
  var battStatus: Swift.Int { get }
  var battLevel: Swift.Int { get }
  var rebootFlag: Swift.Int { get }
  var bindState: Swift.Int { get }
  var bindType: Swift.Int { get }
  var bindTimeout: Swift.Int { get }
  var platform: Swift.Int { get }
  var deviceShapeType: Swift.Int { get }
  var deviceType: Swift.Int { get }
  var dialMainVersion: Swift.Int { get }
  var showBindChoiceUi: Swift.Int { get }
  var deviceId: Swift.Int { get }
  var firmwareVersion: Swift.Int { get }
  var macAddress: Swift.String { get }
  var macAddressFull: Swift.String { get }
  var deviceName: Swift.String { get }
  var otaMode: Swift.Bool { get }
  var uuid: Swift.String { get }
  var macAddressBt: Swift.String { get }
  var fwVersion1: Swift.Int { get }
  var fwVersion2: Swift.Int { get }
  var fwVersion3: Swift.Int { get }
  var fwBtFlag: Swift.Int { get }
  var fwBtVersion1: Swift.Int { get }
  var fwBtVersion2: Swift.Int { get }
  var fwBtVersion3: Swift.Int { get }
  var fwBtMatchVersion1: Swift.Int { get }
  var fwBtMatchVersion2: Swift.Int { get }
  var fwBtMatchVersion3: Swift.Int { get }
  func printProperties() -> Swift.String?
  func refreshDeviceInfo(forced: Swift.Bool, completion: @escaping (Swift.Bool) -> Swift.Void)
  func refreshFirmwareVersion(forced: Swift.Bool, completion: @escaping (Swift.Bool) -> Swift.Void)
}
public protocol IDODeviceLogInterface {
  var getLogIng: Swift.Bool { get }
  var logDirPath: Swift.String { get }
  func startGet(types: [protocol_channel.IDODeviceLogType], timeOut: Swift.Int, progress: @escaping protocol_channel.BlockLogProgress, completion: @escaping (Swift.Bool) -> Swift.Void)
  func cancel(completion: @escaping () -> Swift.Void)
}
public struct IDODeviceLogStateModel : protocol_channel.IDOBaseModel {
  public let type: Swift.Int
  public let errCode: Swift.Int
  public init(type: Swift.Int, errCode: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDODisplayModeParamModel : protocol_channel.IDOBaseModel {
  public let mode: Swift.Int
  public init(mode: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDODownloadLanguageModel : protocol_channel.IDOBaseModel {
  public let useLang: Swift.Int
  public let defaultLang: Swift.Int
  public let fixedLang: Swift.Int
  public let maxStorageLang: Swift.Int
  public let langArray: [protocol_channel.IDODownloadLanguageType]
  public init(useLang: Swift.Int, defaultLang: Swift.Int, fixedLang: Swift.Int, maxStorageLang: Swift.Int, langArray: [protocol_channel.IDODownloadLanguageType])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDODownloadLanguageType : Swift.Codable {
  public let type: Swift.Int
  public init(type: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOErrorRecordModel : protocol_channel.IDOBaseModel {
  public let type: Swift.Int
  public let resetFlag: Swift.Int
  public let hwError: Swift.Int
  public init(type: Swift.Int, resetFlag: Swift.Int, hwError: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol IDOFileTransferInterface {
  var isTransmitting: Swift.Bool { get }
  var transFileType: protocol_channel.IDOTransType? { get }
  func transferFiles(fileItems: [protocol_channel.IDOTransBaseModel], cancelPrevTranTask: Swift.Bool, transProgress: @escaping protocol_channel.BlockFileTransProgress, transStatus: @escaping protocol_channel.BlockFileTransStatus, completion: @escaping ([Swift.Bool]) -> Swift.Void) -> protocol_channel.IDOCancellable?
  func iwfFileSize(filePath: Swift.String, type: Swift.Int64, completion: @escaping (Swift.Int64) -> Swift.Void)
}
public struct IDOFitnessGuidanceParamModel : protocol_channel.IDOBaseModel {
  public let mode: Swift.Int
  public let startHour: Swift.Int
  public let startMinute: Swift.Int
  public let endHour: Swift.Int
  public let endMinute: Swift.Int
  public let notifyFlag: Swift.Int
  public let goMode: Swift.Int
  public let repeats: Swift.Set<protocol_channel.IDOWeek>
  public let isOpenRepeat: Swift.Bool
  public let targetSteps: Swift.Int
  public init(mode: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, notifyFlag: Swift.Int, goMode: Swift.Int, isOpenRepeat: Swift.Bool, repeats: Swift.Set<protocol_channel.IDOWeek>, targetSteps: Swift.Int)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public func toJsonString() -> Swift.String?
}
public struct IDOFlashBinInfoModel : protocol_channel.IDOBaseModel {
  public let status: Swift.Int
  public let matchVersion: Swift.Int
  public let checkCode: Swift.Int
  public init(status: Swift.Int, matchVersion: Swift.Int, checkCode: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOFuncSimpleFileOptModel : protocol_channel.IDOBaseModel {
  public let error: Swift.Int
  public let operate: Swift.Int
  public let index: Swift.Int
  public init(error: Swift.Int, operate: Swift.Int, index: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOFuncSimpleFileOptParamModel : protocol_channel.IDOBaseModel {
  public let operate: Swift.Int
  public let index: Swift.Int
  public let destIndex: Swift.Int
  public init(operate: Swift.Int, index: Swift.Int, destIndex: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol IDOFuncTableInterface {
  var reminderAncs: Swift.Bool { get }
  var reminderSnapchat: Swift.Bool { get }
  var reminderLine: Swift.Bool { get }
  var reminderOutlook: Swift.Bool { get }
  var reminderTelegram: Swift.Bool { get }
  var reminderViber: Swift.Bool { get }
  var reminderVkontakte: Swift.Bool { get }
  var reminderChatwork: Swift.Bool { get }
  var reminderSlack: Swift.Bool { get }
  var reminderTumblr: Swift.Bool { get }
  var reminderYahooMail: Swift.Bool { get }
  var reminderYahooPinterest: Swift.Bool { get }
  var reminderYoutube: Swift.Bool { get }
  var reminderGmail: Swift.Bool { get }
  var reminderKakaoTalk: Swift.Bool { get }
  var reminderOnlyGoogleGmail: Swift.Bool { get }
  var reminderOnlyOutlookEmail: Swift.Bool { get }
  var reminderOnlyYahooEmail: Swift.Bool { get }
  var reminderTiktok: Swift.Bool { get }
  var reminderRedbus: Swift.Bool { get }
  var reminderDailyhunt: Swift.Bool { get }
  var reminderHotstar: Swift.Bool { get }
  var reminderInshorts: Swift.Bool { get }
  var reminderPaytm: Swift.Bool { get }
  var reminderAmazon: Swift.Bool { get }
  var reminderFlipkart: Swift.Bool { get }
  var reminderNhnEmail: Swift.Bool { get }
  var reminderInstantEmail: Swift.Bool { get }
  var reminderZohoEmail: Swift.Bool { get }
  var reminderExchangeEmail: Swift.Bool { get }
  var reminder189Email: Swift.Bool { get }
  var reminderVeryFit: Swift.Bool { get }
  var reminderGeneral: Swift.Bool { get }
  var reminderMattersRemind: Swift.Bool { get }
  var reminderMicrosoft: Swift.Bool { get }
  var reminderMissedCall: Swift.Bool { get }
  var reminderGetAllContact: Swift.Bool { get }
  var reminderWhatsappBusiness: Swift.Bool { get }
  var reminderEmail: Swift.Bool { get }
  var reminderFacebook: Swift.Bool { get }
  var reminderMessage: Swift.Bool { get }
  var reminderQq: Swift.Bool { get }
  var reminderTwitter: Swift.Bool { get }
  var reminderWeixin: Swift.Bool { get }
  var reminderCalendar: Swift.Bool { get }
  var reminderInstagram: Swift.Bool { get }
  var reminderLinkedIn: Swift.Bool { get }
  var reminderMessengre: Swift.Bool { get }
  var reminderSkype: Swift.Bool { get }
  var reminderWhatsapp: Swift.Bool { get }
  var reminderAlarmClock: Swift.Bool { get }
  var reminderSinaWeibo: Swift.Bool { get }
  var reminderCalling: Swift.Bool { get }
  var reminderCallContact: Swift.Bool { get }
  var reminderCallNum: Swift.Bool { get }
  var reminderPrime: Swift.Bool { get }
  var reminderNetflix: Swift.Bool { get }
  var reminderGpay: Swift.Bool { get }
  var reminderPhonpe: Swift.Bool { get }
  var reminderSwiggy: Swift.Bool { get }
  var reminderZomato: Swift.Bool { get }
  var reminderMakemytrip: Swift.Bool { get }
  var reminderJioTv: Swift.Bool { get }
  var reminderNiosefit: Swift.Bool { get }
  var reminderYtmusic: Swift.Bool { get }
  var reminderUber: Swift.Bool { get }
  var reminderOla: Swift.Bool { get }
  var reminderGoogleMeet: Swift.Bool { get }
  var reminderMormaiiSmartwatch: Swift.Bool { get }
  var reminderTechnosConnect: Swift.Bool { get }
  var reminderEnjoei: Swift.Bool { get }
  var reminderAliexpress: Swift.Bool { get }
  var reminderShopee: Swift.Bool { get }
  var reminderTeams: Swift.Bool { get }
  var reminder99Taxi: Swift.Bool { get }
  var reminderUberEats: Swift.Bool { get }
  var reminderLfood: Swift.Bool { get }
  var reminderRappi: Swift.Bool { get }
  var reminderMercadoLivre: Swift.Bool { get }
  var reminderMagalu: Swift.Bool { get }
  var reminderAmericanas: Swift.Bool { get }
  var reminderYahoo: Swift.Bool { get }
  var reminderMessageIcon: Swift.Bool { get }
  var sportWalk: Swift.Bool { get }
  var sportRun: Swift.Bool { get }
  var sportByBike: Swift.Bool { get }
  var sportOnFoot: Swift.Bool { get }
  var sportSwim: Swift.Bool { get }
  var sportMountainClimbing: Swift.Bool { get }
  var sportBadminton: Swift.Bool { get }
  var sportOther: Swift.Bool { get }
  var sportFitness: Swift.Bool { get }
  var sportSpinning: Swift.Bool { get }
  var sportEllipsoid: Swift.Bool { get }
  var sportTreadmill: Swift.Bool { get }
  var sportSitUp: Swift.Bool { get }
  var sportPushUp: Swift.Bool { get }
  var sportDumbbell: Swift.Bool { get }
  var sportWeightlifting: Swift.Bool { get }
  var sportYoga: Swift.Bool { get }
  var sportRopeSkipping: Swift.Bool { get }
  var sportTableTennis: Swift.Bool { get }
  var sportBasketball: Swift.Bool { get }
  var sportFootballl: Swift.Bool { get }
  var sportVolleyball: Swift.Bool { get }
  var sportTennis: Swift.Bool { get }
  var sportGolf: Swift.Bool { get }
  var sportBaseball: Swift.Bool { get }
  var sportSkiing: Swift.Bool { get }
  var sportRollerSkating: Swift.Bool { get }
  var sportDance: Swift.Bool { get }
  var sportStrengthTraining: Swift.Bool { get }
  var sportCoreTraining: Swift.Bool { get }
  var sportTidyUpRelax: Swift.Bool { get }
  var sportTraditionalStrengthTraining: Swift.Bool { get }
  var sportOutdoorRun: Swift.Bool { get }
  var sportIndoorRun: Swift.Bool { get }
  var sportOutdoorCycle: Swift.Bool { get }
  var sportIndoorCycle: Swift.Bool { get }
  var sportOutdoorWalk: Swift.Bool { get }
  var sportIndoorWalk: Swift.Bool { get }
  var sportPoolSwim: Swift.Bool { get }
  var sportOpenWaterSwim: Swift.Bool { get }
  var sportElliptical: Swift.Bool { get }
  var sportRower: Swift.Bool { get }
  var sportHiit: Swift.Bool { get }
  var sportCricket: Swift.Bool { get }
  var sportPilates: Swift.Bool { get }
  var sportOutdoorFun: Swift.Bool { get }
  var sportOtherActivity: Swift.Bool { get }
  var sportZumba: Swift.Bool { get }
  var sportSurfing: Swift.Bool { get }
  var sportFootvolley: Swift.Bool { get }
  var sportStandWaterSkiing: Swift.Bool { get }
  var sportBattlingRope: Swift.Bool { get }
  var sportSkateboard: Swift.Bool { get }
  var sportNoticeStepper: Swift.Bool { get }
  var sportShowNum: Swift.Int { get }
  var sportAerobicsBodybuildingExercise: Swift.Bool { get }
  var sportPullUp: Swift.Bool { get }
  var sportHighBar: Swift.Bool { get }
  var sportParallelBars: Swift.Bool { get }
  var sportTrailRunning: Swift.Bool { get }
  var getRealtimeData: Swift.Bool { get }
  var getLangLibraryV3: Swift.Bool { get }
  var getFindPhone: Swift.Bool { get }
  var getFindDevice: Swift.Bool { get }
  var getUpHandGestureEx: Swift.Bool { get }
  var getUpHandGesture: Swift.Bool { get }
  var getWeather: Swift.Bool { get }
  var getDownloadLanguage: Swift.Bool { get }
  var getFactoryReset: Swift.Bool { get }
  var getFlashLog: Swift.Bool { get }
  var getMultiActivityNoUseApp: Swift.Bool { get }
  var getMultiDial: Swift.Bool { get }
  var getMenuList: Swift.Bool { get }
  var getDoNotDisturbMain3: Swift.Bool { get }
  var getVoiceTransmission: Swift.Bool { get }
  var setDrinkWaterAddNotifyFlag: Swift.Bool { get }
  var getDeviceLogState: Swift.Bool { get }
  var getNewWatchList: Swift.Bool { get }
  var getNotifyIconAdaptive: Swift.Bool { get }
  var getPressureNotifyFlagMode: Swift.Bool { get }
  var getScientificSleep: Swift.Bool { get }
  var getSpo2NotifyFlag: Swift.Bool { get }
  var getV3Log: Swift.Bool { get }
  var getWatchID: Swift.Bool { get }
  var getDeviceName: Swift.Bool { get }
  var getBatteryLog: Swift.Bool { get }
  var getBatteryInfo: Swift.Bool { get }
  var getHeatLog: Swift.Bool { get }
  var getWalkReminderV3: Swift.Bool { get }
  var getSupportV3BleMusic: Swift.Bool { get }
  var getSupportGetBleBeepV3: Swift.Bool { get }
  var getVeryFitNotSupportPhotoWallpaperV3: Swift.Bool { get }
  var getSupportUpdateGps: Swift.Bool { get }
  var getUbloxModel: Swift.Bool { get }
  var getSupportGetBleMusicInfoVerV3: Swift.Bool { get }
  var getBtVersion: Swift.Bool { get }
  var getSportsTypeV3: Swift.Bool { get }
  var getActivitySwitch: Swift.Bool { get }
  var getNoticeIconInformation: Swift.Bool { get }
  var getSetMaxItemsNum: Swift.Bool { get }
  var getNotifyMsgV3: Swift.Bool { get }
  var getScreenBrightnessMain9: Swift.Bool { get }
  var getNotice128byte: Swift.Bool { get }
  var getNotice250byte: Swift.Bool { get }
  var getDeletableMenuListV2: Swift.Bool { get }
  var getSupportPairEachConnect: Swift.Bool { get }
  var getSupportGetMainSportGoalV3: Swift.Bool { get }
  var getBtAddrV2: Swift.Bool { get }
  var getSupportBpSetOrMeasurementV2: Swift.Bool { get }
  var getMenstrualAddNotifyFlagV3: Swift.Bool { get }
  var getSupportSetGetTimeGoalTypeV2: Swift.Bool { get }
  var getOxygenDataSupportGradeV3: Swift.Bool { get }
  var getSupportSyncActivityDataAltitudeInfo: Swift.Bool { get }
  var getBindCodeAuth: Swift.Bool { get }
  var getSpo2OffChangeV3: Swift.Bool { get }
  var getLevel5HrInterval: Swift.Bool { get }
  var getBleAndBtVersion: Swift.Bool { get }
  var getSupportSetGetEmergencyContactV3: Swift.Bool { get }
  var getSupportSetRepeatWeekTypeOnScheduleReminderV3: Swift.Bool { get }
  var getSupportSetRepeatTypeOnScheduleReminderV3: Swift.Bool { get }
  var getSupportSetMenstrualReminderOnOff: Swift.Bool { get }
  var getVersionInfo: Swift.Bool { get }
  var getMtu: Swift.Bool { get }
  var getDeviceUpdateState: Swift.Bool { get }
  var getHeartRateModeV2: Swift.Bool { get }
  var getStepDataTypeV2: Swift.Bool { get }
  var getFastMsgDataV3: Swift.Bool { get }
  var getSupportCallingQuickReply: Swift.Bool { get }
  var getSupportDataTranGetNewErrorCodeV3: Swift.Bool { get }
  var getSupportSetGetNoReminderOnWalkReminderV2: Swift.Bool { get }
  var getSupportGetSnInfo: Swift.Bool { get }
  var getScheduleReminderNotDisplayTitle: Swift.Bool { get }
  var getSupportV3LongCityName: Swift.Bool { get }
  var getSupportAddNightLevelV2: Swift.Bool { get }
  var getSupportDialFrameEncodeFormatArgb6666: Swift.Bool { get }
  var getSupportAppSendPhoneSystemInfo: Swift.Bool { get }
  var getDeviceControlFastModeAlone: Swift.Bool { get }
  var getSupportOnekeyDoubleContact: Swift.Bool { get }
  var getSupportSetVoiceAssistantStatus: Swift.Bool { get }
  var getSupportFlashLogSize: Swift.Bool { get }
  var setNoticeMessageStateUseVersion0x20: Swift.Bool { get }
  var setScientificSleepSwitch: Swift.Bool { get }
  var setTemperatureSwitchHealth: Swift.Bool { get }
  var setHeartRateMonitor: Swift.Bool { get }
  var setNoReminderOnDrinkReminder: Swift.Bool { get }
  var setAgpsOffLine: Swift.Bool { get }
  var setAgpsOnLine: Swift.Bool { get }
  var setSetV3HeartInterval: Swift.Bool { get }
  var setWeatherCity: Swift.Bool { get }
  var setDoNotDisturb: Swift.Bool { get }
  var setCalorieGoal: Swift.Bool { get }
  var setMenstruation: Swift.Bool { get }
  var setPressureData: Swift.Bool { get }
  var setSpo2Data: Swift.Bool { get }
  var setSportModeSort: Swift.Bool { get }
  var setActivitySwitch: Swift.Bool { get }
  var setNightAutoBrightness: Swift.Bool { get }
  var setScreenBrightness5Level: Swift.Bool { get }
  var setWalkReminder: Swift.Bool { get }
  var setScreenBrightness3Level: Swift.Bool { get }
  var setHandWashReminder: Swift.Bool { get }
  var setLocalDial: Swift.Bool { get }
  var setNotSupportHrHighAlarm: Swift.Bool { get }
  var setNotSupportPhotoWallpaper: Swift.Bool { get }
  var setPressureHighReminder: Swift.Bool { get }
  var setWallpaperOnlyTimeColor: Swift.Bool { get }
  var setWallpaperDial: Swift.Bool { get }
  var setSupportBreathRate: Swift.Bool { get }
  var setSupportCalorieUnit: Swift.Bool { get }
  var setSupportSportPlan: Swift.Bool { get }
  var setSupportSwimPoolUnit: Swift.Bool { get }
  var setSupportV3Bp: Swift.Bool { get }
  var setV3GetSportSortField: Swift.Bool { get }
  var setWatchDialSort: Swift.Bool { get }
  var setGetCalorieDistanceGoal: Swift.Bool { get }
  var setMidHighTimeGoal: Swift.Bool { get }
  var setNewRetainData: Swift.Bool { get }
  var setScheduleReminder: Swift.Bool { get }
  var setSet100SportSort: Swift.Bool { get }
  var setSet20SportParamSort: Swift.Bool { get }
  var setSetMainUiSort: Swift.Bool { get }
  var setSetStressCalibration: Swift.Bool { get }
  var setSmartHeartRate: Swift.Bool { get }
  var setSpo2AllDayOnOff: Swift.Bool { get }
  var setSupportAppSendVoiceToBle: Swift.Bool { get }
  var setSupportCyclingUnit: Swift.Bool { get }
  var setSupportWalkRunUnit: Swift.Bool { get }
  var setWalkReminderTimeGoal: Swift.Bool { get }
  var setWatchCapacitySizeDisplay: Swift.Bool { get }
  var setWatchPhotoPositionMove: Swift.Bool { get }
  var setMenuListMain7: Swift.Bool { get }
  var setHistoryMenstrual: Swift.Bool { get }
  var setMenstrualAddPregnancy: Swift.Bool { get }
  var setNotSurportCalling3SDelay: Swift.Bool { get }
  var setSetFitnessGuidance: Swift.Bool { get }
  var setSetNotificationStatus: Swift.Bool { get }
  var setSetUnreadAppReminder: Swift.Bool { get }
  var setSetV3Weather: Swift.Bool { get }
  var setSetV3WeatherSunrise: Swift.Bool { get }
  var setSetV3WorldTime: Swift.Bool { get }
  var setSyncContact: Swift.Bool { get }
  var setSyncV3ActivityAddParam: Swift.Bool { get }
  var setTransferMusicFile: Swift.Bool { get }
  var setWalkReminderAddNotify: Swift.Bool { get }
  var setSupportFahrenheit: Swift.Bool { get }
  var setGetAlarmSpecify: Swift.Bool { get }
  var setAirohaGpsChip: Swift.Bool { get }
  var setSupportSecondSportIcon: Swift.Bool { get }
  var setSportMediumIcon: Swift.Bool { get }
  var setWeatherSunTime: Swift.Bool { get }
  var setWeatherAirGrade: Swift.Bool { get }
  var setDrinkWaterReminder: Swift.Bool { get }
  var setRespirationRate: Swift.Bool { get }
  var setMaxBloodOxygen: Swift.Bool { get }
  var setBleControlMusic: Swift.Bool { get }
  var setMainPressure: Swift.Bool { get }
  var setNoDisturbAllDayOnOff: Swift.Bool { get }
  var setOnlyNoDisturbAllDayOnOff: Swift.Bool { get }
  var setOnlyNoDisturbSmartOnOff: Swift.Bool { get }
  var setTimeZoneFloat: Swift.Bool { get }
  var setTemperatureSwitchSupport: Swift.Bool { get }
  var setMsgAllSwitch: Swift.Bool { get }
  var setNotSupperCall3Delay: Swift.Bool { get }
  var setNoticeMissedCallV2: Swift.Bool { get }
  var setOverFindPhone: Swift.Bool { get }
  var getHealthSwitchStateSupportV3: Swift.Bool { get }
  var setSedentariness: Swift.Bool { get }
  var setScreenBrightness: Swift.Bool { get }
  var setSetPhoneVoice: Swift.Bool { get }
  var languageCh: Swift.Bool { get }
  var languageCzech: Swift.Bool { get }
  var languageEnglish: Swift.Bool { get }
  var languageFrench: Swift.Bool { get }
  var languageGerman: Swift.Bool { get }
  var languageItalian: Swift.Bool { get }
  var languageJapanese: Swift.Bool { get }
  var languageSpanish: Swift.Bool { get }
  var languageArabic: Swift.Bool { get }
  var languageBurmese: Swift.Bool { get }
  var languageFilipino: Swift.Bool { get }
  var languageGreek: Swift.Bool { get }
  var languageThai: Swift.Bool { get }
  var languageTraditionalChinese: Swift.Bool { get }
  var languageVietnamese: Swift.Bool { get }
  var languageDutch: Swift.Bool { get }
  var languageHungarian: Swift.Bool { get }
  var languageLithuanian: Swift.Bool { get }
  var languagePolish: Swift.Bool { get }
  var languageRomanian: Swift.Bool { get }
  var languageRussian: Swift.Bool { get }
  var languageSlovenian: Swift.Bool { get }
  var languageUkrainian: Swift.Bool { get }
  var languageCroatian: Swift.Bool { get }
  var languageDanish: Swift.Bool { get }
  var languageHindi: Swift.Bool { get }
  var languageIndonesian: Swift.Bool { get }
  var languageKorean: Swift.Bool { get }
  var languagePortuguese: Swift.Bool { get }
  var languageSlovak: Swift.Bool { get }
  var languageTurkish: Swift.Bool { get }
  var languagePersia: Swift.Bool { get }
  var languageSweden: Swift.Bool { get }
  var languageNorwegian: Swift.Bool { get }
  var languageFinland: Swift.Bool { get }
  var syncV3Hr: Swift.Bool { get }
  var syncV3Swim: Swift.Bool { get }
  var syncV3Spo2: Swift.Bool { get }
  var syncV3Pressure: Swift.Bool { get }
  var syncV3Activity: Swift.Bool { get }
  var syncV3Sleep: Swift.Bool { get }
  var syncV3Sports: Swift.Bool { get }
  var syncV3Gps: Swift.Bool { get }
  var syncV3SyncAlarm: Swift.Bool { get }
  var syncV3BodyPower: Swift.Bool { get }
  var getSupportHrvV3: Swift.Bool { get }
  var getSupportPerBpV3: Swift.Bool { get }
  var syncV3Noise: Swift.Bool { get }
  var syncV3Temperature: Swift.Bool { get }
  var syncGps: Swift.Bool { get }
  var syncV3ActivityExchangeData: Swift.Bool { get }
  var syncHeartRate: Swift.Bool { get }
  var syncHeartRateMonitor: Swift.Bool { get }
  var syncSleepMonitor: Swift.Bool { get }
  var syncFastSync: Swift.Bool { get }
  var syncActivityTimeSync: Swift.Bool { get }
  var syncTimeLine: Swift.Bool { get }
  var syncNeedV2: Swift.Bool { get }
  var syncRealTimeV3: Swift.Bool { get }
  var syncExchangeDataReplyAddRealTimeSpeedPaceV3: Swift.Bool { get }
  var syncHealthSyncV3ActivityEndTimeUseUtcMode: Swift.Bool { get }
  var syncSupportSetFastModeWhenSyncConfig: Swift.Bool { get }
  var alarmCount: Swift.Int { get }
  var alarmBrushTeeth: Swift.Bool { get }
  var alarmDating: Swift.Bool { get }
  var alarmDinner: Swift.Bool { get }
  var alarmMedicine: Swift.Bool { get }
  var alarmMeeting: Swift.Bool { get }
  var alarmParty: Swift.Bool { get }
  var alarmRest: Swift.Bool { get }
  var alarmSleep: Swift.Bool { get }
  var alarmSport: Swift.Bool { get }
  var alarmWakeUp: Swift.Bool { get }
  var alexaReminderAddSecV3: Swift.Bool { get }
  var alexaSetEasyOperateV3: Swift.Bool { get }
  var alexaSetGetAlexaAlarmV3: Swift.Bool { get }
  var alexaSetJumpSportUiV3: Swift.Bool { get }
  var alexaSetJumpUiV3: Swift.Bool { get }
  var alexaSetSetOnOffTypeV3: Swift.Bool { get }
  var alexaSetWeatherV3: Swift.Bool { get }
  var alexaTimeNewV3: Swift.Bool { get }
  var setAlexaControll100brightness: Swift.Bool { get }
  var alexaGetSupportGetAlexaDefaultLanguage: Swift.Bool { get }
  var alexaGetUIControllSports: Swift.Bool { get }
  func printProperties() -> Swift.String?
}
public struct IDOGpsControlModel : protocol_channel.IDOBaseModel {
  public let type: Swift.Int
  public let status: Swift.Int
  public let errorCode: Swift.Int
  public init(type: Swift.Int, status: Swift.Int, errorCode: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOGpsControlParamModel : protocol_channel.IDOBaseModel {
  public let operate: Swift.Int
  public let type: Swift.Int
  public init(operate: Swift.Int, type: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOGpsInfoModel : protocol_channel.IDOBaseModel {
  public let errCode: Swift.Int
  public let fwVersion: Swift.Int
  public let agpsInfo: Swift.Int
  public let agpsErrCode: Swift.Int
  public let utcYear: Swift.Int
  public let utcMonth: Swift.Int
  public let utcDay: Swift.Int
  public let utcHour: Swift.Int
  public let utcMinute: Swift.Int
  public let startMode: Swift.Int
  public let gns: Swift.Int
  public let fixStartBit: Swift.Int
  public init(errCode: Swift.Int, fwVersion: Swift.Int, agpsInfo: Swift.Int, agpsErrCode: Swift.Int, utcYear: Swift.Int, utcMonth: Swift.Int, utcDay: Swift.Int, utcHour: Swift.Int, utcMinute: Swift.Int, startMode: Swift.Int, gns: Swift.Int, fixStartBit: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOGpsStatusModel : protocol_channel.IDOBaseModel {
  public let gpsRunStatus: Swift.Int
  public let agpsIsValid: Swift.Int
  public init(gpsRunStatus: Swift.Int, agpsIsValid: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOHabitInfoModel : protocol_channel.IDOBaseModel {
  public let browseCount: Swift.Int
  public let implementCount: Swift.Int
  public let broItems: [protocol_channel.IDOHabitBroItem]
  public let impItems: [protocol_channel.IDOHabitImpItem]
  public init(browseCount: Swift.Int, implementCount: Swift.Int, broItems: [protocol_channel.IDOHabitBroItem], impItems: [protocol_channel.IDOHabitImpItem])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOHabitBroItem : Swift.Codable {
  public let type: Swift.Int
  public let evt: Swift.Int
  public let year: Swift.Int
  public let month: Swift.Int
  public let day: Swift.Int
  public let hour: Swift.Int
  public let min: Swift.Int
  public let sec: Swift.Int
  public let count: Swift.Int
  public init(type: Swift.Int, evt: Swift.Int, year: Swift.Int, month: Swift.Int, day: Swift.Int, hour: Swift.Int, min: Swift.Int, sec: Swift.Int, count: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOHabitImpItem : Swift.Codable {
  public let type: Swift.Int
  public let evt: Swift.Int
  public let startYear: Swift.Int
  public let startMonth: Swift.Int
  public let startDay: Swift.Int
  public let startHour: Swift.Int
  public let startMin: Swift.Int
  public let startSEC: Swift.Int
  public let endYear: Swift.Int
  public let endMonth: Swift.Int
  public let endDay: Swift.Int
  public let endHour: Swift.Int
  public let endMin: Swift.Int
  public let endSEC: Swift.Int
  public let completionRate: Swift.Int
  public init(type: Swift.Int, evt: Swift.Int, startYear: Swift.Int, startMonth: Swift.Int, startDay: Swift.Int, startHour: Swift.Int, startMin: Swift.Int, startSEC: Swift.Int, endYear: Swift.Int, endMonth: Swift.Int, endDay: Swift.Int, endHour: Swift.Int, endMin: Swift.Int, endSEC: Swift.Int, completionRate: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOHandWashingReminderParamModel : protocol_channel.IDOBaseModel {
  public let onOff: Swift.Int
  public let startHour: Swift.Int
  public let startMinute: Swift.Int
  public let endHour: Swift.Int
  public let endMinute: Swift.Int
  public let repeats: Swift.Set<protocol_channel.IDOWeek>
  public let isOpenRepeat: Swift.Bool
  public let interval: Swift.Int
  public init(onOff: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, isOpenRepeat: Swift.Bool, repeats: Swift.Set<protocol_channel.IDOWeek>, interval: Swift.Int)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public func toJsonString() -> Swift.String?
}
public struct IDOHeartModeParamModel : protocol_channel.IDOBaseModel {
  public let updateTime: Swift.Int
  public let mode: Swift.Int
  public let hasTimeRange: Swift.Int
  public let startHour: Swift.Int
  public let startMinute: Swift.Int
  public let endHour: Swift.Int
  public let endMinute: Swift.Int
  public let measurementInterval: Swift.Int
  public let notifyFlag: Swift.Int
  public let highHeartMode: Swift.Int
  public let lowHeartMode: Swift.Int
  public let highHeartValue: Swift.Int
  public let lowHeartValue: Swift.Int
  public init(updateTime: Swift.Int, mode: Swift.Int, hasTimeRange: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, measurementInterval: Swift.Int, notifyFlag: Swift.Int, highHeartMode: Swift.Int, lowHeartMode: Swift.Int, highHeartValue: Swift.Int, lowHeartValue: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOHeartModeModel : protocol_channel.IDOBaseModel {
  public let updateTime: Swift.Int
  public let mode: Swift.Int
  public let hasTimeRange: Swift.Int
  public let startHour: Swift.Int
  public let startMinute: Swift.Int
  public let endHour: Swift.Int
  public let endMinute: Swift.Int
  public let measurementInterval: Swift.Int
  public let getSECMode: Swift.Int
  public let getMinMode: Swift.Int
  public let notifyFlag: Swift.Int
  public let highHeartMode: Swift.Int
  public let lowHeartMode: Swift.Int
  public let highHeartValue: Swift.Int
  public let lowHeartValue: Swift.Int
  public init(updateTime: Swift.Int, mode: Swift.Int, hasTimeRange: Swift.Int, getMinMode: Swift.Int, getSECMode: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, measurementInterval: Swift.Int, notifyFlag: Swift.Int, highHeartMode: Swift.Int, lowHeartMode: Swift.Int, highHeartValue: Swift.Int, lowHeartValue: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOHeartRateModeModel : protocol_channel.IDOBaseModel {
  public let mode: Swift.Int
  public let hasTimeRange: Swift.Int
  public let startHour: Swift.Int
  public let startMinute: Swift.Int
  public let endHour: Swift.Int
  public let endMinute: Swift.Int
  public let measurementInterval: Swift.Int
  public init(mode: Swift.Int, hasTimeRange: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, measurementInterval: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOHeartRateModeParamModel : protocol_channel.IDOBaseModel {
  public let mode: Swift.Int
  public let hasTimeRange: Swift.Int
  public let startHour: Swift.Int
  public let startMinute: Swift.Int
  public let endHour: Swift.Int
  public let endMinute: Swift.Int
  public let measurementInterval: Swift.Int
  public init(mode: Swift.Int, hasTimeRange: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, measurementInterval: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOHeartRateModeSmartParamModel : protocol_channel.IDOBaseModel {
  public let mode: Swift.Int
  public let notifyFlag: Swift.Int
  public let highHeartMode: Swift.Int
  public let lowHeartMode: Swift.Int
  public let highHeartValue: Swift.Int
  public let lowHeartValue: Swift.Int
  public let startHour: Swift.Int
  public let startMinute: Swift.Int
  public let endHour: Swift.Int
  public let endMinute: Swift.Int
  public init(mode: Swift.Int, notifyFlag: Swift.Int, highHeartMode: Swift.Int, lowHeartMode: Swift.Int, highHeartValue: Swift.Int, lowHeartValue: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOHistoricalMenstruationParamModel : protocol_channel.IDOBaseModel {
  public let avgMenstrualDay: Swift.Int
  public let avgCycleDay: Swift.Int
  public let items: [protocol_channel.IDOHistoricalMenstruationParamItem]
  public init(avgMenstrualDay: Swift.Int, avgCycleDay: Swift.Int, items: [protocol_channel.IDOHistoricalMenstruationParamItem])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOHistoricalMenstruationParamItem : Swift.Codable {
  public let year: Swift.Int
  public let mon: Swift.Int
  public let day: Swift.Int
  public let menstrualDay: Swift.Int
  public let cycleDay: Swift.Int
  public let ovulationIntervalDay: Swift.Int
  public let ovulationBeforeDay: Swift.Int
  public let ovulationAfterDay: Swift.Int
  public init(year: Swift.Int, mon: Swift.Int, day: Swift.Int, menstrualDay: Swift.Int, cycleDay: Swift.Int, ovulationIntervalDay: Swift.Int, ovulationBeforeDay: Swift.Int, ovulationAfterDay: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOHotStartParamModel : protocol_channel.IDOBaseModel {
  public let tcxoOffset: Swift.Int
  public let longitude: Swift.Int
  public let latitude: Swift.Int
  public let altitude: Swift.Int
  public init(tcxoOffset: Swift.Int, longitude: Swift.Int, latitude: Swift.Int, altitude: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOLanguageLibraryModel : protocol_channel.IDOBaseModel {
  public let useLang: Swift.Int
  public let defaultLang: Swift.Int
  public let fixedLang: Swift.Int
  public let maxStorageLang: Swift.Int
  public let items: [protocol_channel.IDOLanguageLibraryItem]
  public let itemsUser: [protocol_channel.IDOLanguageLibraryItem]
  public init(useLang: Swift.Int, defaultLang: Swift.Int, fixedLang: Swift.Int, maxStorageLang: Swift.Int, items: [protocol_channel.IDOLanguageLibraryItem], itemsUser: [protocol_channel.IDOLanguageLibraryItem])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOLanguageLibraryItem : Swift.Codable {
  public let languageType: protocol_channel.IDOLanguageType
  public let languageVersion: Swift.Int
  public init(languageType: protocol_channel.IDOLanguageType, languageVersion: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum IDOLanguageType : Swift.Int, Swift.Codable {
  case invalid
  case chinese
  case english
  case french
  case german
  case italian
  case spanish
  case japanese
  case polish
  case czech
  case romanian
  case lithuanian
  case dutch
  case slovenian
  case hungarian
  case russian
  case ukrainian
  case slovak
  case danish
  case croatian
  case indonesian
  case korean
  case hindi
  case portuguese
  case turkish
  case thai
  case vietnamese
  case burmese
  case filipino
  case traditionalChinese
  case greek
  case arabic
  case swedish
  case finnish
  case persian
  case norwegian
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct IDOLiveDataModel : protocol_channel.IDOBaseModel {
  public let totalStep: Swift.Int
  public let totalCalories: Swift.Int
  public let totalDistances: Swift.Int
  public let totalActiveTime: Swift.Int
  public let heartRate: Swift.Int
  public init(totalStep: Swift.Int, totalCalories: Swift.Int, totalDistances: Swift.Int, totalActiveTime: Swift.Int, heartRate: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOLongSitParamModel : protocol_channel.IDOBaseModel {
  public let startHour: Swift.Int
  public let startMinute: Swift.Int
  public let endHour: Swift.Int
  public let endMinute: Swift.Int
  public let interval: Swift.Int
  public let repetitions: Swift.Int
  public init(startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, interval: Swift.Int, repetitions: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOLostFindParamModel : protocol_channel.IDOBaseModel {
  public let mode: Swift.Int
  public init(mode: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOMainSportGoalModel : protocol_channel.IDOBaseModel {
  public let calorie: Swift.Int?
  public let distance: Swift.Int
  public let calorieMin: Swift.Int
  public let calorieMax: Swift.Int
  public let midHighTimeGoal: Swift.Int?
  public let walkGoalTime: Swift.Int
  public let timeGoalType: Swift.Int?
  public init(calorie: Swift.Int?, distance: Swift.Int, calorieMin: Swift.Int, calorieMax: Swift.Int, midHighTimeGoal: Swift.Int?, walkGoalTime: Swift.Int, timeGoalType: Swift.Int?)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOMainUISortParamModel : protocol_channel.IDOBaseModel {
  public let operate: Swift.Int
  public let items: [Swift.Int]
  public let locationX: Swift.Int
  public let locationY: Swift.Int
  public let sizeType: Swift.Int
  public let widgetsType: Swift.Int
  public init(operate: Swift.Int, items: [Swift.Int], locationX: Swift.Int, locationY: Swift.Int, sizeType: Swift.Int, widgetsType: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOMainUISortModel : protocol_channel.IDOBaseModel {
  public let errCode: Swift.Int
  public let operate: Swift.Int
  public let allNum: Swift.Int
  public let supportItems: [protocol_channel.IDOMainUISortSupportItem]
  public let items: [protocol_channel.IDOMainUISortItem]
  public let locationX: Swift.Int
  public let locationY: Swift.Int
  public let sizeType: Swift.Int
  public let widgetsType: Swift.Int
  public init(errCode: Swift.Int, operate: Swift.Int, allNum: Swift.Int, supportItems: [protocol_channel.IDOMainUISortSupportItem], items: [protocol_channel.IDOMainUISortItem], locationX: Swift.Int, locationY: Swift.Int, sizeType: Swift.Int, widgetsType: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOMainUISortItem : Swift.Codable {
  public let locationX: Swift.Int
  public let locationY: Swift.Int
  public let sizeType: Swift.Int
  public let widgetsType: Swift.Int
  public let supportSizeType: Swift.Int
  public init(locationX: Swift.Int, locationY: Swift.Int, sizeType: Swift.Int, widgetsType: Swift.Int, supportSizeType: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOMainUISortSupportItem : Swift.Codable {
  public let widgetsType: Swift.Int
  public let supportSizeType: Swift.Int
  public init(supportSizeType: Swift.Int, widgetsType: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOMenuListModel : protocol_channel.IDOBaseModel {
  public let currentShowNum: Swift.Int
  public let items: [protocol_channel.IDOMenuItem]
  public let maxNum: Swift.Int
  public let maxShowNum: Swift.Int
  public let minShowNum: Swift.Int
  public init(currentShowNum: Swift.Int, items: [protocol_channel.IDOMenuItem], maxNum: Swift.Int, maxShowNum: Swift.Int, minShowNum: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOMenuItem : Swift.Codable {
  public let index: Swift.Int
  public let value: Swift.Int
  public init(index: Swift.Int, value: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol IDOMessageIconInterface {
  var updating: Swift.Bool { get }
  var iconDirPath: Swift.String { get }
  func iOSConfig(countryCode: Swift.String, baseUrlPath: Swift.String, appKey: Swift.String, language: Swift.Int)
  func firstGetAppInfo(force: Swift.Bool, completion: @escaping ([protocol_channel.IDOAppIconItemModel]) -> Swift.Void)
  func getDefaultAppInfo(completion: @escaping ([protocol_channel.IDOAppIconItemModel]) -> Swift.Void)
  func getCacheAppInfo(completion: @escaping (protocol_channel.IDOAppIconInfoModel) -> Swift.Void)
  func resetIconInfoData(macAddress: Swift.String, deleteIcon: Swift.Bool, completion: @escaping (Swift.Bool) -> Swift.Void)
}
public struct IDOMtuInfoModel : protocol_channel.IDOBaseModel {
  public let status: Swift.Int
  public let rxMtu: Swift.Int
  public let txMtu: Swift.Int
  public let phySpeed: Swift.Int
  public let dleLength: Swift.Int
  public init(status: Swift.Int, rxMtu: Swift.Int, txMtu: Swift.Int, phySpeed: Swift.Int, dleLength: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOMusicControlParamModel : protocol_channel.IDOBaseModel {
  public let status: Swift.Int
  public let curTimeSecond: Swift.Int
  public let totalTimeSecond: Swift.Int
  public let musicName: Swift.String
  public let singerName: Swift.String
  public init(status: Swift.Int, curTimeSecond: Swift.Int, totalTimeSecond: Swift.Int, musicName: Swift.String, singerName: Swift.String)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOMusicOnOffParamModel : protocol_channel.IDOBaseModel {
  public let onOff: Swift.Int
  public let showInfoStatus: Swift.Int?
  public init(onOff: Swift.Int, showInfoStatus: Swift.Int?)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOMusicOpearteParamModel : protocol_channel.IDOBaseModel {
  public let musicOperate: Swift.Int
  public let folderOperate: Swift.Int
  public let folderItems: [protocol_channel.IDOMusicFolderItem]
  public let musicItems: [protocol_channel.IDOMusicItem]
  public init(musicOperate: Swift.Int, folderOperate: Swift.Int, folderItems: [protocol_channel.IDOMusicFolderItem], musicItems: [protocol_channel.IDOMusicItem])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOMusicInfoModel : protocol_channel.IDOBaseModel {
  public let allMemory: Swift.Int
  public let folderItems: [protocol_channel.IDOMusicFolderItem]
  public let musicItems: [protocol_channel.IDOMusicItem]
  public let usedMemory: Swift.Int
  public let usefulMemory: Swift.Int
  public init(allMemory: Swift.Int, folderItems: [protocol_channel.IDOMusicFolderItem], musicItems: [protocol_channel.IDOMusicItem], usedMemory: Swift.Int, usefulMemory: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOMusicFolderItem : Swift.Codable {
  public let folderID: Swift.Int
  public let musicNum: Swift.Int
  public let folderName: Swift.String
  public let musicIndex: [Swift.Int]
  public init(folderID: Swift.Int, musicNum: Swift.Int, folderName: Swift.String, musicIndex: [Swift.Int])
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOMusicItem : Swift.Codable {
  public let musicID: Swift.Int
  public let musicMemory: Swift.Int
  public let musicName: Swift.String
  public let singerName: Swift.String
  public init(musicID: Swift.Int, musicMemory: Swift.Int, musicName: Swift.String, singerName: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOMusicOperateModel : protocol_channel.IDOBaseModel {
  public let operateType: Swift.Int
  public let version: Swift.Int
  public let errCode: Swift.Int
  public let musicId: Swift.Int
  public init(operateType: Swift.Int, version: Swift.Int, errCode: Swift.Int, musicId: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDONotDisturbStatusModel : protocol_channel.IDOBaseModel {
  public let switchFlag: Swift.Int
  public let startHour: Swift.Int
  public let startMinute: Swift.Int
  public let endHour: Swift.Int
  public let endMinute: Swift.Int
  public let haveTimeRange: Swift.Int
  public let weekRepeat: Swift.Int
  public let noontimeRestOnOff: Swift.Int
  public let noontimeRestStartHour: Swift.Int
  public let noontimeRestStartMinute: Swift.Int
  public let noontimeRestEndHour: Swift.Int
  public let noontimeRestEndMinute: Swift.Int
  public let allDayOnOff: Swift.Int
  public let intelligentOnOff: Swift.Int
  public init(switchFlag: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, haveTimeRange: Swift.Int, weekRepeat: Swift.Int, noontimeRestOnOff: Swift.Int, noontimeRestStartHour: Swift.Int, noontimeRestStartMinute: Swift.Int, noontimeRestEndHour: Swift.Int, noontimeRestEndMinute: Swift.Int, allDayOnOff: Swift.Int, intelligentOnOff: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDONoticeMesaageParamModel : protocol_channel.IDOBaseModel {
  public let verison: Swift.Int
  public let osPlatform: Swift.Int
  public let evtType: Swift.Int
  public let notifyType: Swift.Int
  public let msgID: Swift.Int
  public let appItemsLen: Swift.Int
  public let contact: Swift.String
  public let phoneNumber: Swift.String
  public let msgData: Swift.String
  public let items: [protocol_channel.IDONoticeMesaageParamItem]
  public init(verison: Swift.Int, osPlatform: Swift.Int, evtType: Swift.Int, notifyType: Swift.Int, msgID: Swift.Int, appItemsLen: Swift.Int, contact: Swift.String, phoneNumber: Swift.String, msgData: Swift.String, items: [protocol_channel.IDONoticeMesaageParamItem])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDONoticeMesaageParamItem : Swift.Codable {
  public let language: Swift.Int
  public let name: Swift.String
  public init(language: Swift.Int, name: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDONoticeMessageParamModel : protocol_channel.IDOBaseModel {
  public let verison: Swift.Int
  public let evtType: Swift.Int
  public let msgID: Swift.Int
  public let supportAnswering: Swift.Bool
  public let supportMute: Swift.Bool
  public let supportHangUp: Swift.Bool
  public let msgData: Swift.String
  public let contact: Swift.String
  public let phoneNumber: Swift.String
  public let dataText: Swift.String
  public init(verison: Swift.Int, evtType: Swift.Int, msgID: Swift.Int, supportAnswering: Swift.Bool, supportMute: Swift.Bool, supportHangUp: Swift.Bool, msgData: Swift.String, contact: Swift.String, phoneNumber: Swift.String, dataText: Swift.String)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDONoticeMessageStateModel : protocol_channel.IDOBaseModel {
  public let errCode: Swift.Int
  public let operat: Swift.Int
  public let allOnOff: Swift.Int
  public let items: [protocol_channel.IDONoticeMessageStateItem]
  public init(errCode: Swift.Int, operat: Swift.Int, allOnOff: Swift.Int, items: [protocol_channel.IDONoticeMessageStateItem])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDONoticeMessageStateParamModel : protocol_channel.IDOBaseModel {
  public let version: Swift.Int
  public let itemsNum: Swift.Int
  public let operat: Swift.Int
  public let allOnOff: Swift.Int
  public let allSendNum: Swift.Int
  public let nowSendIndex: Swift.Int
  public let items: [protocol_channel.IDONoticeMessageStateItem]
  public init(version: Swift.Int, itemsNum: Swift.Int, operat: Swift.Int, allOnOff: Swift.Int, allSendNum: Swift.Int, nowSendIndex: Swift.Int, items: [protocol_channel.IDONoticeMessageStateItem])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDONoticeMessageStateItem : Swift.Codable {
  public let evtType: Swift.Int
  public let notifyState: Swift.Int
  public let picFlag: Swift.Int
  public init(evtType: Swift.Int, notifyState: Swift.Int, picFlag: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOSetNoticeStatusModel : protocol_channel.IDOBaseModel {
  public var notifySwitch: protocol_channel.IDONoticeNotifySwitchState
  public var callSwitch: protocol_channel.IDONoticeCallSwitchState
  public var msgAllSwitch: protocol_channel.IDONoticeMsgAllSwitchState
  public var callDelay: Swift.Int
  public var isOnSms: Swift.Bool
  public var isOnEmail: Swift.Bool
  public var isOnWeChat: Swift.Bool
  public var isOnQq: Swift.Bool
  public var isOnWeibo: Swift.Bool
  public var isOnFaceBook: Swift.Bool
  public var isOnTwitter: Swift.Bool
  public var isOnWhatsapp: Swift.Bool
  public var isOnMessenger: Swift.Bool
  public var isOnInstagram: Swift.Bool
  public var isOnLinkedIn: Swift.Bool
  public var isOnCalendar: Swift.Bool
  public var isOnSkype: Swift.Bool
  public var isOnAlarm: Swift.Bool
  public var isOnPokeman: Swift.Bool
  public var isOnVkontakte: Swift.Bool
  public var isOnLine: Swift.Bool
  public var isOnViber: Swift.Bool
  public var isOnKakaoTalk: Swift.Bool
  public var isOnGmail: Swift.Bool
  public var isOnOutlook: Swift.Bool
  public var isOnSnapchat: Swift.Bool
  public var isOnTelegram: Swift.Bool
  public var isOnChatwork: Swift.Bool
  public var isOnSlack: Swift.Bool
  public var isOnYahooMail: Swift.Bool
  public var isOnTumblr: Swift.Bool
  public var isOnYoutube: Swift.Bool
  public var isOnYahooPinterest: Swift.Bool
  public var isOnKeep: Swift.Bool
  public var isOnTikTok: Swift.Bool
  public var isOnRedbus: Swift.Bool
  public var isOnDailyhunt: Swift.Bool
  public var isOnHotstar: Swift.Bool
  public var isOnInshorts: Swift.Bool
  public var isOnPaytm: Swift.Bool
  public var isOnAmazon: Swift.Bool
  public var isOnFlipkart: Swift.Bool
  public var isOnPrime: Swift.Bool
  public var isOnNetflix: Swift.Bool
  public var isOnGpay: Swift.Bool
  public var isOnPhonpe: Swift.Bool
  public var isOnSwiggy: Swift.Bool
  public var isOnZomato: Swift.Bool
  public var isOnMakeMyTrip: Swift.Bool
  public var isOnJioTv: Swift.Bool
  public var isOnMicrosoft: Swift.Bool
  public var isOnWhatsAppBusiness: Swift.Bool
  public var isOnNioseFit: Swift.Bool
  public var isOnDidNotCall: Swift.Bool
  public var isOnMattersRemind: Swift.Bool
  public var isOnUber: Swift.Bool
  public var isOnOla: Swift.Bool
  public var isOnYtMusic: Swift.Bool
  public var isOnGoogleMeet: Swift.Bool
  public var isOnMormaiiSmartwatch: Swift.Bool
  public var isOnTechnosConnect: Swift.Bool
  public var isOnEnioei: Swift.Bool
  public var isOnAliexpress: Swift.Bool
  public var isOnShopee: Swift.Bool
  public var isOnTeams: Swift.Bool
  public var isOn99Taxi: Swift.Bool
  public var isOnUberEats: Swift.Bool
  public var isOnLfood: Swift.Bool
  public var isOnRappi: Swift.Bool
  public var isOnMercadoLivre: Swift.Bool
  public var isOnMagalu: Swift.Bool
  public var isOnAmericanas: Swift.Bool
  public var isOnYahoo: Swift.Bool
  public var isOnInstantemail: Swift.Bool
  public var isOnNhnemail: Swift.Bool
  public var isOnZohoemail: Swift.Bool
  public var isOnExchangeemail: Swift.Bool
  public var isOn189email: Swift.Bool
  public var isOnGoogleGmail: Swift.Bool
  public var isOnVeryfit: Swift.Bool
  public var isOnGeneral: Swift.Bool
  public var isOnAlibabaemail: Swift.Bool
  public static func createDefaultModel() -> protocol_channel.IDOSetNoticeStatusModel
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public func toJsonString() -> Swift.String?
}
public enum IDONoticeNotifySwitchState : Swift.Int {
  case invalid
  case bleOff
  case bleOn
  case settingSubSwitch
  case btOnlySwitch
  case bleAndBtOn
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum IDONoticeCallSwitchState : Swift.Int {
  case invalid
  case off
  case on
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum IDONoticeMsgAllSwitchState : Swift.Int {
  case invalid
  case off
  case on
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct IDONotificationCenterModel : protocol_channel.IDOBaseModel {
  public let notifySwitch: Swift.Int
  public let statusCode: Swift.Int
  public let errCode: Swift.Int
  public init(notifySwitch: Swift.Int, statusCode: Swift.Int, errCode: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDONotificationStatusParamModel : protocol_channel.IDOBaseModel {
  public let notifyFlag: Swift.Int
  public init(notifyFlag: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDORunPlanParamModel : protocol_channel.IDOBaseModel {
  public let verison: Swift.Int
  public let operate: Swift.Int
  public let type: Swift.Int
  public let year: Swift.Int
  public let month: Swift.Int
  public let day: Swift.Int
  public let hour: Swift.Int
  public let min: Swift.Int
  public let sec: Swift.Int
  public let dayNum: Swift.Int
  public let items: [protocol_channel.IDOGpsInfoModelItem]
  public init(verison: Swift.Int, operate: Swift.Int, type: Swift.Int, year: Swift.Int, month: Swift.Int, day: Swift.Int, hour: Swift.Int, min: Swift.Int, sec: Swift.Int, dayNum: Swift.Int, items: [protocol_channel.IDOGpsInfoModelItem])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOGpsInfoModelItem : Swift.Codable {
  public let type: Swift.Int
  public let num: Swift.Int
  public let item: [protocol_channel.IDOItemItem]
  public init(type: Swift.Int, num: Swift.Int, item: [protocol_channel.IDOItemItem])
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOItemItem : Swift.Codable {
  public let type: Swift.Int
  public let time: Swift.Int
  public let heightHeart: Swift.Int
  public let lowHeart: Swift.Int
  public init(type: Swift.Int, time: Swift.Int, heightHeart: Swift.Int, lowHeart: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOSchedulerReminderParamModel : protocol_channel.IDOBaseModel {
  public let operate: Swift.Int
  public let items: [protocol_channel.IDOSchedulerReminderItem]
  public init(operate: Swift.Int, items: [protocol_channel.IDOSchedulerReminderItem])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOSchedulerReminderModel : protocol_channel.IDOBaseModel {
  public let operate: Swift.Int
  public let errCode: Swift.Int
  public let items: [protocol_channel.IDOSchedulerReminderItem]
  public init(operate: Swift.Int, errCode: Swift.Int, items: [protocol_channel.IDOSchedulerReminderItem])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOSchedulerReminderItem : Swift.Codable {
  public let id: Swift.Int
  public let year: Swift.Int
  public let mon: Swift.Int
  public let day: Swift.Int
  public let hour: Swift.Int
  public let min: Swift.Int
  public let sec: Swift.Int
  public let repeatType: Swift.Int
  public let remindOnOff: Swift.Int
  public let state: Swift.Int
  public let title: Swift.String
  public let note: Swift.String
  public init(id: Swift.Int, year: Swift.Int, mon: Swift.Int, day: Swift.Int, hour: Swift.Int, min: Swift.Int, sec: Swift.Int, repeatType: Swift.Int, remindOnOff: Swift.Int, state: Swift.Int, title: Swift.String, note: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOScientificSleepSwitchParamModel : protocol_channel.IDOBaseModel {
  public let mode: Swift.Int
  public let startHour: Swift.Int
  public let startMinute: Swift.Int
  public let endHour: Swift.Int
  public let endMinute: Swift.Int
  public init(mode: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOScreenBrightnessModel : protocol_channel.IDOBaseModel {
  public let level: Swift.Int
  public let opera: Swift.Int
  public let mode: Swift.Int
  public let autoAdjustNight: Swift.Int
  public let startHour: Swift.Int
  public let startMinute: Swift.Int
  public let endHour: Swift.Int
  public let endMinute: Swift.Int
  public let nightLevel: Swift.Int
  public let showInterval: Swift.Int
  public init(level: Swift.Int, opera: Swift.Int, mode: Swift.Int, autoAdjustNight: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, nightLevel: Swift.Int, showInterval: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol IDOSdkInterface {
  var device: protocol_channel.IDODeviceInterface { get }
  var funcTable: protocol_channel.IDOFuncTableInterface { get }
  var cmd: protocol_channel.IDOCmdInterface { get }
  var bridge: protocol_channel.IDOBridgeInterface { get }
  var ble: protocol_channel.IDOBleInterface { get }
  var alexa: protocol_channel.IDOAlexaInterface { get }
  var transfer: protocol_channel.IDOFileTransferInterface { get }
  var messageIcon: protocol_channel.IDOMessageIconInterface { get }
  var syncData: protocol_channel.IDOSyncDataInterface { get }
  var dataExchange: protocol_channel.IDODataExchangeInterface { get }
  var deviceLog: protocol_channel.IDODeviceLogInterface { get }
  var tool: protocol_channel.IDOToolsInterface { get }
}
public protocol IDOCancellable {
  var isCancelled: Swift.Bool { get }
  func cancel()
}
public struct IDOSendRunPlanModel : protocol_channel.IDOBaseModel {
  public let errCode: Swift.Int
  public let version: Swift.Int
  public let operate: Swift.Int
  public let type: Swift.Int
  public let year: Swift.Int
  public let month: Swift.Int
  public let day: Swift.Int
  public let hour: Swift.Int
  public let min: Swift.Int
  public let sec: Swift.Int
  public init(errCode: Swift.Int, version: Swift.Int, operate: Swift.Int, type: Swift.Int, year: Swift.Int, month: Swift.Int, day: Swift.Int, hour: Swift.Int, min: Swift.Int, sec: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOShortcutParamModel : protocol_channel.IDOBaseModel {
  public let mode: Swift.Int
  public init(mode: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOSleepPeriodParamModel : protocol_channel.IDOBaseModel {
  public let onOff: Swift.Int
  public let startHour: Swift.Int
  public let startMinute: Swift.Int
  public let endHour: Swift.Int
  public let endMinute: Swift.Int
  public init(onOff: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOSpo2SwitchParamModel : protocol_channel.IDOBaseModel {
  public let onOff: Swift.Int
  public let startHour: Swift.Int
  public let startMinute: Swift.Int
  public let endHour: Swift.Int
  public let endMinute: Swift.Int
  public let lowSpo2OnOff: Swift.Int?
  public let lowSpo2Value: Swift.Int?
  public let notifyFlag: Swift.Int?
  public init(onOff: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, lowSpo2OnOff: Swift.Int?, lowSpo2Value: Swift.Int?, notifyFlag: Swift.Int?)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOSportGoalParamModel : protocol_channel.IDOBaseModel {
  public let sportStep: Swift.Int
  public let walkGoalSteps: Swift.Int
  public let targetType: Swift.Int?
  public init(sportStep: Swift.Int, walkGoalSteps: Swift.Int, targetType: Swift.Int?)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOSportModeSelectParamModel : protocol_channel.IDOBaseModel {
  public let flag: Swift.Int
  public let sportType1: Swift.Int
  public let sportType2: Swift.Int
  public let sportType3: Swift.Int
  public let sportType4: Swift.Int
  public let sportType0Walk: Swift.Bool
  public let sportType0Run: Swift.Bool
  public let sportType0ByBike: Swift.Bool
  public let sportType0OnFoot: Swift.Bool
  public let sportType0Swim: Swift.Bool
  public let sportType0MountainClimbing: Swift.Bool
  public let sportType0Badminton: Swift.Bool
  public let sportType0Other: Swift.Bool
  public let sportType1Fitness: Swift.Bool
  public let sportType1Spinning: Swift.Bool
  public let sportType1Ellipsoid: Swift.Bool
  public let sportType1Treadmill: Swift.Bool
  public let sportType1SitUp: Swift.Bool
  public let sportType1PushUp: Swift.Bool
  public let sportType1Dumbbell: Swift.Bool
  public let sportType1Weightlifting: Swift.Bool
  public let sportType2BodybuildingExercise: Swift.Bool
  public let sportType2Yoga: Swift.Bool
  public let sportType2RopeSkipping: Swift.Bool
  public let sportType2TableTennis: Swift.Bool
  public let sportType2Basketball: Swift.Bool
  public let sportType2Football: Swift.Bool
  public let sportType2Volleyball: Swift.Bool
  public let sportType2Tennis: Swift.Bool
  public let sportType3Golf: Swift.Bool
  public let sportType3Baseball: Swift.Bool
  public let sportType3Skiing: Swift.Bool
  public let sportType3RollerSkating: Swift.Bool
  public let sportType3Dance: Swift.Bool
  public let sportType3StrengthTraining: Swift.Bool
  public let sportType3CoreTraining: Swift.Bool
  public let sportType3TidyUpRelax: Swift.Bool
  public init(flag: Swift.Int, sportType1: Swift.Int, sportType2: Swift.Int, sportType3: Swift.Int, sportType4: Swift.Int, sportType0Walk: Swift.Bool, sportType0Run: Swift.Bool, sportType0ByBike: Swift.Bool, sportType0OnFoot: Swift.Bool, sportType0Swim: Swift.Bool, sportType0MountainClimbing: Swift.Bool, sportType0Badminton: Swift.Bool, sportType0Other: Swift.Bool, sportType1Fitness: Swift.Bool, sportType1Spinning: Swift.Bool, sportType1Ellipsoid: Swift.Bool, sportType1Treadmill: Swift.Bool, sportType1SitUp: Swift.Bool, sportType1PushUp: Swift.Bool, sportType1Dumbbell: Swift.Bool, sportType1Weightlifting: Swift.Bool, sportType2BodybuildingExercise: Swift.Bool, sportType2Yoga: Swift.Bool, sportType2RopeSkipping: Swift.Bool, sportType2TableTennis: Swift.Bool, sportType2Basketball: Swift.Bool, sportType2Football: Swift.Bool, sportType2Volleyball: Swift.Bool, sportType2Tennis: Swift.Bool, sportType3Golf: Swift.Bool, sportType3Baseball: Swift.Bool, sportType3Skiing: Swift.Bool, sportType3RollerSkating: Swift.Bool, sportType3Dance: Swift.Bool, sportType3StrengthTraining: Swift.Bool, sportType3CoreTraining: Swift.Bool, sportType3TidyUpRelax: Swift.Bool)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOSportModeSortParamModel : protocol_channel.IDOBaseModel {
  public let index: Swift.Int
  public let type: protocol_channel.IDOSportType
  public init(index: Swift.Int, type: protocol_channel.IDOSportType)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOSportSortParamModel : protocol_channel.IDOBaseModel {
  public let operate: Swift.Int
  public let sportType: protocol_channel.IDOSportType
  public let nowUserLocation: Swift.Int
  public let items: [Swift.Int]
  public init(operate: Swift.Int, sportType: protocol_channel.IDOSportType, nowUserLocation: Swift.Int, items: [Swift.Int])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOSport100SortParamModel : protocol_channel.IDOBaseModel {
  public let operate: Swift.Int
  public let nowUserLocation: Swift.Int
  public let items: [Swift.Int]
  public init(operate: Swift.Int, nowUserLocation: Swift.Int, items: [Swift.Int])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOSport100SortModel : protocol_channel.IDOBaseModel {
  public let errCode: Swift.Int
  public let operate: Swift.Int
  public let minShowNum: Swift.Int
  public let maxShowNum: Swift.Int
  public let nowUserLocation: Swift.Int
  public let items: [protocol_channel.IDOSport100SortItem]
  public init(errCode: Swift.Int, operate: Swift.Int, minShowNum: Swift.Int, maxShowNum: Swift.Int, nowUserLocation: Swift.Int, items: [protocol_channel.IDOSport100SortItem])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOSport100SortItem : Swift.Codable {
  public let type: protocol_channel.IDOSportType
  public let flag: Swift.Int
  public init(type: protocol_channel.IDOSportType, flag: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOSportSortModel : protocol_channel.IDOBaseModel {
  public let errCode: Swift.Int
  public let operate: Swift.Int
  public let sportType: protocol_channel.IDOSportType
  public let nowUserLocation: Swift.Int
  public let items: [Swift.Int]
  public init(operate: Swift.Int, errCode: Swift.Int, sportType: protocol_channel.IDOSportType, nowUserLocation: Swift.Int, items: [Swift.Int])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum IDOSportType : Swift.Int, Swift.Codable {
  case sportTypeNull
  case sportTypeWalk
  case sportTypeRun
  case sportTypeCycling
  case sportTypeOnFoot
  case sportTypeSwim
  case sportTypeClimb
  case sportTypeBadminton
  case sportTypeOther
  case sportTypeFitness
  case sportTypeDynamic
  case sportTypeEllipsoid
  case sportTypeTreadmill
  case sportTypeSitUp
  case sportTypePushUp
  case sportTypeDumbbells
  case sportTypeLifting
  case sportTypeAerobics
  case sportTypeYoga
  case sportTypeRope
  case sportTypePingPong
  case sportTypeBasketball
  case sportTypeSoccer
  case sportTypeVolleyball
  case sportTypeTennisBall
  case sportTypeGolf
  case sportTypeBaseball
  case sportTypeSki
  case sportTypeRoller
  case sportTypeDancing
  case sportTypeRollerMachine
  case sportTypePilates
  case sportTypeCrossTrain
  case sportTypeCardio
  case sportTypeZumba
  case sportTypeSquareDance
  case sportTypePlank
  case sportTypeGym
  case sportTypeOxAerobics
  case sportTypeOutdoorRun
  case sportTypeIndoorRun
  case sportTypeOutdoorCycle
  case sportTypeIndoorCycle
  case sportTypeOutdoorWalk
  case sportTypeIndoorWalk
  case sportTypePoolSwim
  case sportTypeWaterSwim
  case sportTypeElliptical
  case sportTypeRower
  case sportTypeHit
  case sportTypeFreeTraining
  case sportTypeFunctionalStrengthTraining
  case sportTypeCoreTraining
  case sportTypeStepper
  case sportTypeOrganizeAndRelax
  case sportTypeTraditionalStrengthTraining
  case sportTypePullUp
  case sportTypeOpeningAndClosingJump
  case sportTypeSquat
  case sportTypeHighLegLift
  case sportTypeBoxing
  case sportTypeBarbell
  case sportTypeMartial
  case sportTypeTaiJi
  case sportTypeKarate
  case sportTypeTaekwondo
  case sportTypeFreeFight
  case sportTypeFencing
  case sportTypeArchery
  case sportTypeArtisticGymnastics
  case sportTypeHorizontalBar
  case sportTypeParallelBars
  case sportTypeWalkingMachine
  case sportTypeMountaineeringMachine
  case sportTypeBowling
  case sportTypeBilliards
  case sportTypeHockey
  case sportTypeRugby
  case sportTypeSquash
  case sportTypeSoftball
  case sportTypeHandball
  case sportTypeShuttlecock
  case sportTypeBeachSoccer
  case sportTypeSepaktakraw
  case sportTypeDodgeball
  case sportTypeHiphop
  case sportTypeBallet
  case sportTypeSocialDance
  case sportTypeFrisbee
  case sportTypeDarts
  case sportTypeRiding
  case sportTypeClimbbuilding
  case sportTypeflykite
  case sportTypeGofishing
  case sportTypeSled
  case sportTypeSnowmobile
  case sportTypeSnowboarding
  case sportTypeSnowSports
  case sportTypeAlpineskiing
  case sportTypeCrosscountryskiing
  case sportTypeCurling
  case sportTypeIcehockey
  case sportTypeWinterbiathlon
  case sportTypeSurfing
  case sportTypeSailboat
  case sportTypeSailboard
  case sportTypeKayak
  case sportTypeMotorboat
  case sportTypeRowboat
  case sportTypeRowing
  case sportTypeDragonBoat
  case sportTypeWaterPolo
  case sportTypeDrift
  case sportTypeSkate
  case sportTypeRockClimbing
  case sportTypeBungeejumping
  case sportTypeParkour
  case sportTypeBMX
  case sportTypeFootVolley
  case sportTypeStandingStroke
  case sportTypeCrunch
  case sportTypeBurpee
  case sportTypeTrampoline
  case sportTypeMotorcycle
  case sportTypeKabaddi
  case sportTypeBattleRope
  case sportTypeParachuting
  case sportTypeOrienteering
  case sportTypeMountainBiking
  case sportTypeCricket
  case sportTypeOutdoorFun
  case sportTypeOtherActivity
  case sportTypeCrossRunning
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct IDOStepGoalModel : protocol_channel.IDOBaseModel {
  public let step: Swift.Int
  public let stepWeek: Swift.Int
  public init(step: Swift.Int, stepWeek: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOStressCalibrationModel : protocol_channel.IDOBaseModel {
  public let retCode: Swift.Int
  public init(retCode: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOStressCalibrationParamModel : protocol_channel.IDOBaseModel {
  public let stressScore: Swift.Int
  public let status: Swift.Int
  public init(stressScore: Swift.Int, status: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOStressValModel : protocol_channel.IDOBaseModel {
  public let stressVal: Swift.Int
  public let threshold: Swift.Int
  public init(stressVal: Swift.Int, threshold: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOSupportMaxSetItemsNumModel : protocol_channel.IDOBaseModel {
  public let contactMaxSetNum: Swift.Int
  public let reminderMaxSetNum: Swift.Int
  public let msgMaxBuffSize: Swift.Int
  public init(contactMaxSetNum: Swift.Int, reminderMaxSetNum: Swift.Int, msgMaxBuffSize: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOSyncContactParamModel : protocol_channel.IDOBaseModel {
  public let operat: Swift.Int
  public let items: [protocol_channel.IDOContactItem]
  public init(operat: Swift.Int, items: [protocol_channel.IDOContactItem])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOSyncContactModel : protocol_channel.IDOBaseModel {
  public let errCode: Swift.Int
  public let operat: Swift.Int?
  public let items: [protocol_channel.IDOContactItem]?
  public init(errCode: Swift.Int, operat: Swift.Int?, items: [protocol_channel.IDOContactItem]?)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOContactItem : Swift.Codable {
  public let phone: Swift.String
  public let name: Swift.String
  public init(phone: Swift.String, name: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol IDOSyncDataInterface {
  var syncStatus: protocol_channel.IDOSyncStatus { get }
  func startSync(funcProgress: @escaping protocol_channel.BlockDataSyncProgress, funcData: @escaping protocol_channel.BlockDataSyncData, funcCompleted: @escaping protocol_channel.BlockDataSyncCompleted)
  func stopSync()
}
public struct IDOTakingMedicineReminderParamModel : protocol_channel.IDOBaseModel {
  public let takingMedicineId: Swift.Int
  public let onOff: Swift.Int
  public let startHour: Swift.Int
  public let startMinute: Swift.Int
  public let endHour: Swift.Int
  public let endMinute: Swift.Int
  public let repeats: Swift.Set<protocol_channel.IDOWeek>
  public let isOpenRepeat: Swift.Bool
  public let interval: Swift.Int
  public let doNotDisturbOnOff: Swift.Int
  public let doNotDisturbStartHour: Swift.Int
  public let doNotDisturbStartMinute: Swift.Int
  public let doNotDisturbEndHour: Swift.Int
  public let doNotDisturbEndMinute: Swift.Int
  public init(takingMedicineId: Swift.Int, onOff: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, isOpenRepeat: Swift.Bool, repeats: Swift.Set<protocol_channel.IDOWeek>, interval: Swift.Int, doNotDisturbOnOff: Swift.Int, doNotDisturbStartHour: Swift.Int, doNotDisturbStartMinute: Swift.Int, doNotDisturbEndHour: Swift.Int, doNotDisturbEndMinute: Swift.Int)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public func toJsonString() -> Swift.String?
}
public struct IDOTemperatureSwitchParamModel : protocol_channel.IDOBaseModel {
  public let mode: Swift.Int
  public let startHour: Swift.Int
  public let startMinute: Swift.Int
  public let endHour: Swift.Int
  public let endMinute: Swift.Int
  public let unit: Swift.Int
  public init(mode: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, unit: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol IDOToolsInterface {
  func png2Bmp(inPath: Swift.String, outPath: Swift.String, format: Swift.Int, completion: @escaping (Swift.Bool) -> Swift.Void)
  func compressToPNG(inputFilePath: Swift.String, outputFilePath: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
  func makeEpoFile(dirPath: Swift.String, epoFilePath: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
  func gpsInitType(motionTypeIn: Swift.Int, completion: @escaping (Swift.Bool) -> Swift.Void)
  func gpsAlgProcessRealtime(json: Swift.String, completion: @escaping (Swift.String) -> Swift.Void)
  func gpsSmoothData(json: Swift.String, completion: @escaping (Swift.String) -> Swift.Void)
  func logPath(completion: @escaping (Swift.String) -> Swift.Void)
  func currentDevicePath(completion: @escaping (Swift.String) -> Swift.Void)
  func exportLog(completion: @escaping (Swift.String) -> Swift.Void)
  func lastConnectDevice(completion: @escaping (Swift.String?) -> Swift.Void)
  func loadDeviceExtListByDisk(sortDesc: Swift.Bool, completion: @escaping ([Swift.String]) -> Swift.Void)
}
public struct IDOUnerasableMeunListModel : protocol_channel.IDOBaseModel {
  public let itemList: [Swift.Int]
  public init(itemList: [Swift.Int])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOUnitParamModel : protocol_channel.IDOBaseModel {
  public let distUnit: Swift.Int
  public let weightUnit: Swift.Int
  public let temp: Swift.Int
  public let stride: Swift.Int
  public let language: Swift.Int
  public let is12HourFormat: Swift.Int
  public let strideRun: Swift.Int
  public let strideGpsCal: Swift.Int
  public let weekStartDate: Swift.Int
  public let calorieUnit: Swift.Int
  public let swimPoolUnit: Swift.Int
  public let cyclingUnit: Swift.Int
  public let walkingRunningUnit: Swift.Int?
  public init(distUnit: Swift.Int, weightUnit: Swift.Int, temp: Swift.Int, stride: Swift.Int, language: Swift.Int, is12HourFormat: Swift.Int, strideRun: Swift.Int, strideGpsCal: Swift.Int, weekStartDate: Swift.Int, calorieUnit: Swift.Int, swimPoolUnit: Swift.Int, cyclingUnit: Swift.Int, walkingRunningUnit: Swift.Int?)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOUpdateStatusModel : protocol_channel.IDOBaseModel {
  public let devVesion: Swift.Int
  public let state: Swift.Int
  public init(devVesion: Swift.Int, state: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOUpHandGestureModel : protocol_channel.IDOBaseModel {
  public let endHour: Swift.Int
  public let endMinute: Swift.Int
  public let hasTimeRange: Swift.Int
  public let onOff: Swift.Int
  public let showSecond: Swift.Int
  public let startHour: Swift.Int
  public let startMinute: Swift.Int
  public init(endHour: Swift.Int, endMinute: Swift.Int, hasTimeRange: Swift.Int, onOff: Swift.Int, showSecond: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOUpHandGestureParamModel : protocol_channel.IDOBaseModel {
  public let onOff: Swift.Int
  public let showSecond: Swift.Int
  public let hasTimeRange: Swift.Int
  public let startHour: Swift.Int
  public let startMinute: Swift.Int
  public let endHour: Swift.Int
  public let endMinute: Swift.Int
  public init(onOff: Swift.Int, showSecond: Swift.Int, hasTimeRange: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOV3NoiseParamModel : protocol_channel.IDOBaseModel {
  public let mode: Swift.Int
  public let startHour: Swift.Int
  public let startMinute: Swift.Int
  public let endHour: Swift.Int
  public let endMinute: Swift.Int
  public let highNoiseOnOff: Swift.Int
  public let highNoiseValue: Swift.Int
  public init(mode: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, highNoiseOnOff: Swift.Int, highNoiseValue: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOVersionInfoModel : protocol_channel.IDOBaseModel {
  public let sdkVersion: Swift.Int
  public let hrAlgorithmVersion: Swift.Int
  public let sleepAlgorithmVersion: Swift.Int
  public let stepAlgorithmVersion: Swift.Int
  public let gestureRecognitionVersion: Swift.Int
  public let pcbVersion: Swift.Int
  public let spo2Version: Swift.Int
  public let wearVersion: Swift.Int
  public let stressVersion: Swift.Int
  public let kcalVersion: Swift.Int
  public let disVersion: Swift.Int
  public let axle3SwimVersion: Swift.Int
  public let axle6SwimVersion: Swift.Int
  public let actModeTypeVersion: Swift.Int
  public let allDayHrVersion: Swift.Int
  public let gpsVersion: Swift.Int
  public let peripheralsVersion: Swift.Int
  public init(sdkVersion: Swift.Int, hrAlgorithmVersion: Swift.Int, sleepAlgorithmVersion: Swift.Int, stepAlgorithmVersion: Swift.Int, gestureRecognitionVersion: Swift.Int, pcbVersion: Swift.Int, spo2Version: Swift.Int, wearVersion: Swift.Int, stressVersion: Swift.Int, kcalVersion: Swift.Int, disVersion: Swift.Int, axle3SwimVersion: Swift.Int, axle6SwimVersion: Swift.Int, actModeTypeVersion: Swift.Int, allDayHrVersion: Swift.Int, gpsVersion: Swift.Int, peripheralsVersion: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOVoiceReplyParamModel : protocol_channel.IDOBaseModel {
  public let flagIsContinue: Swift.Int
  public let title: Swift.String
  public let textContent: Swift.String
  public init(flagIsContinue: Swift.Int, title: Swift.String, textContent: Swift.String)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOWalkRemindModel : protocol_channel.IDOBaseModel {
  public let onOff: Swift.Int
  public let goalStep: Swift.Int
  public let startHour: Swift.Int
  public let startMinute: Swift.Int
  public let endHour: Swift.Int
  public let endMinute: Swift.Int
  public let repeats: Swift.Set<protocol_channel.IDOWeek>
  public let isOpenRepeat: Swift.Bool
  public let goalTime: Swift.Int
  public let notifyFlag: Swift.Int?
  public let doNotDisturbOnOff: Swift.Int?
  public let noDisturbStartHour: Swift.Int?
  public let noDisturbStartMinute: Swift.Int?
  public let noDisturbEndHour: Swift.Int?
  public let noDisturbEndMinute: Swift.Int?
  public init(onOff: Swift.Int, goalStep: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, isOpenRepeat: Swift.Bool, repeats: Swift.Set<protocol_channel.IDOWeek>, goalTime: Swift.Int, notifyFlag: Swift.Int?, doNotDisturbOnOff: Swift.Int?, noDisturbStartHour: Swift.Int?, noDisturbStartMinute: Swift.Int?, noDisturbEndHour: Swift.Int?, noDisturbEndMinute: Swift.Int?)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public func toJsonString() -> Swift.String?
}
public struct IDOWalkRemindTimesParamModel : protocol_channel.IDOBaseModel {
  public let onOff: Swift.Int
  public let items: [protocol_channel.IDOWalkRemindTimesItem]
  public init(onOff: Swift.Int, items: [protocol_channel.IDOWalkRemindTimesItem])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOWalkRemindTimesItem : Swift.Codable {
  public let hour: Swift.Int
  public let min: Swift.Int
  public init(hour: Swift.Int, min: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOWallpaperDialReplyV3Model : protocol_channel.IDOBaseModel {
  public let errCode: Swift.Int
  public let operate: Swift.Int
  public let location: Swift.Int
  public let hideType: Swift.Int
  public let timeColor: Swift.Int
  public let widgetType: Swift.Int
  public let widgetIconColor: Swift.Int
  public let widgetNumColor: Swift.Int
  public init(errCode: Swift.Int, operate: Swift.Int, location: Swift.Int, hideType: Swift.Int, timeColor: Swift.Int, widgetType: Swift.Int, widgetIconColor: Swift.Int, widgetNumColor: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOWallpaperDialReplyV3ParamModel : protocol_channel.IDOBaseModel {
  public let operate: Swift.Int
  public let location: Swift.Int
  public let hideType: Swift.Int
  public let timeColor: Swift.Int
  public let widgetType: Swift.Int
  public let widgetIconColor: Swift.Int
  public let widgetNumColor: Swift.Int
  public init(operate: Swift.Int, location: Swift.Int, hideType: Swift.Int, timeColor: Swift.Int, widgetType: Swift.Int, widgetIconColor: Swift.Int, widgetNumColor: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOWatchDialIdModel : protocol_channel.IDOBaseModel {
  public let watchId: Swift.Int
  public init(watchId: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOWatchDialInfoModel : protocol_channel.IDOBaseModel {
  public let blockSize: Swift.Int
  public let familyName: Swift.String
  public let format: Swift.Int
  public let height: Swift.Int
  public let sizex100: Swift.Int
  public let width: Swift.Int
  public init(blockSize: Swift.Int, familyName: Swift.String, format: Swift.Int, height: Swift.Int, sizex100: Swift.Int, width: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOWatchDialParamModel : protocol_channel.IDOBaseModel {
  public let dialId: Swift.Int
  public init(dialId: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOWatchDialSortParamModel : protocol_channel.IDOBaseModel {
  public let sortItemNumb: Swift.Int
  public let pSortItem: [protocol_channel.IDOWatchDialSortItem]
  public init(sortItemNumb: Swift.Int, pSortItem: [protocol_channel.IDOWatchDialSortItem])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOWatchDialSortItem : Swift.Codable {
  public let type: Swift.Int
  public let sortNumber: Swift.Int
  public let name: Swift.String
  public init(type: Swift.Int, sortNumber: Swift.Int, name: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOWatchFaceModel : protocol_channel.IDOBaseModel {
  public let errCode: Swift.Int
  public let operate: Swift.Int?
  public let fileName: Swift.String?
  public let fileCount: Swift.Int?
  public init(errCode: Swift.Int, operate: Swift.Int?, fileName: Swift.String?, fileCount: Swift.Int?)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOWatchFaceParamModel : protocol_channel.IDOBaseModel {
  public let operate: Swift.Int
  public let fileName: Swift.String
  public let watchFileSize: Swift.Int
  public init(operate: Swift.Int, fileName: Swift.String, watchFileSize: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOWatchListModel : protocol_channel.IDOBaseModel {
  public let localWatchNum: Swift.Int
  public let cloudWatchNum: Swift.Int
  public let wallpaperWatchNum: Swift.Int
  public let userCloudWatchNum: Swift.Int
  public let userWallpaperWatchNum: Swift.Int
  public let nowShowWatchName: Swift.String
  public let watchFrameMainVersion: Swift.Int
  public let fileMaxSize: Swift.Int
  public let watchCapacitySize: Swift.Int
  public let userWatchCapacitySize: Swift.Int
  public let usableMaxDownloadSpaceSize: Swift.Int
  public let items: [protocol_channel.IDOWatchItem]
  public init(localWatchNum: Swift.Int, cloudWatchNum: Swift.Int, wallpaperWatchNum: Swift.Int, userCloudWatchNum: Swift.Int, userWallpaperWatchNum: Swift.Int, nowShowWatchName: Swift.String, watchFrameMainVersion: Swift.Int, fileMaxSize: Swift.Int, watchCapacitySize: Swift.Int, userWatchCapacitySize: Swift.Int, usableMaxDownloadSpaceSize: Swift.Int, items: [protocol_channel.IDOWatchItem])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOWatchItem : Swift.Codable {
  public let type: Swift.Int
  public let watchVersion: Swift.Int
  public let sortNumber: Swift.Int
  public let name: Swift.String
  public let size: Swift.Int
  public init(type: Swift.Int, watchVersion: Swift.Int, sortNumber: Swift.Int, name: Swift.String, size: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOWatchListV2Model : protocol_channel.IDOBaseModel {
  public let version: Swift.Int
  public let availableCount: Swift.Int
  public let fileMaxSize: Swift.Int
  public let items: [protocol_channel.IDOWatchListV2Item]
  public init(availableCount: Swift.Int, fileMaxSize: Swift.Int, items: [protocol_channel.IDOWatchListV2Item])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOWatchListV2Item : Swift.Codable {
  public let fileName: Swift.String
  public init(fileName: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOWeatherDataParamModel : protocol_channel.IDOBaseModel {
  public let type: Swift.Int
  public let temp: Swift.Int
  public let maxTemp: Swift.Int
  public let minTemp: Swift.Int
  public let humidity: Swift.Int
  public let uvIntensity: Swift.Int
  public let aqi: Swift.Int
  public let future: [protocol_channel.IDOWeatherDataFuture]
  public init(type: Swift.Int, temp: Swift.Int, maxTemp: Swift.Int, minTemp: Swift.Int, humidity: Swift.Int, uvIntensity: Swift.Int, aqi: Swift.Int, future: [protocol_channel.IDOWeatherDataFuture])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOWeatherDataFuture : Swift.Codable {
  public let type: Swift.Int
  public let minTemp: Swift.Int
  public let maxTemp: Swift.Int
  public init(type: Swift.Int, minTemp: Swift.Int, maxTemp: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOWeatherSunTimeParamModel : protocol_channel.IDOBaseModel {
  public let sunriseHour: Swift.Int
  public let sunriseMin: Swift.Int
  public let sunsetHour: Swift.Int
  public let sunsetMin: Swift.Int
  public init(sunriseHour: Swift.Int, sunriseMin: Swift.Int, sunsetHour: Swift.Int, sunsetMin: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOWeatherV3ParamModel : protocol_channel.IDOBaseModel {
  public let month: Swift.Int
  public let day: Swift.Int
  public let hour: Swift.Int
  public let min: Swift.Int
  public let sec: Swift.Int
  public let week: Swift.Int
  public let weatherType: Swift.Int
  public let todayTmp: Swift.Int
  public let todayMaxTemp: Swift.Int
  public let todayMinTemp: Swift.Int
  public let cityName: Swift.String
  public let airQuality: Swift.Int
  public let precipitationProbability: Swift.Int
  public let humidity: Swift.Int
  public let todayUvIntensity: Swift.Int
  public let windSpeed: Swift.Int
  public let sunriseHour: Swift.Int
  public let sunriseMin: Swift.Int
  public let sunsetHour: Swift.Int
  public let sunsetMin: Swift.Int
  public let sunriseItemNum: Swift.Int
  public let airGradeItem: Swift.String
  public let hoursWeatherItems: [protocol_channel.IDOHoursWeatherItem]
  public let futureItems: [protocol_channel.IDOFutureItem]
  public let sunriseItem: [protocol_channel.IDOSunriseItem]
  public init(month: Swift.Int, day: Swift.Int, hour: Swift.Int, min: Swift.Int, sec: Swift.Int, week: Swift.Int, weatherType: Swift.Int, todayTmp: Swift.Int, todayMaxTemp: Swift.Int, todayMinTemp: Swift.Int, cityName: Swift.String, airQuality: Swift.Int, precipitationProbability: Swift.Int, humidity: Swift.Int, todayUvIntensity: Swift.Int, windSpeed: Swift.Int, sunriseHour: Swift.Int, sunriseMin: Swift.Int, sunsetHour: Swift.Int, sunsetMin: Swift.Int, sunriseItemNum: Swift.Int, airGradeItem: Swift.String, hoursWeatherItems: [protocol_channel.IDOHoursWeatherItem], futureItems: [protocol_channel.IDOFutureItem], sunriseItem: [protocol_channel.IDOSunriseItem])
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOFutureItem : Swift.Codable {
  public let weatherType: Swift.Int
  public let maxTemp: Swift.Int
  public let minTemp: Swift.Int
  public init(weatherType: Swift.Int, maxTemp: Swift.Int, minTemp: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOHoursWeatherItem : Swift.Codable {
  public let weatherType: Swift.Int
  public let temperature: Swift.Int
  public let probability: Swift.Int
  public init(weatherType: Swift.Int, temperature: Swift.Int, probability: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOSunriseItem : Swift.Codable {
  public let sunriseHour: Swift.Int
  public let sunriseMin: Swift.Int
  public let sunsetHour: Swift.Int
  public let sunsetMin: Swift.Int
  public init(sunriseHour: Swift.Int, sunriseMin: Swift.Int, sunsetHour: Swift.Int, sunsetMin: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDOWorldTimeParamModel : protocol_channel.IDOBaseModel {
  public let id: Swift.Int
  public let minOffset: Swift.Int
  public let cityName: Swift.String
  public let sunriseHour: Swift.Int
  public let sunriseMin: Swift.Int
  public let sunsetHour: Swift.Int
  public let sunsetMin: Swift.Int
  public let longitudeFlag: Swift.Int
  public let longitude: Swift.Int
  public let latitudeFlag: Swift.Int
  public let latitude: Swift.Int
  public init(id: Swift.Int, minOffset: Swift.Int, cityName: Swift.String, sunriseHour: Swift.Int, sunriseMin: Swift.Int, sunsetHour: Swift.Int, sunsetMin: Swift.Int, longitudeFlag: Swift.Int, longitude: Swift.Int, latitudeFlag: Swift.Int, latitude: Swift.Int)
  public func toJsonString() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class IDOAppIconItemModel {
  public var evtType: Swift.Int64?
  public var packName: Swift.String?
  public var appName: Swift.String?
  public var iconLocalPath: Swift.String?
  public var itemId: Swift.Int64?
  public var msgCount: Swift.Int64?
  public var iconCloudPath: Swift.String?
  public var state: Swift.Int64?
  public var iconLocalPathBig: Swift.String?
  public var countryCode: Swift.String?
  public var appVersion: Swift.String?
  public var isDownloadAppInfo: Swift.Bool?
  public var isUpdateAppName: Swift.Bool?
  public var isUpdateAppIcon: Swift.Bool?
  public var isDefault: Swift.Bool?
  public init(evtType: Swift.Int64? = nil, packName: Swift.String? = nil, appName: Swift.String? = nil, iconLocalPath: Swift.String? = nil, itemId: Swift.Int64? = nil, msgCount: Swift.Int64? = nil, iconCloudPath: Swift.String? = nil, state: Swift.Int64? = nil, iconLocalPathBig: Swift.String? = nil, countryCode: Swift.String? = nil, appVersion: Swift.String? = nil, isDownloadAppInfo: Swift.Bool? = nil, isUpdateAppName: Swift.Bool? = nil, isUpdateAppIcon: Swift.Bool? = nil, isDefault: Swift.Bool? = nil)
  @objc deinit
}
public class IDOAppIconInfoModel {
  public var version: Swift.Int64?
  public var iconWidth: Swift.Int64?
  public var iconHeight: Swift.Int64?
  public var colorFormat: Swift.Int64?
  public var blockSize: Swift.Int64?
  public var totalNum: Swift.Int64?
  public var items: [protocol_channel.IDOAppIconItemModel]?
  public init(version: Swift.Int64? = nil, iconWidth: Swift.Int64? = nil, iconHeight: Swift.Int64? = nil, colorFormat: Swift.Int64? = nil, blockSize: Swift.Int64? = nil, totalNum: Swift.Int64? = nil, items: [protocol_channel.IDOAppIconItemModel]? = nil)
  @objc deinit
}
public let sdk: protocol_channel.IDOSdkInterface
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SwiftProtocolChannelPlugin : ObjectiveC.NSObject, Flutter.FlutterPlugin {
  public static let shared: protocol_channel.SwiftProtocolChannelPlugin
  @objc public static func register(with registrar: Flutter.FlutterPluginRegistrar)
  @objc deinit
}
public typealias BlockDataSyncProgress = (_ progress: Swift.Double) -> Swift.Void
public typealias BlockDataSyncData = (_ type: protocol_channel.IDOSyncDataType, _ jsonStr: Swift.String, _ errorCode: Swift.Int) -> Swift.Void
public typealias BlockDataSyncCompleted = (_ errorCode: Swift.Int) -> Swift.Void
public enum IDOSyncDataType : Swift.Int {
  case nullType
  case stepCount
  case heartRate
  case sleep
  case bloodPressure
  case bloodOxygen
  case pressure
  case noise
  case piven
  case respirationRate
  case bodyPower
  case hRV
  case activity
  case gPS
  case swim
  case v2StepCount
  case v2Sleep
  case v2HeartRate
  case v2BloodPressure
  case v2GPS
  case v2Activity
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum IDOSyncStatus : Swift.Int {
  case `init`
  case syncing
  case finished
  case canceled
  case stopped
  case timeout
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension protocol_channel.IDOAlexaLoginState : Swift.Equatable {}
extension protocol_channel.IDOAlexaLoginState : Swift.Hashable {}
extension protocol_channel.IDOAlexaLoginState : Swift.RawRepresentable {}
extension protocol_channel.IDOGetValueType : Swift.Equatable {}
extension protocol_channel.IDOGetValueType : Swift.Hashable {}
extension protocol_channel.IDOGetValueType : Swift.RawRepresentable {}
extension protocol_channel.IDOAlexaAuthorizeResult : Swift.Equatable {}
extension protocol_channel.IDOAlexaAuthorizeResult : Swift.Hashable {}
extension protocol_channel.IDOAlexaAuthorizeResult : Swift.RawRepresentable {}
extension protocol_channel.IDODeviceStateType : Swift.Equatable {}
extension protocol_channel.IDODeviceStateType : Swift.Hashable {}
extension protocol_channel.IDODeviceStateType : Swift.RawRepresentable {}
extension protocol_channel.IDOBluetoothStateType : Swift.Equatable {}
extension protocol_channel.IDOBluetoothStateType : Swift.Hashable {}
extension protocol_channel.IDOBluetoothStateType : Swift.RawRepresentable {}
extension protocol_channel.IDOBluetoothScanType : Swift.Equatable {}
extension protocol_channel.IDOBluetoothScanType : Swift.Hashable {}
extension protocol_channel.IDOBluetoothScanType : Swift.RawRepresentable {}
extension protocol_channel.IDOConnectErrorType : Swift.Equatable {}
extension protocol_channel.IDOConnectErrorType : Swift.Hashable {}
extension protocol_channel.IDOConnectErrorType : Swift.RawRepresentable {}
extension protocol_channel.IDOWriteType : Swift.Equatable {}
extension protocol_channel.IDOWriteType : Swift.Hashable {}
extension protocol_channel.IDOWriteType : Swift.RawRepresentable {}
extension protocol_channel.IDOSppStateType : Swift.Equatable {}
extension protocol_channel.IDOSppStateType : Swift.Hashable {}
extension protocol_channel.IDOSppStateType : Swift.RawRepresentable {}
extension protocol_channel.IDOStatusNotification : Swift.Equatable {}
extension protocol_channel.IDOStatusNotification : Swift.Hashable {}
extension protocol_channel.IDOStatusNotification : Swift.RawRepresentable {}
extension protocol_channel.IDOLogType : Swift.Equatable {}
extension protocol_channel.IDOLogType : Swift.Hashable {}
extension protocol_channel.IDOLogType : Swift.RawRepresentable {}
extension protocol_channel.IDOOtaType : Swift.Equatable {}
extension protocol_channel.IDOOtaType : Swift.Hashable {}
extension protocol_channel.IDOOtaType : Swift.RawRepresentable {}
extension protocol_channel.IDOBindStatus : Swift.Equatable {}
extension protocol_channel.IDOBindStatus : Swift.Hashable {}
extension protocol_channel.IDOBindStatus : Swift.RawRepresentable {}
extension protocol_channel.NoticeMessageType : Swift.Equatable {}
extension protocol_channel.NoticeMessageType : Swift.Hashable {}
extension protocol_channel.NoticeMessageType : Swift.RawRepresentable {}
extension protocol_channel.IDOExchangeStatus : Swift.Equatable {}
extension protocol_channel.IDOExchangeStatus : Swift.Hashable {}
extension protocol_channel.IDOExchangeStatus : Swift.RawRepresentable {}
extension protocol_channel.IDODeviceLogType : Swift.Equatable {}
extension protocol_channel.IDODeviceLogType : Swift.Hashable {}
extension protocol_channel.IDODeviceLogType : Swift.RawRepresentable {}
extension protocol_channel.IDOTransType : Swift.Equatable {}
extension protocol_channel.IDOTransType : Swift.Hashable {}
extension protocol_channel.IDOTransType : Swift.RawRepresentable {}
extension protocol_channel.IDOTransStatus : Swift.Equatable {}
extension protocol_channel.IDOTransStatus : Swift.Hashable {}
extension protocol_channel.IDOTransStatus : Swift.RawRepresentable {}
extension protocol_channel.IDOAlarmType : Swift.Equatable {}
extension protocol_channel.IDOAlarmType : Swift.Hashable {}
extension protocol_channel.IDOAlarmType : Swift.RawRepresentable {}
extension protocol_channel.IDOWeek : Swift.Equatable {}
extension protocol_channel.IDOWeek : Swift.Hashable {}
extension protocol_channel.IDOWeek : Swift.RawRepresentable {}
extension protocol_channel.IDOAlarmStatus : Swift.Equatable {}
extension protocol_channel.IDOAlarmStatus : Swift.Hashable {}
extension protocol_channel.IDOAlarmStatus : Swift.RawRepresentable {}
extension protocol_channel.IDOLanguageType : Swift.Equatable {}
extension protocol_channel.IDOLanguageType : Swift.Hashable {}
extension protocol_channel.IDOLanguageType : Swift.RawRepresentable {}
extension protocol_channel.IDONoticeNotifySwitchState : Swift.Equatable {}
extension protocol_channel.IDONoticeNotifySwitchState : Swift.Hashable {}
extension protocol_channel.IDONoticeNotifySwitchState : Swift.RawRepresentable {}
extension protocol_channel.IDONoticeCallSwitchState : Swift.Equatable {}
extension protocol_channel.IDONoticeCallSwitchState : Swift.Hashable {}
extension protocol_channel.IDONoticeCallSwitchState : Swift.RawRepresentable {}
extension protocol_channel.IDONoticeMsgAllSwitchState : Swift.Equatable {}
extension protocol_channel.IDONoticeMsgAllSwitchState : Swift.Hashable {}
extension protocol_channel.IDONoticeMsgAllSwitchState : Swift.RawRepresentable {}
extension protocol_channel.IDOSportType : Swift.Equatable {}
extension protocol_channel.IDOSportType : Swift.Hashable {}
extension protocol_channel.IDOSportType : Swift.RawRepresentable {}
extension protocol_channel.IDOSyncDataType : Swift.Equatable {}
extension protocol_channel.IDOSyncDataType : Swift.Hashable {}
extension protocol_channel.IDOSyncDataType : Swift.RawRepresentable {}
extension protocol_channel.IDOSyncStatus : Swift.Equatable {}
extension protocol_channel.IDOSyncStatus : Swift.Hashable {}
extension protocol_channel.IDOSyncStatus : Swift.RawRepresentable {}
