// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name protocol_channel
import Flutter
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import protocol_channel
@objc public protocol IDOAlexaDelegate : ObjectiveC.NSObjectProtocol {
  @objc func getHealthValue(valueType: protocol_channel.IDOGetValueType) -> Swift.Int
  @objc func getHrValue(dataType: Swift.Int, timeType: Swift.Int) -> Swift.Int
  @objc func functionControl(funType: Swift.Int)
}
@objc public enum IDOAlexaLoginState : Swift.Int {
  case logging = 0
  case logined
  case logout
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IDOGetValueType : Swift.Int {
  case pedometer = 0
  case calorie = 1
  case heartRate = 2
  case spO2 = 3
  case kilometer = 4
  case swimmingDistance = 5
  case sleepScore = 6
  case runningCount = 7
  case swimmingCount = 8
  case dayWorkoutCount = 9
  case weekWorkoutCount = 10
  case bodyBattery = 11
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IDOAlexaAuthorizeResult : Swift.Int {
  case successful = 0
  case failure = 1
  case timeout = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IDODeviceStateType : Swift.Int {
  case disconnected = 0
  case connecting
  case connected
  case disconnecting
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IDOBluetoothStateType : Swift.Int {
  case unknown = 0
  case resetting
  case unsupported
  case unauthorized
  case poweredOff
  case poweredOn
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IDOBluetoothScanType : Swift.Int {
  case scanning = 0
  case stop
  case find
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IDOConnectErrorType : Swift.Int {
  case none = 0
  case abnormalUUIDMacAddress
  case bluetoothOff
  case connectCancel
  case fail
  case timeOut
  case serviceFail
  case characteristicsFail
  case pairFail
  case informationFail
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IDOWriteType : Swift.Int {
  case withResponse = 0
  case withoutResponse
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IDOSppStateType : Swift.Int {
  case onStart = 0
  case onSuccess
  case onFail
  case onBreak
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class IDODeviceModel : ObjectiveC.NSObject {
  @objc public var rssi: Swift.Int {
    get
  }
  @objc public var name: Swift.String? {
    get
  }
  @objc public var state: protocol_channel.IDODeviceStateType {
    get
  }
  @objc public var uuid: Swift.String? {
    get
  }
  @objc public var macAddress: Swift.String? {
    get
  }
  @objc public var otaMacAddress: Swift.String? {
    get
  }
  @objc public var btMacAddress: Swift.String? {
    get
  }
  @objc public var deviceId: Swift.Int {
    get
  }
  @objc public var deviceType: Swift.Int {
    get
  }
  @objc public var isOta: Swift.Bool {
    get
  }
  @objc public var isTlwOta: Swift.Bool {
    get
  }
  @objc public var bltVersion: Swift.Int {
    get
  }
  @objc public var isPair: Swift.Bool {
    get
  }
  @objc public init(rssi: Swift.Int, name: Swift.String?, state: protocol_channel.IDODeviceStateType, uuid: Swift.String?, macAddress: Swift.String?, otaMacAddress: Swift.String?, btMacAddress: Swift.String?, deviceId: Swift.Int, deviceType: Swift.Int, isOta: Swift.Bool, isTlwOta: Swift.Bool, bltVersion: Swift.Int, isPair: Swift.Bool)
  @objc deinit
}
@objc @objcMembers public class IDOBluetoothStateModel : ObjectiveC.NSObject {
  @objc final public let type: protocol_channel.IDOBluetoothStateType
  @objc final public let scanType: protocol_channel.IDOBluetoothScanType
  @objc public init(type: protocol_channel.IDOBluetoothStateType, scanType: protocol_channel.IDOBluetoothScanType)
  @objc deinit
}
@objc @objcMembers public class IDODeviceStateModel : ObjectiveC.NSObject {
  @objc final public let uuid: Swift.String?
  @objc final public let macAddress: Swift.String?
  @objc final public let state: protocol_channel.IDODeviceStateType
  @objc final public let errorState: protocol_channel.IDOConnectErrorType
  @objc public init(uuid: Swift.String?, macAddress: Swift.String?, state: protocol_channel.IDODeviceStateType, errorState: protocol_channel.IDOConnectErrorType)
  @objc deinit
}
@objc @objcMembers public class IDOWriteStateModel : ObjectiveC.NSObject {
  @objc final public let state: Swift.Bool
  @objc final public let uuid: Swift.String?
  @objc final public let macAddress: Swift.String?
  @objc final public let type: protocol_channel.IDOWriteType
  @objc public init(state: Swift.Bool, uuid: Swift.String?, macAddress: Swift.String?, type: protocol_channel.IDOWriteType)
  @objc deinit
}
@objc @objcMembers public class IDOReceiveData : ObjectiveC.NSObject {
  @objc final public let data: Foundation.Data?
  @objc final public let uuid: Swift.String?
  @objc final public let macAddress: Swift.String?
  @objc final public let spp: Swift.Bool
  @objc final public let platform: Swift.Int
  @objc public init(data: Foundation.Data?, uuid: Swift.String?, macAddress: Swift.String?, spp: Swift.Bool, platform: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOSppStateModel : ObjectiveC.NSObject {
  @objc final public let type: protocol_channel.IDOSppStateType
  @objc public init(type: protocol_channel.IDOSppStateType)
  @objc deinit
}
@objc @objcMembers public class IDODfuConfig : ObjectiveC.NSObject {
  @objc final public let filePath: Swift.String?
  @objc final public let uuid: Swift.String?
  @objc final public let macAddress: Swift.String?
  @objc final public let deviceId: Swift.String?
  @objc final public let platform: Swift.Int
  @objc final public let isDeviceSupportPairedWithPhoneSystem: Swift.Bool
  @objc final public let prn: Swift.Int
  @objc final public let isNeedReOpenBluetoothSwitchIfFailed: Swift.Bool
  @objc final public let maxRetryTime: Swift.Int
  @objc final public let isNeedAuth: Swift.Bool
  @objc final public let otaWorkMode: Swift.Int
  @objc public init(filePath: Swift.String?, uuid: Swift.String?, macAddress: Swift.String?, deviceId: Swift.String?, platform: Swift.Int, isDeviceSupportPairedWithPhoneSystem: Swift.Bool, prn: Swift.Int, isNeedReOpenBluetoothSwitchIfFailed: Swift.Bool, maxRetryTime: Swift.Int, isNeedAuth: Swift.Bool, otaWorkMode: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOBleData : ObjectiveC.NSObject {
  @objc public var data: Foundation.Data?
  @objc public var macAddress: Swift.String?
  @objc public var type: Swift.Int
  @objc public init(data: Foundation.Data? = nil, macAddress: Swift.String? = nil, type: Swift.Int = 0)
  @objc deinit
}
@objc public enum IDOStatusNotification : Swift.Int {
  case protocolConnectCompleted = 0
  case functionTableUpdateCompleted = 1
  case deviceInfoUpdateCompleted = 2
  case deviceInfoFwVersionCompleted = 3
  case unbindOnAuthCodeError = 4
  case unbindOnBindStateError = 5
  case fastSyncCompleted = 6
  case fastSyncFailed = 7
  case deviceInfoBtAddressUpdateCompleted = 8
  case macAddressError = 9
  case syncHealthDataIng = 10
  case syncHealthDataCompleted = 11
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class IDODeviceNotificationModel : ObjectiveC.NSObject {
  @objc final public let dataType: Foundation.NSNumber?
  @objc final public let notifyType: Foundation.NSNumber?
  @objc final public let msgId: Foundation.NSNumber?
  @objc final public let msgNotice: Foundation.NSNumber?
  @objc final public let errorIndex: Foundation.NSNumber?
  @objc final public let controlEvt: Foundation.NSNumber?
  @objc final public let controlJson: Swift.String?
  @objc public init(dataType: Foundation.NSNumber?, notifyType: Foundation.NSNumber?, msgId: Foundation.NSNumber?, msgNotice: Foundation.NSNumber?, errorIndex: Foundation.NSNumber?, controlEvt: Foundation.NSNumber?, controlJson: Swift.String?)
  @objc deinit
}
@objc public enum IDOLogType : Swift.Int {
  case none = 0
  case debug
  case release
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IDOOtaType : Swift.Int {
  case none = 0
  case telink
  case nordic
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IDOBindStatus : Swift.Int {
  case failed = 0
  case successful
  case binded
  case needAuth
  case refusedBind
  case wrongDevice
  case authCodeCheckFailed
  case canceled
  case failedOnGetFunctionTable
  case failedOnGetDeviceInfo
  case timeout
  case agreeDeleteDeviceData
  case denyDeleteDeviceData
  case timeoutOnNewAccount
  case needConfirmByApp
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class CmdError : ObjectiveC.NSObject, Swift.Error {
  @objc final public let code: Swift.Int
  @objc final public let message: Swift.String?
  @objc public var isOK: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public init(code: Swift.Int = -2, message: Swift.String? = nil)
  @objc deinit
}
@objc public enum NoticeMessageType : Swift.Int {
  case sms = 0x01
  case email = 0x02
  case wx = 0x03
  case qq = 0x04
  case weibo = 0x05
  case facebook = 0x06
  case twitter = 0x07
  case whatsapp = 0x08
  case messenger = 0x09
  case instagram = 0x0a
  case linkedin = 0x0b
  case calendar = 0x0c
  case skype = 0x0d
  case alarm = 0x0e
  case vkontakte = 0x10
  case line = 0x11
  case viber = 0x12
  case kakao_talk = 0x13
  case gmail = 0x14
  case outlook = 0x15
  case snapchat = 0x16
  case telegram = 0x17
  case chatwork = 0x20
  case slack = 0x21
  case tumblr = 0x23
  case youtube = 0x24
  case pinterest_yahoo = 0x25
  case tiktok = 0x26
  case redbus = 0x27
  case dailyhunt = 0x28
  case hotstar = 0x29
  case inshorts = 0x2a
  case paytm = 0x2b
  case amazon = 0x2c
  case flipkart = 0x2d
  case prime = 0x2e
  case netflix = 0x2f
  case gpay = 0x30
  case phonpe = 0x31
  case swiggy = 0x32
  case zomato = 0x33
  case makemytrip = 0x34
  case jiotv = 0x35
  case keep = 0x36
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct Cmds {
  public struct getSn : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<Swift.String>) -> any protocol_channel.IDOCancellable
    public typealias DataType = Swift.String
  }
  public struct getBtName : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<Swift.String>) -> any protocol_channel.IDOCancellable
    public typealias DataType = Swift.String
  }
  public struct getLiveData : protocol_channel.IDOCmdProtocol {
    public init(flag: Swift.Int)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOLiveDataModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOLiveDataModel
  }
  public struct getErrorRecord : protocol_channel.IDOCmdProtocol {
    public init(type: Swift.Int)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOErrorRecordModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOErrorRecordModel
  }
  public struct getHidInfo : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<Swift.Bool>) -> any protocol_channel.IDOCancellable
    public typealias DataType = Swift.Bool
  }
  public struct getGpsInfo : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOGpsInfoModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOGpsInfoModel
  }
  public struct getVersionInfo : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOVersionInfoModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOVersionInfoModel
  }
  public struct getMtuInfo : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOMtuInfoModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOMtuInfoModel
  }
  public struct getAllHealthSwitchState : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOAllHealthSwitchStateModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOAllHealthSwitchStateModel
  }
  public struct getGpsStatus : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOGpsStatusModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOGpsStatusModel
  }
  public struct getUnerasableMeunList : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOUnerasableMeunListModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOUnerasableMeunListModel
  }
  public struct getActivitySwitch : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOActivitySwitchModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOActivitySwitchModel
  }
  public struct getUnreadAppReminder : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdGetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdGetResponseModel
  }
  public struct getFlashBinInfo : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOFlashBinInfoModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOFlashBinInfoModel
  }
  public struct getBtNotice : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOBtNoticeModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOBtNoticeModel
  }
  public struct getUpHandGesture : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOUpHandGestureModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOUpHandGestureModel
  }
  public struct getWatchDialId : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOWatchDialIdModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOWatchDialIdModel
  }
  public struct getNotDisturbStatus : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDONotDisturbStatusModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDONotDisturbStatusModel
  }
  public struct getMainSportGoal : protocol_channel.IDOCmdProtocol {
    public init(timeGoalType: Swift.Int)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOMainSportGoalModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOMainSportGoalModel
  }
  public struct getBpAlgVersion : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOBpAlgVersionModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOBpAlgVersionModel
  }
  public struct getScreenBrightness : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOScreenBrightnessModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOScreenBrightnessModel
  }
  public struct getHotStartParam : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOHotStartParamModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOHotStartParamModel
  }
  public struct getSupportMaxSetItemsNum : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOSupportMaxSetItemsNumModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOSupportMaxSetItemsNumModel
  }
  public struct getWalkRemind : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOWalkRemindModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOWalkRemindModel
  }
  public struct getStepGoal : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOStepGoalModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOStepGoalModel
  }
  public struct getDeviceName : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<Swift.String>) -> any protocol_channel.IDOCancellable
    public typealias DataType = Swift.String
  }
  public struct getContactReviseTime : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOContactReviseTimeModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOContactReviseTimeModel
  }
  public struct getUpdateStatus : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOUpdateStatusModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOUpdateStatusModel
  }
  public struct getStressVal : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOStressValModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOStressValModel
  }
  public struct getHeartRateMode : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOHeartRateModeModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOHeartRateModeModel
  }
  public struct getBatteryInfo : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOBatteryInfoModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOBatteryInfoModel
  }
  public struct getDeviceLogState : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDODeviceLogStateModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDODeviceLogStateModel
  }
  public struct setBleVoice : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOBleVoiceParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setGpsControl : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOGpsControlParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOGpsControlModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOGpsControlModel
  }
  public struct setHeartRateModeSmart : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOHeartRateModeSmartParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setStressCalibration : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOStressCalibrationParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOStressCalibrationModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOStressCalibrationModel
  }
  public struct setHandWashingReminder : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOHandWashingReminderParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setSportGoal : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOSportGoalParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setWeatherData : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOWeatherDataParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setUnreadAppReminder : protocol_channel.IDOCmdProtocol {
    public init(open: Swift.Bool)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setNotificationStatus : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDONotificationStatusParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setScientificSleepSwitch : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOScientificSleepSwitchParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setBpCalibration : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOBpCalibrationParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOBpCalibrationModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOBpCalibrationModel
  }
  public struct setLostFind : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOLostFindParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setWatchDial : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOWatchDialParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setWeatherSwitch : protocol_channel.IDOCmdProtocol {
    public init(open: Swift.Bool)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setUnit : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOUnitParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setFindPhone : protocol_channel.IDOCmdProtocol {
    public init(open: Swift.Bool)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct getDownloadLanguage : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDODownloadLanguageModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDODownloadLanguageModel
  }
  public struct setOverFindPhone : protocol_channel.IDOCmdProtocol {
    public init(open: Swift.Bool)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct getMenuList : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOMenuListModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOMenuListModel
  }
  public struct setOnekeySOS : protocol_channel.IDOCmdProtocol {
    public init(open: Swift.Bool, phoneType: Swift.Int)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setSportModeSelect : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOSportModeSelectParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setSportModeSort : protocol_channel.IDOCmdProtocol {
    public init(items: [protocol_channel.IDOSportModeSortParamModel])
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setLongSit : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOLongSitParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setHeartRateMode : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOHeartRateModeParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setBodyPowerTurn : protocol_channel.IDOCmdProtocol {
    public init(open: Swift.Bool)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setRRespiRateTurn : protocol_channel.IDOCmdProtocol {
    public init(open: Swift.Bool)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setV3Noise : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOV3NoiseParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setWeatherSunTime : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOWeatherSunTimeParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setShortcut : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOShortcutParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct getNoticeStatus : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOSetNoticeStatusModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOSetNoticeStatusModel
  }
  public struct setNoticeStatus : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOSetNoticeStatusModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDONotificationCenterModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDONotificationCenterModel
  }
  public struct setTemperatureSwitch : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOTemperatureSwitchParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setSleepPeriod : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOSleepPeriodParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setUpHandGesture : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOUpHandGestureParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setTakingMedicineReminder : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOTakingMedicineReminderParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setSpo2Switch : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOSpo2SwitchParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setWeatherCityName : protocol_channel.IDOCmdProtocol {
    public init(cityName: Swift.String)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct getAlarm : protocol_channel.IDOCmdProtocol {
    public init(flag: Swift.Int)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOAlarmModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOAlarmModel
  }
  public struct setAlarm : protocol_channel.IDOCmdProtocol {
    public init(alarm: protocol_channel.IDOAlarmModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct getHabitInfo : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOHabitInfoModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOHabitInfoModel
  }
  public struct setFitnessGuidance : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOFitnessGuidanceParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setDisplayMode : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDODisplayModeParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setBpMeasurement : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOBpMeasurementParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOBpMeasurementModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOBpMeasurementModel
  }
  public struct setMusicOnOff : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOMusicOnOffParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setSendRunPlan : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDORunPlanParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOSendRunPlanModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOSendRunPlanModel
  }
  public struct setWeatherV3 : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOWeatherV3ParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct getBleMusicInfo : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOMusicInfoModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOMusicInfoModel
  }
  public struct musicControl : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOMusicControlParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setMusicOperate : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOMusicOpearteParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOMusicOperateModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOMusicOperateModel
  }
  public struct noticeMessageV3 : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDONoticeMessageParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setNoticeMessageState : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDONoticeMessageStateParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDONoticeMessageStateModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDONoticeMessageStateModel
  }
  public struct setNoticeAppName : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDONoticeMesaageParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setWorldTimeV3 : protocol_channel.IDOCmdProtocol {
    public init(_ param: [protocol_channel.IDOWorldTimeParamModel])
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setSchedulerReminder : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOSchedulerReminderParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOSchedulerReminderModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOSchedulerReminderModel
  }
  public struct getWatchDialInfo : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOWatchDialInfoModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOWatchDialInfoModel
  }
  public struct setBpCalControlV3 : protocol_channel.IDOCmdProtocol {
    public init(operate: Swift.Int, filePath: Swift.String)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOBpCalControlModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOBpCalControlModel
  }
  public struct setWatchFaceData : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOWatchFaceParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOWatchFaceModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOWatchFaceModel
  }
  public struct setSyncContact : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOSyncContactParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOSyncContactModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOSyncContactModel
  }
  public struct getWatchListV3 : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOWatchListModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOWatchListModel
  }
  public struct getWatchListV2 : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOWatchListV2Model>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOWatchListV2Model
  }
  public struct setSportParamSort : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOSportSortParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOSportSortModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOSportSortModel
  }
  public struct setSport100Sort : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOSport100SortParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOSport100SortModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOSport100SortModel
  }
  public struct setMainUISortV3 : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOMainUISortParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOMainUISortModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOMainUISortModel
  }
  public struct setHistoricalMenstruation : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOHistoricalMenstruationParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct getLanguageLibrary : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOLanguageLibraryModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOLanguageLibraryModel
  }
  public struct getBleBeep : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOBleBeepModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOBleBeepModel
  }
  public struct setLongCityNameV3 : protocol_channel.IDOCmdProtocol {
    public init(cityName: Swift.String)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setHeartMode : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOHeartModeParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOHeartModeModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOHeartModeModel
  }
  public struct setVoiceReplyText : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOVoiceReplyParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setWatchDialSort : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOWatchDialSortParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setWalkRemindTimes : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOWalkRemindTimesParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setWallpaperDialReply : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOWallpaperDialReplyV3ParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOWallpaperDialReplyV3Model>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOWallpaperDialReplyV3Model
  }
  public struct setDateTime : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDODateTimeParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setUserInfo : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOUserInfoPramModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct reboot : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct factoryReset : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct shutdown : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct findDeviceStart : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct findDeviceStop : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct photoStart : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct photoStop : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setHand : protocol_channel.IDOCmdProtocol {
    public init(isRightHand: Swift.Bool)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setScreenBrightness : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOScreenBrightnessModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct otaStart : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdOTAResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdOTAResponseModel
  }
  public struct setHeartRateInterval : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOHeartRateIntervalModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setCalorieDistanceGoal : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOMainSportGoalModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setWalkRemind : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOWalkRemindModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setMenstruation : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOMenstruationModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct getDefaultSportType : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDODefaultSportTypeModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDODefaultSportTypeModel
  }
  public struct setDrinkWaterRemind : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDODrinkWaterRemindModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setMenstruationRemind : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOMenstruationRemindParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setStressSwitch : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOStressSwitchParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setVoiceAssistantOnOff : protocol_channel.IDOCmdProtocol {
    public init(isOpen: Swift.Bool)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setNotDisturb : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDONotDisturbParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setMenuList : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOMenuListParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setSportSortV3 : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOSportParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct setCallQuickReplyOnOff : protocol_channel.IDOCmdProtocol {
    public init(isOpen: Swift.Bool)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct getSportTypeV3 : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDODefaultSportTypeModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDODefaultSportTypeModel
  }
  public struct getBtConnectPhoneModel : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<Swift.String>) -> any protocol_channel.IDOCancellable
    public typealias DataType = Swift.String
  }
  public struct setActivitySwitch : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOActivitySwitchParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct musicStart : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct musicStop : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct sendBindResult : protocol_channel.IDOCmdProtocol {
    public init(isSuccess: Swift.Bool)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct getUnit : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOUnitModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOUnitModel
  }
  public struct setHotStartParam : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDOGpsHotStartParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOCmdSetResponseModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOCmdSetResponseModel
  }
  public struct getSmartHeartRateMode : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOHeartRateModeSmartModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOHeartRateModeSmartModel
  }
  public struct getSpo2Switch : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOSpo2SwitchModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOSpo2SwitchModel
  }
  public struct getStressSwitch : protocol_channel.IDOCmdProtocol {
    public init()
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDOStressSwitchModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDOStressSwitchModel
  }
  public struct setDefaultMsgList : protocol_channel.IDOCmdProtocol {
    public init(_ param: protocol_channel.IDODefaultMessageConfigParamModel)
    @discardableResult
    public func send(completion: @escaping protocol_channel.IDOCmdResponse<protocol_channel.IDODefaultMessageConfigModel>) -> any protocol_channel.IDOCancellable
    public typealias DataType = protocol_channel.IDODefaultMessageConfigModel
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class Cmdoc : ObjectiveC.NSObject {
  @objc @discardableResult
  public static func getSn(_ completion: @escaping (_ err: protocol_channel.CmdError, _ sn: Swift.String?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getBtName(_ completion: @escaping (_ err: protocol_channel.CmdError, _ btName: Swift.String?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getLiveData(_ flag: Swift.Int, completion: @escaping (_ err: protocol_channel.CmdError, _ liveData: protocol_channel.IDOLiveDataModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getErrorRecord(_ type: Swift.Int, completion: @escaping (_ err: protocol_channel.CmdError, _ recordData: protocol_channel.IDOErrorRecordModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getHidInfo(_ completion: @escaping (_ err: protocol_channel.CmdError, _ isStart: Swift.Bool) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getGpsInfo(_ completion: @escaping (_ err: protocol_channel.CmdError, _ gpsInfo: protocol_channel.IDOGpsInfoModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getVersionInfo(_ completion: @escaping (_ err: protocol_channel.CmdError, _ versionInfo: protocol_channel.IDOVersionInfoModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getMtuInfo(_ completion: @escaping (_ err: protocol_channel.CmdError, _ mtuInfo: protocol_channel.IDOMtuInfoModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getAllHealthSwitchState(_ completion: @escaping (_ err: protocol_channel.CmdError, _ state: protocol_channel.IDOAllHealthSwitchStateModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getGpsStatus(_ completion: @escaping (_ err: protocol_channel.CmdError, _ gpsStatus: protocol_channel.IDOGpsStatusModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getUnerasableMeunList(_ completion: @escaping (_ err: protocol_channel.CmdError, _ menuList: protocol_channel.IDOUnerasableMeunListModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getActivitySwitch(_ completion: @escaping (_ err: protocol_channel.CmdError, _ switchModel: protocol_channel.IDOActivitySwitchModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getUnreadAppReminder(_ completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdGetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getFlashBinInfo(_ completion: @escaping (_ err: protocol_channel.CmdError, _ binInfo: protocol_channel.IDOFlashBinInfoModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getBtNotice(_ completion: @escaping (_ err: protocol_channel.CmdError, _ noticeModel: protocol_channel.IDOBtNoticeModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getUpHandGesture(_ completion: @escaping (_ err: protocol_channel.CmdError, _ gestureModel: protocol_channel.IDOUpHandGestureModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getWatchDialId(_ completion: @escaping (_ err: protocol_channel.CmdError, _ watchModel: protocol_channel.IDOWatchDialIdModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getNotDisturbStatus(_ completion: @escaping (_ err: protocol_channel.CmdError, _ statusModel: protocol_channel.IDONotDisturbStatusModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getMainSportGoal(_ timeGoalType: Swift.Int, completion: @escaping (_ err: protocol_channel.CmdError, _ sportGoalModel: protocol_channel.IDOMainSportGoalModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getBpAlgVersion(_ completion: @escaping (_ err: protocol_channel.CmdError, _ bpAlgModel: protocol_channel.IDOBpAlgVersionModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getScreenBrightness(_ completion: @escaping (_ err: protocol_channel.CmdError, _ brightnessModel: protocol_channel.IDOScreenBrightnessModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getHotStartParam(_ completion: @escaping (_ err: protocol_channel.CmdError, _ hotStartModel: protocol_channel.IDOHotStartParamModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getSupportMaxSetItemsNum(_ completion: @escaping (_ err: protocol_channel.CmdError, _ maxSetItemsModel: protocol_channel.IDOSupportMaxSetItemsNumModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getWalkRemind(_ completion: @escaping (_ err: protocol_channel.CmdError, _ walkRemindModel: protocol_channel.IDOWalkRemindModelObjc?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getStepGoal(_ completion: @escaping (_ err: protocol_channel.CmdError, _ stepGoalModel: protocol_channel.IDOStepGoalModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getDeviceName(_ completion: @escaping (_ err: protocol_channel.CmdError, _ deviceName: Swift.String?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getContactReviseTime(_ completion: @escaping (_ err: protocol_channel.CmdError, _ timeModel: protocol_channel.IDOContactReviseTimeModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getUpdateStatus(_ completion: @escaping (_ err: protocol_channel.CmdError, _ statusModel: protocol_channel.IDOUpdateStatusModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getStressVal(_ completion: @escaping (_ err: protocol_channel.CmdError, _ stressVal: protocol_channel.IDOStressValModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getHeartRateMode(_ completion: @escaping (_ err: protocol_channel.CmdError, _ heartRateModel: protocol_channel.IDOHeartRateModeModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getBatteryInfo(_ completion: @escaping (_ err: protocol_channel.CmdError, _ batteryInfo: protocol_channel.IDOBatteryInfoModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getDeviceLogState(_ completion: @escaping (_ err: protocol_channel.CmdError, _ liveData: protocol_channel.IDODeviceLogStateModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setBleVoice(_ bleVoiceParam: protocol_channel.IDOBleVoiceParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setGpsControl(_ gpsControl: protocol_channel.IDOGpsControlParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ gpsControl: protocol_channel.IDOGpsControlModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setHeartRateModeSmart(_ heartRateMode: protocol_channel.IDOHeartRateModeSmartParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setStressCalibration(_ stressCalibration: protocol_channel.IDOStressCalibrationParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ stressCalibration: protocol_channel.IDOStressCalibrationModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setHandWashingReminder(_ handWashingParam: protocol_channel.IDOHandWashingReminderParamModelObjc, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setSportGoal(_ sportGoalParam: protocol_channel.IDOSportGoalParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ liveData: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setWeatherData(_ weatherData: protocol_channel.IDOWeatherDataParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setUnreadAppReminder(_ open: Swift.Bool, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setNotificationStatus(_ statusParam: protocol_channel.IDONotificationStatusParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setScientificSleepSwitch(_ sleepSwitchParam: protocol_channel.IDOScientificSleepSwitchParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setBpCalibration(_ bpParam: protocol_channel.IDOBpCalibrationParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ bpModel: protocol_channel.IDOBpCalibrationModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setLostFind(_ lostFindParam: protocol_channel.IDOLostFindParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setWatchDial(_ watchDial: protocol_channel.IDOWatchDialParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ liveData: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setWeatherSwitch(_ open: Swift.Bool, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setUnit(_ unitParam: protocol_channel.IDOUnitParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setFindPhone(_ open: Swift.Bool, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getDownloadLanguage(_ completion: @escaping (_ err: protocol_channel.CmdError, _ downLanguage: protocol_channel.IDODownloadLanguageModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setOverFindPhone(_ completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getMenuList(_ completion: @escaping (_ err: protocol_channel.CmdError, _ menuModel: protocol_channel.IDOMenuListModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setOnekeySOS(_ open: Swift.Bool, phoneType: Swift.Int, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setSportModeSelect(_ sportModeSelect: protocol_channel.IDOSportModeSelectParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setSportModeSort(_ items: [protocol_channel.IDOSportModeSortParamModel], completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setLongSit(_ longSit: protocol_channel.IDOLongSitParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setHeartRateMode(_ heartRateMode: protocol_channel.IDOHeartRateModeParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setBodyPowerTurn(_ open: Swift.Bool, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setRRespiRateTurn(_ open: Swift.Bool, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setV3Noise(_ noiseParam: protocol_channel.IDOV3NoiseParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setWeatherSunTime(_ weatherSunTime: protocol_channel.IDOWeatherSunTimeParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setShortcut(_ shortcutParam: protocol_channel.IDOShortcutParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getNoticeStatus(_ completion: @escaping (_ err: protocol_channel.CmdError, _ noticeStatus: protocol_channel.IDOSetNoticeStatusModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setNoticeStatus(_ noticeStatus: protocol_channel.IDOSetNoticeStatusModel, completion: @escaping (_ err: protocol_channel.CmdError, _ notifCenter: protocol_channel.IDONotificationCenterModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setTemperatureSwitch(_ switchParam: protocol_channel.IDOTemperatureSwitchParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ liveData: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setSleepPeriod(_ sleepPeriod: protocol_channel.IDOSleepPeriodParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setUpHandGesture(_ upHandGesture: protocol_channel.IDOUpHandGestureParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setTakingMedicineReminder(_ takingMedicine: protocol_channel.IDOTakingMedicineReminderParamModelObjc, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setSpo2Switch(_ spo2Switch: protocol_channel.IDOSpo2SwitchParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setWeatherCityName(_ cityName: Swift.String, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getAlarm(_ flag: Swift.Int, completion: @escaping (_ err: protocol_channel.CmdError, _ alarmModel: protocol_channel.IDOAlarmModelObjc?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setAlarm(_ alarm: protocol_channel.IDOAlarmModelObjc, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getHabitInfo(_ completion: @escaping (_ err: protocol_channel.CmdError, _ habitInfo: protocol_channel.IDOHabitInfoModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setFitnessGuidance(_ fitness: protocol_channel.IDOFitnessGuidanceParamModelObjc, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setDisplayMode(_ displayMode: protocol_channel.IDODisplayModeParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setBpMeasurement(_ bpMeasurment: protocol_channel.IDOBpMeasurementParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ bpMeasurement: protocol_channel.IDOBpMeasurementModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setMusicOnOff(_ musicOnOff: protocol_channel.IDOMusicOnOffParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setSendRunPlan(_ runPlan: protocol_channel.IDORunPlanParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ runPlanModel: protocol_channel.IDOSendRunPlanModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setWeatherV3(_ weather: protocol_channel.IDOWeatherV3ParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getBleMusicInfo(_ completion: @escaping (_ err: protocol_channel.CmdError, _ musiceInfo: protocol_channel.IDOMusicInfoModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func musicControl(_ musicControl: protocol_channel.IDOMusicControlParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setMusicOperate(_ musicOpt: protocol_channel.IDOMusicOpearteParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ musicOptModel: protocol_channel.IDOMusicOperateModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func noticeMessageV3(_ noticeMsg: protocol_channel.IDONoticeMessageParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setNoticeMessageState(_ noticeMsgState: protocol_channel.IDONoticeMessageStateParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ msgState: protocol_channel.IDONoticeMessageStateModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setNoticeAppName(_ noticeMsgParam: protocol_channel.IDONoticeMesaageParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setWorldTimeV3(_ worldTimes: [protocol_channel.IDOWorldTimeParamModel], completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setSchedulerReminder(_ schedulerReminderParam: protocol_channel.IDOSchedulerReminderParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ schedulerReminderModel: protocol_channel.IDOSchedulerReminderModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getWatchDialInfo(_ completion: @escaping (_ err: protocol_channel.CmdError, _ watchDialInfo: protocol_channel.IDOWatchDialInfoModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setBpCalControlV3(_ operate: Swift.Int, filePath: Swift.String, completion: @escaping (_ err: protocol_channel.CmdError, _ bpCalControl: protocol_channel.IDOBpCalControlModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setWatchFaceData(_ watchFace: protocol_channel.IDOWatchFaceParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ watchFaceModel: protocol_channel.IDOWatchFaceModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setSyncContact(_ syncContactParam: protocol_channel.IDOSyncContactParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ syncContactModel: protocol_channel.IDOSyncContactModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getWatchListV3(_ completion: @escaping (_ err: protocol_channel.CmdError, _ watchListModel: protocol_channel.IDOWatchListModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getWatchListV2(_ completion: @escaping (_ err: protocol_channel.CmdError, _ watchList: protocol_channel.IDOWatchListV2Model?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setSportParamSort(_ sportSortParam: protocol_channel.IDOSportSortParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ sportSortModel: protocol_channel.IDOSportSortModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setSport100Sort(_ sport100SortParam: protocol_channel.IDOSport100SortParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ sportSortModel: protocol_channel.IDOSport100SortModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setMainUISortV3(_ mainUISortParam: protocol_channel.IDOMainUISortParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ mainUISortModel: protocol_channel.IDOMainUISortModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setHistoricalMenstruation(_ historical: protocol_channel.IDOHistoricalMenstruationParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getLanguageLibrary(_ completion: @escaping (_ err: protocol_channel.CmdError, _ languageLib: protocol_channel.IDOLanguageLibraryModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getBleBeep(_ completion: @escaping (_ err: protocol_channel.CmdError, _ bleBeep: protocol_channel.IDOBleBeepModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setLongCityNameV3(_ cityName: Swift.String, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setHeartMode(_ heartModeParam: protocol_channel.IDOHeartModeParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ heartModeModel: protocol_channel.IDOHeartModeModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setVoiceReplyText(_ voiceReplyParam: protocol_channel.IDOVoiceReplyParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setWatchDialSort(_ watchDialSortParam: protocol_channel.IDOWatchDialSortParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setWalkRemindTimes(_ walkRemindTimes: protocol_channel.IDOWalkRemindTimesParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setWallpaperDialReply(_ wallpaperDial: protocol_channel.IDOWallpaperDialReplyV3ParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ wallpaperDialReplyModel: protocol_channel.IDOWallpaperDialReplyV3Model?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setDateTime(_ dateTimeParam: protocol_channel.IDODateTimeParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setUserInfo(_ userInfo: protocol_channel.IDOUserInfoPramModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func reboot(_ completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func factoryReset(_ completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func shutdown(_ completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func findDeviceStart(_ completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func findDeviceStop(_ completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func photoStart(_ completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func photoStop(_ completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setHand(_ isRightHand: Swift.Bool, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setScreenBrightness(_ screenBrightness: protocol_channel.IDOScreenBrightnessModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func otaStart(_ completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdOTAResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setHeartRateInterval(_ heartRateInterval: protocol_channel.IDOHeartRateIntervalModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setCalorieDistanceGoal(_ sportGoal: protocol_channel.IDOMainSportGoalModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setWalkRemind(_ walkRemind: protocol_channel.IDOWalkRemindModelObjc, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setMenstruation(_ menstruation: protocol_channel.IDOMenstruationModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getDefaultSportType(_ completion: @escaping (_ err: protocol_channel.CmdError, _ sportTypeModel: protocol_channel.IDODefaultSportTypeModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setDrinkWaterRemind(_ drinkWaterRemind: protocol_channel.IDODrinkWaterRemindModelObjc, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setMenstruationRemind(_ menstruationRemind: protocol_channel.IDOMenstruationRemindParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setStressSwitch(_ stressSwitchParam: protocol_channel.IDOStressSwitchParamModelObjc, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setVoiceAssistantOnOff(_ isOpen: Swift.Bool, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setNotDisturb(_ notDisturbModel: protocol_channel.IDONotDisturbParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setMenuList(_ menuListParam: protocol_channel.IDOMenuListParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setSportSortV3(_ sportParam: protocol_channel.IDOSportParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setCallQuickReplyOnOff(_ isOpen: Swift.Bool, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getSportTypeV3(_ completion: @escaping (_ err: protocol_channel.CmdError, _ sportTypeModel: protocol_channel.IDODefaultSportTypeModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getBtConnectPhoneModel(_ completion: @escaping (_ err: protocol_channel.CmdError, _ phoneModel: Swift.String?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setActivitySwitch(_ switchParam: protocol_channel.IDOActivitySwitchParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func musicStart(_ completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func musicStop(_ completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func sendBindResult(_ isSuccess: Swift.Bool, _ completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getUnit(_ completion: @escaping (_ err: protocol_channel.CmdError, _ unitModel: protocol_channel.IDOUnitModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setHotStartParam(_ gpsHotStart: protocol_channel.IDOGpsHotStartParamModel, completion: @escaping (_ err: protocol_channel.CmdError, _ response: protocol_channel.IDOCmdSetResponseModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getSmartHeartRateMode(_ completion: @escaping (_ err: protocol_channel.CmdError, _ heartRateModel: protocol_channel.IDOHeartRateModeSmartModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getSpo2Switch(_ completion: @escaping (_ err: protocol_channel.CmdError, _ spo2Model: protocol_channel.IDOSpo2SwitchModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func getStressSwitch(_ completion: @escaping (_ err: protocol_channel.CmdError, _ stressSwitchModel: protocol_channel.IDOStressSwitchModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc @discardableResult
  public static func setDefaultMsgList(_ paramModel: protocol_channel.IDODefaultMessageConfigParamModel, _ completion: @escaping (_ err: protocol_channel.CmdError, _ aModel: protocol_channel.IDODefaultMessageConfigModel?) -> ()) -> any protocol_channel.IDOCancellable
  @objc override dynamic public init()
  @objc deinit
}
public enum IDOAppExecType {
  case appStart(protocol_channel.IDOAppStartExchangeModel)
  case appEnd(protocol_channel.IDOAppEndExchangeModel)
  case appIng(protocol_channel.IDOAppIngExchangeModel)
  case appPause(protocol_channel.IDOAppPauseExchangeModel)
  case appRestore(protocol_channel.IDOAppRestoreExchangeModel)
  case appIngV3(protocol_channel.IDOAppIngV3ExchangeModel)
  case appOperatePlan(protocol_channel.IDOAppOperatePlanExchangeModel)
}
public enum IDOAppReplyType {
  case bleStartReply(protocol_channel.IDOBleStartReplyExchangeModel)
  case bleIngReply(protocol_channel.IDOBleIngReplyExchangeModel)
  case bleEndReply(protocol_channel.IDOBleEndReplyExchangeModel)
  case blePauseReply(protocol_channel.IDOBlePauseReplyExchangeModel)
  case bleRestoreReply(protocol_channel.IDOBleRestoreReplyExchangeModel)
  case bleOperatePlanReply(protocol_channel.IDOBleOperatePlanReplyExchangeModel)
  case appBlePauseReply(protocol_channel.IDOAppBlePauseReplyExchangeModel)
  case appBleRestoreReply(protocol_channel.IDOAppBleRestoreReplyExchangeModel)
  case appBleEndReply(protocol_channel.IDOAppBleEndReplyExchangeModel)
}
public enum IDOBleExecType {
  case bleStart(protocol_channel.IDOBleStartExchangeModel?)
  case bleIng(protocol_channel.IDOBleIngExchangeModel?)
  case bleEnd(protocol_channel.IDOBleEndExchangeModel?)
  case blePause(protocol_channel.IDOBlePauseExchangeModel?)
  case bleRestore(protocol_channel.IDOBleRestoreExchangeModel?)
  case bleOperatePlan(protocol_channel.IDOBleOperatePlanExchangeModel?)
  case appBlePause(protocol_channel.IDOAppBlePauseExchangeModel?)
  case appBleRestore(protocol_channel.IDOAppBleRestoreExchangeModel?)
  case appBleEnd(protocol_channel.IDOAppBleEndExchangeModel?)
}
public enum IDOBleReplyType {
  case appStartReply(protocol_channel.IDOAppStartReplyExchangeModel?)
  case appEndReply(protocol_channel.IDOAppEndReplyExchangeModel?)
  case appIngReply(protocol_channel.IDOAppIngReplyExchangeModel?)
  case appPauseReply(protocol_channel.IDOAppPauseReplyExchangeModel?)
  case appRestoreReply(protocol_channel.IDOAppRestoreReplyExchangeModel?)
  case appIngV3Reply(protocol_channel.IDOAppIngV3ReplyExchangeModel?)
  case appOperatePlanReply(protocol_channel.IDOAppOperatePlanReplyExchangeModel?)
  case appActivityDataReply(protocol_channel.IDOAppActivityDataV3ExchangeModel?)
  case appActivityHrReply(protocol_channel.IDOAppHrDataExchangeModel?)
  case appActivityGpsReply(protocol_channel.IDOAppGpsDataExchangeModel?)
}
@objc public enum IDOExchangeStatus : Swift.Int {
  case initial = 0
  case appStart = 1
  case appStartReply = 2
  case appEnd = 3
  case appEndReply = 4
  case appPause = 5
  case appPauseReply = 6
  case appRestore = 7
  case appRestoreReply = 8
  case appIng = 9
  case appIngReply = 10
  case getActivity = 11
  case getActivityReply = 12
  case getHr = 13
  case getHrReply = 14
  case appStartPlan = 15
  case appStartPlanReply = 16
  case appPausePlan = 17
  case appPausePlanReply = 18
  case appRestorePlan = 19
  case appRestorePlanReply = 20
  case appEndPlan = 21
  case appEndPlanReply = 22
  case appSwitchAction = 23
  case appSwitchActionReply = 24
  case appBlePause = 25
  case appBlePauseReply = 26
  case appBleRestore = 27
  case appBleRestoreReply = 28
  case appBleEnd = 29
  case appBleEndReply = 30
  case bleStart = 31
  case bleStartReply = 32
  case bleEnd = 33
  case bleEndReply = 34
  case blePause = 35
  case blePauseReply = 36
  case bleRestore = 37
  case bleRestoreReply = 38
  case bleIng = 39
  case bleIngReply = 40
  case bleStartPlan = 41
  case blePausePlan = 42
  case bleRestorePlan = 43
  case bleEndPlan = 44
  case bleSwitchAction = 45
  case bleOperatePlanReply = 46
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class IDOExchangeBaseModel : ObjectiveC.NSObject {
  @objc public var day: Swift.Int
  @objc public var hour: Swift.Int
  @objc public var minute: Swift.Int
  @objc public var second: Swift.Int
  @objc public var sportType: Swift.Int
  @objc public init(day: Swift.Int, hour: Swift.Int, minute: Swift.Int, second: Swift.Int, sportType: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOExchangeV2Model : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var operate: Swift.Int
  @objc public var targetValue: Swift.Int
  @objc public var targetType: Swift.Int
  @objc public var forceStart: Swift.Int
  @objc public var retCode: Swift.Int
  @objc public var calories: Swift.Int
  @objc public var distance: Swift.Int
  @objc public var durations: Swift.Int
  @objc public var step: Swift.Int
  @objc public var avgHr: Swift.Int
  @objc public var maxHr: Swift.Int
  @objc public var curHr: Swift.Int
  @objc public var hrSerial: Swift.Int
  @objc public var burnFatMins: Swift.Int
  @objc public var aerobicMins: Swift.Int
  @objc public var limitMins: Swift.Int
  @objc public var isSave: Swift.Bool
  @objc public var status: Swift.Int
  @objc public var interval: Swift.Int
  @objc public var hrValues: [Swift.Int]?
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, operate: Swift.Int, targetValue: Swift.Int, targetType: Swift.Int, forceStart: Swift.Int, retCode: Swift.Int, calories: Swift.Int, distance: Swift.Int, durations: Swift.Int, step: Swift.Int, avgHr: Swift.Int, maxHr: Swift.Int, curHr: Swift.Int, hrSerial: Swift.Int, burnFatMins: Swift.Int, aerobicMins: Swift.Int, limitMins: Swift.Int, isSave: Swift.Bool, status: Swift.Int, interval: Swift.Int, hrValues: [Swift.Int]? = nil)
  @objc deinit
}
@objc @objcMembers public class IDOExchangeV3Model : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var year: Swift.Int
  @objc public var month: Swift.Int
  @objc public var planType: Swift.Int
  @objc public var actionType: Swift.Int
  @objc public var version: Swift.Int
  @objc public var operate: Swift.Int
  @objc public var targetValue: Swift.Int
  @objc public var targetType: Swift.Int
  @objc public var forceStart: Swift.Int
  @objc public var retCode: Swift.Int
  @objc public var calories: Swift.Int
  @objc public var distance: Swift.Int
  @objc public var durations: Swift.Int
  @objc public var step: Swift.Int
  @objc public var swimPosture: Swift.Int
  @objc public var status: Swift.Int
  @objc public var signalFlag: Swift.Int
  @objc public var isSave: Swift.Bool
  @objc public var realTimeSpeed: Swift.Int
  @objc public var realTimePace: Swift.Int
  @objc public var interval: Swift.Int
  @objc public var hrCount: Swift.Int
  @objc public var burnFatMins: Swift.Int
  @objc public var aerobicMins: Swift.Int
  @objc public var limitMins: Swift.Int
  @objc public var hrValues: [Swift.Int]?
  @objc public var warmUpSecond: Swift.Int
  @objc public var anaeroicSecond: Swift.Int
  @objc public var fatBurnSecond: Swift.Int
  @objc public var aerobicSecond: Swift.Int
  @objc public var limitSecond: Swift.Int
  @objc public var avgHr: Swift.Int
  @objc public var maxHr: Swift.Int
  @objc public var curHr: Swift.Int
  @objc public var warmUpValue: Swift.Int
  @objc public var fatBurnValue: Swift.Int
  @objc public var aerobicValue: Swift.Int
  @objc public var limitValue: Swift.Int
  @objc public var anaerobicValue: Swift.Int
  @objc public var avgSpeed: Swift.Int
  @objc public var maxSpeed: Swift.Int
  @objc public var avgStepFrequency: Swift.Int
  @objc public var maxStepFrequency: Swift.Int
  @objc public var avgStepStride: Swift.Int
  @objc public var maxStepStride: Swift.Int
  @objc public var kmSpeed: Swift.Int
  @objc public var fastKmSpeed: Swift.Int
  @objc public var kmSpeedCount: Swift.Int
  @objc public var kmSpeeds: [Swift.Int]?
  @objc public var mileCount: Swift.Int
  @objc public var mileSpeeds: [Swift.Int]?
  @objc public var stepsFrequencyCount: Swift.Int
  @objc public var stepsFrequencys: [Swift.Int]?
  @objc public var trainingEffect: Swift.Int
  @objc public var anaerobicTrainingEffect: Swift.Int
  @objc public var vo2Max: Swift.Int
  @objc public var actionDataCount: Swift.Int
  @objc public var inClassCalories: Swift.Int
  @objc public var completionRate: Swift.Int
  @objc public var hrCompletionRate: Swift.Int
  @objc public var recoverTime: Swift.Int
  @objc public var avgWeekActivityTime: Swift.Int
  @objc public var grade: Swift.Int
  @objc public var actionData: [[Swift.String : Any]]?
  @objc public var trainingOffset: Swift.Int
  @objc public var countHour: Swift.Int
  @objc public var countMinute: Swift.Int
  @objc public var countSecond: Swift.Int
  @objc public var time: Swift.Int
  @objc public var lowHeart: Swift.Int
  @objc public var heightHeart: Swift.Int
  @objc public var paceSpeedCount: Swift.Int
  @objc public var paceSpeeds: [Swift.Int]?
  @objc public var realSpeedCount: Swift.Int
  @objc public var realSpeeds: [Swift.Int]?
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, year: Swift.Int, month: Swift.Int, planType: Swift.Int, actionType: Swift.Int, version: Swift.Int, operate: Swift.Int, targetValue: Swift.Int, targetType: Swift.Int, forceStart: Swift.Int, retCode: Swift.Int, calories: Swift.Int, distance: Swift.Int, durations: Swift.Int, step: Swift.Int, swimPosture: Swift.Int, status: Swift.Int, signalFlag: Swift.Int, isSave: Swift.Bool, realTimeSpeed: Swift.Int, realTimePace: Swift.Int, interval: Swift.Int, hrCount: Swift.Int, burnFatMins: Swift.Int, aerobicMins: Swift.Int, limitMins: Swift.Int, hrValues: [Swift.Int]? = nil, warmUpSecond: Swift.Int, anaeroicSecond: Swift.Int, fatBurnSecond: Swift.Int, aerobicSecond: Swift.Int, limitSecond: Swift.Int, avgHr: Swift.Int, maxHr: Swift.Int, curHr: Swift.Int, warmUpValue: Swift.Int, fatBurnValue: Swift.Int, aerobicValue: Swift.Int, limitValue: Swift.Int, anaerobicValue: Swift.Int, avgSpeed: Swift.Int, maxSpeed: Swift.Int, avgStepFrequency: Swift.Int, maxStepFrequency: Swift.Int, avgStepStride: Swift.Int, maxStepStride: Swift.Int, kmSpeed: Swift.Int, fastKmSpeed: Swift.Int, kmSpeedCount: Swift.Int, kmSpeeds: [Swift.Int]? = nil, mileCount: Swift.Int, mileSpeeds: [Swift.Int]? = nil, stepsFrequencyCount: Swift.Int, stepsFrequencys: [Swift.Int]? = nil, trainingEffect: Swift.Int, anaerobicTrainingEffect: Swift.Int, vo2Max: Swift.Int, actionDataCount: Swift.Int, inClassCalories: Swift.Int, completionRate: Swift.Int, hrCompletionRate: Swift.Int, recoverTime: Swift.Int, avgWeekActivityTime: Swift.Int, grade: Swift.Int, actionData: [[Swift.String : Any]]? = nil, trainingOffset: Swift.Int, countHour: Swift.Int, countMinute: Swift.Int, countSecond: Swift.Int, time: Swift.Int, lowHeart: Swift.Int, heightHeart: Swift.Int, paceSpeedCount: Swift.Int, paceSpeeds: [Swift.Int]? = nil, realSpeedCount: Swift.Int, realSpeeds: [Swift.Int]? = nil)
  @objc deinit
}
@objc @objcMembers public class IDOAppStartExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var targetType: Swift.Int
  @objc public var targetValue: Swift.Int
  @objc public var forceStart: Swift.Int
  @objc public var vo2max: Swift.Int
  @objc public var recoverTime: Swift.Int
  @objc public var avgWeekActivityTime: Swift.Int
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, targetType: Swift.Int = 0, targetValue: Swift.Int = 0, forceStart: Swift.Int, vo2max: Swift.Int = 0, recoverTime: Swift.Int = 0, avgWeekActivityTime: Swift.Int = 0)
  @objc deinit
}
@objc @objcMembers public class IDOAppStartReplyExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var retCode: Swift.Int
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, retCode: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOAppEndExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var duration: Swift.Int
  @objc public var calories: Swift.Int
  @objc public var distance: Swift.Int
  @objc public var isSave: Swift.Int
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, duration: Swift.Int, calories: Swift.Int, distance: Swift.Int, isSave: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOAppIngExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var duration: Swift.Int
  @objc public var calories: Swift.Int
  @objc public var distance: Swift.Int
  @objc public var status: Swift.Int
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, duration: Swift.Int, calories: Swift.Int, distance: Swift.Int, status: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOAppPauseReplyExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var errCode: Swift.Int
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, errCode: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOAppRestoreExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil)
  @objc deinit
}
@objc @objcMembers public class IDOAppRestoreReplyExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var errCode: Swift.Int
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, errCode: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOAppIngV3ExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var version: Swift.Int
  @objc public var signal: Swift.Int
  @objc public var distance: Swift.Int
  @objc public var speed: Swift.Int
  @objc public var duration: Swift.Int
  @objc public var calories: Swift.Int
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, version: Swift.Int, signal: Swift.Int, distance: Swift.Int, speed: Swift.Int, duration: Swift.Int, calories: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOAppIngV3ReplyExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var version: Swift.Int
  @objc public var heartRate: Swift.Int
  @objc public var distance: Swift.Int
  @objc public var duration: Swift.Int
  @objc public var realTimeCalories: Swift.Int
  @objc public var realTimeSpeed: Swift.Int
  @objc public var kmSpeed: Swift.Int
  @objc public var steps: Swift.Int
  @objc public var swimPosture: Swift.Int
  @objc public var status: Swift.Int
  @objc public var realTimeSpeedPace: Swift.Int
  @objc public var trainingEffect: Swift.Int
  @objc public var anaerobicTrainingEffect: Swift.Int
  @objc public var actionType: Swift.Int
  @objc public var countHour: Swift.Int
  @objc public var countMinute: Swift.Int
  @objc public var countSecond: Swift.Int
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, version: Swift.Int, heartRate: Swift.Int, distance: Swift.Int, duration: Swift.Int, realTimeCalories: Swift.Int, realTimeSpeed: Swift.Int, kmSpeed: Swift.Int, steps: Swift.Int, swimPosture: Swift.Int, status: Swift.Int, realTimeSpeedPace: Swift.Int, trainingEffect: Swift.Int, anaerobicTrainingEffect: Swift.Int, actionType: Swift.Int, countHour: Swift.Int, countMinute: Swift.Int, countSecond: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOAppActivityDataV3ExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var year: Swift.Int
  @objc public var month: Swift.Int
  @objc public var version: Swift.Int
  @objc public var hrInterval: Swift.Int
  @objc public var step: Swift.Int
  @objc public var durations: Swift.Int
  @objc public var calories: Swift.Int
  @objc public var distance: Swift.Int
  @objc public var burnFatMins: Swift.Int
  @objc public var aerobicMins: Swift.Int
  @objc public var limitMins: Swift.Int
  @objc public var warmUp: Swift.Int
  @objc public var fatBurning: Swift.Int
  @objc public var aerobicExercise: Swift.Int
  @objc public var anaerobicExercise: Swift.Int
  @objc public var extremeExercise: Swift.Int
  @objc public var warmUpTime: Swift.Int
  @objc public var fatBurningTime: Swift.Int
  @objc public var aerobicExerciseTime: Swift.Int
  @objc public var anaerobicExerciseTime: Swift.Int
  @objc public var extremeExerciseTime: Swift.Int
  @objc public var avgSpeed: Swift.Int
  @objc public var maxSpeed: Swift.Int
  @objc public var avgStepStride: Swift.Int
  @objc public var maxStepStride: Swift.Int
  @objc public var kmSpeed: Swift.Int
  @objc public var fastKmSpeed: Swift.Int
  @objc public var avgStepFrequency: Swift.Int
  @objc public var maxStepFrequency: Swift.Int
  @objc public var avgHrValue: Swift.Int
  @objc public var maxHrValue: Swift.Int
  @objc public var recoverTime: Swift.Int
  @objc public var vo2max: Swift.Int
  @objc public var trainingEffect: Swift.Int
  @objc public var grade: Swift.Int
  @objc public var stepsFrequencyCount: Swift.Int
  @objc public var miSpeedCount: Swift.Int
  @objc public var realSpeedCount: Swift.Int
  @objc public var paceSpeedCount: Swift.Int
  @objc public var kmSpeedCount: Swift.Int
  @objc public var actionDataCount: Swift.Int
  @objc public var inClassCalories: Swift.Int
  @objc public var completionRate: Swift.Int
  @objc public var hrCompletionRate: Swift.Int
  @objc public var kmSpeeds: [Swift.Int]?
  @objc public var stepsFrequency: [Swift.Int]?
  @objc public var itemsMiSpeed: [Swift.Int]?
  @objc public var itemRealSpeed: [Swift.Int]?
  @objc public var paceSpeedItems: [Swift.Int]?
  @objc public var actionData: [[Swift.String : Any]]?
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, year: Swift.Int, month: Swift.Int, version: Swift.Int, hrInterval: Swift.Int, step: Swift.Int, durations: Swift.Int, calories: Swift.Int, distance: Swift.Int, burnFatMins: Swift.Int, aerobicMins: Swift.Int, limitMins: Swift.Int, warmUp: Swift.Int, fatBurning: Swift.Int, aerobicExercise: Swift.Int, anaerobicExercise: Swift.Int, extremeExercise: Swift.Int, warmUpTime: Swift.Int, fatBurningTime: Swift.Int, aerobicExerciseTime: Swift.Int, anaerobicExerciseTime: Swift.Int, extremeExerciseTime: Swift.Int, avgSpeed: Swift.Int, maxSpeed: Swift.Int, avgStepStride: Swift.Int, maxStepStride: Swift.Int, kmSpeed: Swift.Int, fastKmSpeed: Swift.Int, avgStepFrequency: Swift.Int, maxStepFrequency: Swift.Int, avgHrValue: Swift.Int, maxHrValue: Swift.Int, recoverTime: Swift.Int, vo2max: Swift.Int, trainingEffect: Swift.Int, grade: Swift.Int, stepsFrequencyCount: Swift.Int, miSpeedCount: Swift.Int, realSpeedCount: Swift.Int, paceSpeedCount: Swift.Int, kmSpeedCount: Swift.Int, actionDataCount: Swift.Int, inClassCalories: Swift.Int, completionRate: Swift.Int, hrCompletionRate: Swift.Int, kmSpeeds: [Swift.Int]? = nil, stepsFrequency: [Swift.Int]? = nil, itemsMiSpeed: [Swift.Int]? = nil, itemRealSpeed: [Swift.Int]? = nil, paceSpeedItems: [Swift.Int]? = nil, actionData: [[Swift.String : Any]]? = nil)
  @objc deinit
}
@objc @objcMembers public class IDOAppBlePauseExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil)
  @objc deinit
}
@objc @objcMembers public class IDOAppBlePauseReplyExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var errCode: Swift.Int
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, errCode: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOAppBleRestoreExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil)
  @objc deinit
}
@objc @objcMembers public class IDOAppBleRestoreReplyExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var errCode: Swift.Int
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, errCode: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOAppBleEndExchangeModel : ObjectiveC.NSObject {
  @objc public var duration: Swift.Int
  @objc public var calories: Swift.Int
  @objc public var distance: Swift.Int
  @objc public var avgHr: Swift.Int
  @objc public var maxHr: Swift.Int
  @objc public var burnFatMins: Swift.Int
  @objc public var aerobicMins: Swift.Int
  @objc public var limitMins: Swift.Int
  @objc public var isSave: Swift.Int
  @objc public init(duration: Swift.Int, calories: Swift.Int, distance: Swift.Int, avgHr: Swift.Int, maxHr: Swift.Int, burnFatMins: Swift.Int, aerobicMins: Swift.Int, limitMins: Swift.Int, isSave: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOAppBleEndReplyExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var errCode: Swift.Int
  @objc public var duration: Swift.Int
  @objc public var calories: Swift.Int
  @objc public var distance: Swift.Int
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, errCode: Swift.Int, duration: Swift.Int, calories: Swift.Int, distance: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOBleStartExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var operate: Swift.Int
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, operate: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOBleIngExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var distance: Swift.Int
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, distance: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOBleEndExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil)
  @objc deinit
}
@objc @objcMembers public class IDOBlePauseExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil)
  @objc deinit
}
@objc @objcMembers public class IDOBleRestoreExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil)
  @objc deinit
}
@objc @objcMembers public class IDOBleStartReplyExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var operate: Swift.Int
  @objc public var retCode: Swift.Int
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, operate: Swift.Int, retCode: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOBleIngReplyExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var distance: Swift.Int
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, distance: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOBleEndReplyExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var retCode: Swift.Int
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, retCode: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOBlePauseReplyExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var retCode: Swift.Int
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, retCode: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOBleRestoreReplyExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var retCode: Swift.Int
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, retCode: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOAppOperatePlanExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var operate: Swift.Int
  @objc public var trainingOffset: Swift.Int
  @objc public var planType: Swift.Int
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, operate: Swift.Int, trainingOffset: Swift.Int, planType: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOAppOperatePlanReplyExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var planType: Swift.Int
  @objc public var operate: Swift.Int
  @objc public var actionType: Swift.Int
  @objc public var errorCode: Swift.Int
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, planType: Swift.Int, operate: Swift.Int, actionType: Swift.Int, errorCode: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOBleOperatePlanExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var operate: Swift.Int
  @objc public var planType: Swift.Int
  @objc public var actionType: Swift.Int
  @objc public var errorCode: Swift.Int
  @objc public var trainingYear: Swift.Int
  @objc public var trainingMonth: Swift.Int
  @objc public var trainingDay: Swift.Int
  @objc public var time: Swift.Int
  @objc public var lowHeart: Swift.Int
  @objc public var heightHeart: Swift.Int
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, operate: Swift.Int, planType: Swift.Int, actionType: Swift.Int, errorCode: Swift.Int, trainingYear: Swift.Int, trainingMonth: Swift.Int, trainingDay: Swift.Int, time: Swift.Int, lowHeart: Swift.Int, heightHeart: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOBleOperatePlanReplyExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var operate: Swift.Int
  @objc public var planType: Swift.Int
  @objc public var actionType: Swift.Int
  @objc public var errorCode: Swift.Int
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, operate: Swift.Int, planType: Swift.Int, actionType: Swift.Int, errorCode: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class IDOAppPauseExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel
  @objc public var pauseHour: Swift.Int
  @objc public var pauseMinute: Swift.Int
  @objc public var pauseSecond: Swift.Int
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel)
  @objc deinit
}
@objc @objcMembers public class IDOAppIngReplyExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var calories: Swift.Int
  @objc public var distance: Swift.Int
  @objc public var status: Swift.Int
  @objc public var step: Swift.Int
  @objc public var currentHr: Swift.Int
  @objc public var interval: Swift.Int
  @objc public var hrSerial: Swift.Int
  @objc public var hrJson: [Swift.Int]?
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, calories: Swift.Int, distance: Swift.Int, status: Swift.Int, step: Swift.Int, currentHr: Swift.Int, interval: Swift.Int, hrSerial: Swift.Int, hrJson: [Swift.Int]? = nil)
  @objc deinit
}
@objc @objcMembers public class IDOAppHrDataExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var version: Swift.Int
  @objc public var heartRateHistoryLen: Swift.Int
  @objc public var interval: Swift.Int
  @objc public var heartRates: [Swift.Int]?
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, version: Swift.Int, heartRateHistoryLen: Swift.Int, interval: Swift.Int, heartRates: [Swift.Int]? = nil)
  @objc deinit
}
@objc @objcMembers public class IDOAppGpsDataExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var version: Swift.Int
  @objc public var intervalSecond: Swift.Int
  @objc public var gpsCount: Swift.Int
  @objc public var gpsData: [[Swift.String : Any]]?
  @objc public init(baseModel: protocol_channel.IDOExchangeBaseModel? = nil, version: Swift.Int, intervalSecond: Swift.Int, gpsCount: Swift.Int, gpsData: [[Swift.String : Any]]? = nil)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class IDOAppEndReplyExchangeModel : ObjectiveC.NSObject {
  @objc public var baseModel: protocol_channel.IDOExchangeBaseModel?
  @objc public var errorCode: Swift.Int
  @objc public var calories: Swift.Int
  @objc public var distance: Swift.Int
  @objc public var step: Swift.Int
  @objc public var avgHr: Swift.Int
  @objc public var maxHr: Swift.Int
  @objc public var burnFatMins: Swift.Int
  @objc public var aerobicMins: Swift.Int
  @objc public var limitMins: Swift.Int
  @objc deinit
}
public typealias BlockLogProgress = (_ progress: Swift.Double) -> Swift.Void
@objc public enum IDODeviceLogType : Swift.Int {
  case initial = 0
  case reboot = 1
  case general = 2
  case reset = 3
  case hardware = 4
  case algorithm = 5
  case restart = 6
  case battery = 7
  case heat = 8
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol IDOExchangeDataOCDelegate : ObjectiveC.NSObjectProtocol {
  @objc func appListenBleExec(model: ObjectiveC.NSObject)
  @objc func appListenAppExec(model: ObjectiveC.NSObject)
  @objc func exchangeV2Data(model: protocol_channel.IDOExchangeV2Model)
  @objc func exchangeV3Data(model: protocol_channel.IDOExchangeV3Model)
}
public typealias BlockFileTransStatus = (_ currentIndex: Swift.Int, _ status: protocol_channel.IDOTransStatus, _ errorCode: Swift.Int, _ finishingTime: Swift.Int) -> Swift.Void
public typealias BlockFileTransProgress = (_ currentIndex: Swift.Int, _ totalCount: Swift.Int, _ currentProgress: Swift.Float, _ totalProgress: Swift.Float) -> Swift.Void
@objc public enum IDOTransType : Swift.Int {
  case fw = 0
  case fzbin = 1
  case bin = 2
  case lang = 3
  case bt = 4
  case iwfLz = 5
  case watch = 6
  case wallpaperZ = 7
  case ml = 8
  case onlineUbx = 9
  case offlineUbx = 10
  case mp3 = 11
  case msg = 12
  case sport = 13
  case sports = 14
  case epo = 15
  case gps = 16
  case bpbin = 17
  case voice = 18
  case ton = 19
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IDOTransStatus : Swift.Int {
  case none = 0
  case invalid = 1
  case notExists = 2
  case busy = 3
  case config = 4
  case beforeOpt = 5
  case trans = 6
  case finished = 7
  case onFastSynchronizing = 8
  case error = 9
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class IDOTransBaseModel : ObjectiveC.NSObject {
  @objc final public let fileType: protocol_channel.IDOTransType
  @objc final public let filePath: Swift.String
  @objc final public let fileName: Swift.String
  @objc public var fileSize: Swift.Int
  @objc public init(fileType: protocol_channel.IDOTransType, filePath: Swift.String, fileName: Swift.String, fileSize: Swift.Int = 0)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class IDOTransNormalModel : protocol_channel.IDOTransBaseModel {
  @objc override public init(fileType: protocol_channel.IDOTransType, filePath: Swift.String, fileName: Swift.String, fileSize: Swift.Int = 0)
  @objc deinit
}
@objc @objcMembers public class IDOTransMessageModel : protocol_channel.IDOTransBaseModel {
  @objc final public let evtType: Swift.Int
  @objc final public let packName: Swift.String
  @objc public init(filePath: Swift.String, fileName: Swift.String, fileSize: Swift.Int = 0, evtType: Swift.Int, packName: Swift.String)
  @objc deinit
}
@objc @objcMembers public class IDOTransMusicModel : protocol_channel.IDOTransBaseModel {
  @objc final public let musicId: Swift.Int
  @objc final public let singerName: Swift.String?
  @objc final public let useSpp: Swift.Bool
  @objc public init(filePath: Swift.String!, fileName: Swift.String, fileSize: Swift.Int = 0, musicId: Swift.Int, singerName: Swift.String? = nil)
  @objc deinit
}
@objc @objcMembers public class IDOTransSportModel : protocol_channel.IDOTransBaseModel {
  @objc final public let sportType: Swift.Int
  @objc final public let iconType: Swift.Int
  @objc final public let isSports: Swift.Bool
  @objc public init(filePath: Swift.String, fileName: Swift.String, fileSize: Swift.Int = 0, sportType: Swift.Int, iconType: Swift.Int, isSports: Swift.Bool)
  @objc deinit
}
@objc @objcMembers public class IDOActivitySwitchModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var errCode: Swift.Int
  @objc public var autoIdentifySportWalk: Swift.Int
  @objc public var autoIdentifySportRun: Swift.Int
  @objc public var autoIdentifySportBicycle: Swift.Int
  @objc public var autoPauseOnOff: Swift.Int
  @objc public var autoEndRemindOnOffOnOff: Swift.Int
  @objc public var autoIdentifySportElliptical: Swift.Int
  @objc public var autoIdentifySportRowing: Swift.Int
  @objc public var autoIdentifySportSwim: Swift.Int
  @objc public var autoIdentifySportSmartRope: Swift.Int
  @objc public init(errCode: Swift.Int, autoIdentifySportWalk: Swift.Int, autoIdentifySportRun: Swift.Int, autoIdentifySportBicycle: Swift.Int, autoPauseOnOff: Swift.Int, autoEndRemindOnOffOnOff: Swift.Int, autoIdentifySportElliptical: Swift.Int, autoIdentifySportRowing: Swift.Int, autoIdentifySportSwim: Swift.Int, autoIdentifySportSmartRope: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOActivitySwitchParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var autoIdentifySportWalk: Swift.Int
  @objc public var autoIdentifySportRun: Swift.Int
  @objc public var autoIdentifySportBicycle: Swift.Int
  @objc public var autoPauseOnOff: Swift.Int
  @objc public var autoEndRemindOnOffOnOff: Swift.Int
  @objc public var autoIdentifySportElliptical: Swift.Int
  @objc public var autoIdentifySportRowing: Swift.Int
  @objc public var autoIdentifySportSwim: Swift.Int
  @objc public var autoIdentifySportSmartRope: Swift.Int
  @objc public init(autoIdentifySportWalk: Swift.Int, autoIdentifySportRun: Swift.Int, autoIdentifySportBicycle: Swift.Int, autoPauseOnOff: Swift.Int, autoEndRemindOnOffOnOff: Swift.Int, autoIdentifySportElliptical: Swift.Int, autoIdentifySportRowing: Swift.Int, autoIdentifySportSwim: Swift.Int, autoIdentifySportSmartRope: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class IDOAlarmModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  public var items: [protocol_channel.IDOAlarmItem]
  public init(items: [protocol_channel.IDOAlarmItem])
  public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class IDOAlarmItem : ObjectiveC.NSObject, Swift.Codable {
  public var alarmID: Swift.Int
  public var delayMin: Swift.Int
  public var hour: Swift.Int
  public var minute: Swift.Int
  public var name: Swift.String
  public var repeats: Swift.Set<protocol_channel.IDOWeek>
  public var isOpen: Swift.Bool
  public var repeatTimes: Swift.Int
  public var shockOnOff: Swift.Int
  public var status: protocol_channel.IDOAlarmStatus
  public var tsnoozeDuration: Swift.Int
  public var type: protocol_channel.IDOAlarmType
  public init(alarmID: Swift.Int, delayMin: Swift.Int, hour: Swift.Int, minute: Swift.Int, name: Swift.String, repeats: Swift.Set<protocol_channel.IDOWeek>, isOpen: Swift.Bool, repeatTimes: Swift.Int, shockOnOff: Swift.Int, status: protocol_channel.IDOAlarmStatus, tsnoozeDuration: Swift.Int, type: protocol_channel.IDOAlarmType)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc public enum IDOAlarmType : Swift.Int {
  case wakeUp = 0x00
  case sleep = 0x01
  case exercise = 0x02
  case medication = 0x03
  case date = 0x04
  case gathering = 0x05
  case meeting = 0x06
  case other = 0x07
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IDOWeek : Swift.Int {
  case monday = 0, tuesday, wednesday, thursday, friday, saturday, sunday
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IDOAlarmStatus : Swift.Int {
  case invalid = -1
  case hidden = 0
  case displayed = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class IDOAlarmModelObjc : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var items: [protocol_channel.IDOAlarmItemObjc]
  @objc public init(items: [protocol_channel.IDOAlarmItemObjc])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOAlarmItemObjc : ObjectiveC.NSObject, Swift.Codable {
  @objc public var alarmID: Swift.Int
  @objc public var delayMin: Swift.Int
  @objc public var hour: Swift.Int
  @objc public var minute: Swift.Int
  @objc public var name: Swift.String
  @objc public var repeats: [protocol_channel.IDOWeekObjc]
  @objc public var isOpen: Swift.Bool
  @objc public var repeatTimes: Swift.Int
  @objc public var shockOnOff: Swift.Int
  @objc public var status: protocol_channel.IDOAlarmStatus
  @objc public var tsnoozeDuration: Swift.Int
  @objc public var type: protocol_channel.IDOAlarmType
  @objc public init(alarmID: Swift.Int, delayMin: Swift.Int, hour: Swift.Int, minute: Swift.Int, name: Swift.String, repeats: [protocol_channel.IDOWeekObjc], isOpen: Swift.Bool, repeatTimes: Swift.Int, shockOnOff: Swift.Int, status: protocol_channel.IDOAlarmStatus, tsnoozeDuration: Swift.Int, type: protocol_channel.IDOAlarmType)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @objcMembers public class IDOWeekObjc : ObjectiveC.NSObject {
  @objc public var week: protocol_channel.IDOWeek
  @objc public init(week: protocol_channel.IDOWeek)
  @objc deinit
}
@objc public protocol IDOAlexaInterface {
  @objc func onNetworkChanged(hasNetwork: Swift.Bool)
  @objc func setupAlexa(delegate: any protocol_channel.IDOAlexaDelegate, clientId: Swift.String)
  @objc var isLogin: Swift.Bool { get }
  @objc func onLoginStateChanged(handle: @escaping (protocol_channel.IDOAlexaLoginState) -> Swift.Void)
  @objc @discardableResult
  func authorizeRequest(productId: Swift.String, handle: @escaping (_ verificationUri: Swift.String, _ pairCode: Swift.String) -> Swift.Void, completion: @escaping (_ rs: protocol_channel.IDOAlexaAuthorizeResult) -> Swift.Void) -> any protocol_channel.IDOCancellable
  @objc func logout()
}
@objc @objcMembers public class IDOAllHealthSwitchStateModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var heartMode: Swift.Int
  @objc public var pressureMode: Swift.Int
  @objc public var spo2Mode: Swift.Int
  @objc public var scienceMode: Swift.Int
  @objc public var temperatureMode: Swift.Int
  @objc public var noiseMode: Swift.Int
  @objc public var menstrualMode: Swift.Int
  @objc public var walkMode: Swift.Int
  @objc public var handwashingMode: Swift.Int
  @objc public var respirRateState: Swift.Int
  @objc public var bodyPowerState: Swift.Int
  @objc public var drinkwaterMode: Swift.Int
  @objc public var heartmodeNotifyFlag: Swift.Int
  @objc public var pressureNotifyFlag: Swift.Int
  @objc public var spo2NotifyFlag: Swift.Int
  @objc public var menstrualNotifyFlag: Swift.Int
  @objc public var guidanceNotifyFlag: Swift.Int
  @objc public var reminderNotifyFlag: Swift.Int
  @objc public init(heartMode: Swift.Int, pressureMode: Swift.Int, spo2Mode: Swift.Int, scienceMode: Swift.Int, temperatureMode: Swift.Int, noiseMode: Swift.Int, menstrualMode: Swift.Int, walkMode: Swift.Int, handwashingMode: Swift.Int, respirRateState: Swift.Int, bodyPowerState: Swift.Int, drinkwaterMode: Swift.Int, heartmodeNotifyFlag: Swift.Int, pressureNotifyFlag: Swift.Int, spo2NotifyFlag: Swift.Int, menstrualNotifyFlag: Swift.Int, guidanceNotifyFlag: Swift.Int, reminderNotifyFlag: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol IDOBaseModel : Swift.Decodable, Swift.Encodable {
  func toJsonString() -> Swift.String?
}
@objc @objcMembers public class IDOBatteryInfoModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var type: Swift.Int
  @objc public var voltage: Swift.Int
  @objc public var status: Swift.Int
  @objc public var level: Swift.Int
  @objc public var lastChargingYear: Swift.Int
  @objc public var lastChargingMonth: Swift.Int
  @objc public var lastChargingDay: Swift.Int
  @objc public var lastChargingHour: Swift.Int
  @objc public var lastChargingMinute: Swift.Int
  @objc public var lastChargingSecond: Swift.Int
  @objc public var mode: Swift.Int
  @objc public init(type: Swift.Int, voltage: Swift.Int, status: Swift.Int, level: Swift.Int, lastChargingYear: Swift.Int, lastChargingMonth: Swift.Int, lastChargingDay: Swift.Int, lastChargingHour: Swift.Int, lastChargingMinute: Swift.Int, lastChargingSecond: Swift.Int, mode: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOBleBeepModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var errCode: Swift.Int
  @objc public var items: [protocol_channel.IDOBleBeepItem]?
  @objc public init(errCode: Swift.Int, items: [protocol_channel.IDOBleBeepItem])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOBleBeepItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var name: Swift.String
  @objc public init(name: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol IDOBleInterface {
  @objc func addBleDelegate(api: (any protocol_channel.IDOBleDelegate)?)
  @objc func addDfuDelegate(api: (any protocol_channel.IDODfuDelegate)?)
  @objc func startScan(macAddress: Swift.String?, completion: @escaping ([protocol_channel.IDODeviceModel]?) -> Swift.Void)
  @objc func scanFilter(deviceName: [Swift.String]?, deviceID: [Swift.Int]?, macAddress: [Swift.String]?, uuid: [Swift.String]?)
  @objc func stopScan()
  @objc func connect(device: protocol_channel.IDODeviceModel?)
  @objc func autoConnect(device: protocol_channel.IDODeviceModel?)
  @objc func cancelConnect(macAddress: Swift.String?, completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc func getBluetoothState(completion: @escaping (protocol_channel.IDOBluetoothStateModel) -> Swift.Void)
  @objc func getDeviceState(device: protocol_channel.IDODeviceModel?, completion: @escaping (protocol_channel.IDODeviceStateModel) -> Swift.Void)
  @objc func writeData(data: Foundation.Data, device: protocol_channel.IDODeviceModel, type: Swift.Int, platform: Swift.Int, completion: @escaping (protocol_channel.IDOWriteStateModel) -> Swift.Void)
  @objc func setBtPair(device: protocol_channel.IDODeviceModel)
  @objc func cancelPair(device: protocol_channel.IDODeviceModel?)
  @objc func connectSPP(btMacAddress: Swift.String)
  @objc func disconnectSPP(btMacAddress: Swift.String)
  @objc func startNordicDFU(config: protocol_channel.IDODfuConfig)
  @objc func exportLog(completion: @escaping (Swift.String?) -> Swift.Void)
}
@objc public protocol IDODfuDelegate : ObjectiveC.NSObjectProtocol {
  @objc func dfuComplete()
  @objc func dfuError(error: Swift.String)
  @objc func dfuProgress(progress: Swift.Int)
}
@objc public protocol IDOBleDelegate : ObjectiveC.NSObjectProtocol {
  @objc func scanResult(list: [protocol_channel.IDODeviceModel]?)
  @objc func bluetoothState(state: protocol_channel.IDOBluetoothStateModel)
  @objc func deviceState(state: protocol_channel.IDODeviceStateModel)
  @objc func receiveData(data: protocol_channel.IDOReceiveData)
}
@objc @objcMembers public class IDOBleVoiceParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var totalVolume: Swift.Int
  @objc public var currentVolume: Swift.Int
  @objc public init(totalVolume: Swift.Int, currentVolume: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOBpAlgVersionModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var bpVersion1: Swift.Int
  @objc public var bpVersion2: Swift.Int
  @objc public var bpVersion3: Swift.Int
  @objc public init(bpVersion1: Swift.Int, bpVersion2: Swift.Int, bpVersion3: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOBpCalControlModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var errorCode: Swift.Int
  @objc public var operate: Swift.Int
  @objc public var sbpPpgFeatureNum: Swift.Int
  @objc public var dbpPpgFeatureNum: Swift.Int
  @objc public var sbpPpgFeatureItems: [Swift.Int]
  @objc public var dbpPpgFeatureItems: [Swift.Int]
  @objc public init(errorCode: Swift.Int, operate: Swift.Int, sbpPpgFeatureNum: Swift.Int, dbpPpgFeatureNum: Swift.Int, sbpPpgFeatureItems: [Swift.Int], dbpPpgFeatureItems: [Swift.Int])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOBpCalibrationModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var retCode: Swift.Int
  @objc public init(retCode: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOBpCalibrationParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var flag: Swift.Int
  @objc public var diastolic: Swift.Int
  @objc public var systolic: Swift.Int
  @objc public init(flag: Swift.Int, diastolic: Swift.Int, systolic: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOBpMeasurementModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var status: Swift.Int
  @objc public var systolicBp: Swift.Int
  @objc public var diastolicBp: Swift.Int
  @objc public init(status: Swift.Int, systolicBp: Swift.Int, diastolicBp: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOBpMeasurementParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var flag: Swift.Int
  @objc public init(flag: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol IDOBridgeInterface {
  @objc func setupBridge(delegate: any protocol_channel.IDOBridgeDelegate, logType: protocol_channel.IDOLogType)
}
@objc public protocol IDOBridgeDelegate : ObjectiveC.NSObjectProtocol {
  @objc func listenStatusNotification(status: protocol_channel.IDOStatusNotification)
  @objc func listenDeviceNotification(model: protocol_channel.IDODeviceNotificationModel)
  @objc func checkDeviceBindState(macAddress: Swift.String) -> Swift.Bool
}
@objc @objcMembers public class IDOBtNoticeModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var btConnectStates: Swift.Int
  @objc public var btPairStates: Swift.Int
  @objc public var a2dpConnectStates: Swift.Int
  @objc public var hfpConnectStates: Swift.Int
  @objc public init(btConnectStates: Swift.Int, btPairStates: Swift.Int, a2dpConnectStates: Swift.Int, hfpConnectStates: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOCmdGetResponseModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var onOff: Swift.Int
  @objc public init(onOff: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public typealias IDOCmdResponse<U> = (Swift.Result<U?, protocol_channel.CmdError>) -> ()
public protocol IDOCmdProtocol {
  associatedtype DataType
  @discardableResult
  func send(completion: @escaping protocol_channel.IDOCmdResponse<Self.DataType>) -> any protocol_channel.IDOCancellable
}
@objc public protocol IDOCmdInterface {
  @objc var isBinding: Swift.Bool { get }
  @objc func bind(osVersion: Swift.Int, onDeviceInfo: ((any protocol_channel.IDODeviceInterface) -> Swift.Void)?, onFuncTable: ((any protocol_channel.IDOFuncTableInterface) -> Swift.Void)?, completion: @escaping (protocol_channel.IDOBindStatus) -> Swift.Void)
  @objc func cancelBind()
  @objc func appMarkBindResult(success: Swift.Bool)
  @objc func unbind(macAddress: Swift.String, isForceRemove: Swift.Bool, completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc func setAuthCode(code: Swift.String, osVersion: Swift.Int, completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc func setV2CallEvt(contactText: Swift.String, phoneNumber: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc func setV2NoticeEvt(type: protocol_channel.NoticeMessageType, contactText: Swift.String, phoneNumber: Swift.String, dataText: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc func stopV2CallEvt(completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc func missedV2MissedCallEvt(completion: @escaping (Swift.Bool) -> Swift.Void)
}
@objc @objcMembers public class IDOCmdOTAResponseModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var errFlag: Swift.Int
  @objc public init(errFlag: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOCmdSetResponseModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var isSuccess: Swift.Int
  @objc public init(isSuccess: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOContactReviseTimeModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var result: Swift.Int
  @objc public init(result: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol IDODataExchangeOCInterface {
  @objc var supportV3ActivityExchange: Swift.Bool { get }
  @objc var status: protocol_channel.IDOExchangeStatus { get }
  @objc func addExchange(delegate: (any protocol_channel.IDOExchangeDataOCDelegate)?)
  @objc func appExec(model: ObjectiveC.NSObject)
  @objc func appReplyExec(model: ObjectiveC.NSObject)
  @objc func getLastActivityData()
  @objc func getActivityHrData()
  @objc func getActivityGpsData()
}
@objc @objcMembers public class IDODataTranConfigModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var errCode: Swift.Int
  @objc public var type: Swift.Int
  @objc public var evtType: Swift.Int
  @objc public var sportType: Swift.Int
  @objc public var iconWidth: Swift.Int
  @objc public var iconHeight: Swift.Int
  @objc public var format: Swift.Int
  @objc public var blockSize: Swift.Int
  @objc public var bigSportsNum: Swift.Int
  @objc public var msgNum: Swift.Int
  @objc public var smallSportsAndAnimationNum: Swift.Int
  @objc public var mediumNum: Swift.Int
  @objc public init(errCode: Swift.Int, type: Swift.Int, evtType: Swift.Int, sportType: Swift.Int, iconWidth: Swift.Int, iconHeight: Swift.Int, format: Swift.Int, blockSize: Swift.Int, bigSportsNum: Swift.Int, msgNum: Swift.Int, smallSportsAndAnimationNum: Swift.Int, mediumNum: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDODateTimeParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var year: Swift.Int, monuth: Swift.Int, day: Swift.Int, hour: Swift.Int
  @objc public var minute: Swift.Int, second: Swift.Int
  @objc public var week: Swift.Int
  @objc public var timeZone: Swift.Int
  @objc public init(year: Swift.Int, monuth: Swift.Int, day: Swift.Int, hour: Swift.Int, minute: Swift.Int, second: Swift.Int, week: Swift.Int, timeZone: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDODefaultMessageConfigParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var operate: Swift.Int
  @objc public var items: [protocol_channel.IDODefaultMessageItem]?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case operate
    case itemsNum
    case items
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  @objc public init(operate: Swift.Int, items: [protocol_channel.IDODefaultMessageItem]? = nil)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDODefaultMessageConfigModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var operate: Swift.Int
  @objc public var errorCode: Swift.Int
  public var supportMaxAllItemsNum: Swift.Int?
  public var supportMaxPackNameLen: Swift.Int?
  @objc public var items: [protocol_channel.IDODefaultMessageItem]?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case operate
    case errorCode
    case supportMaxAllItemsNum
    case supportMaxPackNameLen
    case items
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(operate: Swift.Int, errorCode: Swift.Int, supportMaxAllItemsNum: Swift.Int? = nil, supportMaxPackNameLen: Swift.Int? = nil, items: [protocol_channel.IDODefaultMessageItem]? = nil)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDODefaultMessageItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var packageName: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case packageName
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  @objc public init(packageName: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDODefaultSportTypeModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var defaultShowNum: Swift.Int
  @objc public var minShowNum: Swift.Int
  @objc public var maxShowNum: Swift.Int
  @objc public var isSupportsSort: Swift.Int
  @objc public var sportTypes: [protocol_channel.IDOSportTypeItem]
  @objc public init(defaultShowNum: Swift.Int, minShowNum: Swift.Int, maxShowNum: Swift.Int, isSupportsSort: Swift.Int, sportTypes: [protocol_channel.IDOSportTypeItem])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOSportTypeItem : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var type: protocol_channel.IDOSportType
  @objc public init(type: protocol_channel.IDOSportType)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol IDODeviceInterface {
  @objc var deviceMode: Swift.Int { get }
  @objc var battStatus: Swift.Int { get }
  @objc var battLevel: Swift.Int { get }
  @objc var rebootFlag: Swift.Int { get }
  @objc var bindState: Swift.Int { get }
  @objc var bindType: Swift.Int { get }
  @objc var bindTimeout: Swift.Int { get }
  @objc var platform: Swift.Int { get }
  @objc var deviceShapeType: Swift.Int { get }
  @objc var deviceType: Swift.Int { get }
  @objc var dialMainVersion: Swift.Int { get }
  @objc var showBindChoiceUi: Swift.Int { get }
  @objc var deviceId: Swift.Int { get }
  @objc var firmwareVersion: Swift.Int { get }
  @objc var macAddress: Swift.String { get }
  @objc var macAddressFull: Swift.String { get }
  @objc var deviceName: Swift.String { get }
  @objc var otaMode: Swift.Bool { get }
  @objc var uuid: Swift.String { get }
  @objc var macAddressBt: Swift.String { get }
  @objc var sn: Swift.String? { get }
  @objc var btName: Swift.String? { get }
  @objc var gpsPlatform: Swift.Int { get }
  @objc var fwVersion1: Swift.Int { get }
  @objc var fwVersion2: Swift.Int { get }
  @objc var fwVersion3: Swift.Int { get }
  @objc var fwBtFlag: Swift.Int { get }
  @objc var fwBtVersion1: Swift.Int { get }
  @objc var fwBtVersion2: Swift.Int { get }
  @objc var fwBtVersion3: Swift.Int { get }
  @objc var fwBtMatchVersion1: Swift.Int { get }
  @objc var fwBtMatchVersion2: Swift.Int { get }
  @objc var fwBtMatchVersion3: Swift.Int { get }
  @objc func printProperties() -> Swift.String?
  @objc func refreshDeviceInfo(forced: Swift.Bool, completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc func refreshFirmwareVersion(forced: Swift.Bool, completion: @escaping (Swift.Bool) -> Swift.Void)
}
@objc public protocol IDODeviceLogInterface {
  @objc var getLogIng: Swift.Bool { get }
  @objc var logDirPath: Swift.String { get }
  @objc func startGet(types: [protocol_channel.IDODeviceLogTypeClass], timeOut: Swift.Int, progress: @escaping protocol_channel.BlockLogProgress, completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc func cancel(completion: @escaping () -> Swift.Void)
}
@objc @objcMembers public class IDODeviceLogTypeClass : ObjectiveC.NSObject {
  @objc public init(logType: protocol_channel.IDODeviceLogType)
  @objc deinit
}
@objc @objcMembers public class IDODeviceLogStateModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var type: Swift.Int
  @objc public var errCode: Swift.Int
  @objc public init(type: Swift.Int, errCode: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDODisplayModeParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var mode: Swift.Int
  @objc public init(mode: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDODownloadLanguageModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var useLang: Swift.Int
  @objc public var defaultLang: Swift.Int
  @objc public var fixedLang: Swift.Int
  @objc public var maxStorageLang: Swift.Int
  @objc public var langArray: [protocol_channel.IDODownloadLanguageType]
  @objc public init(useLang: Swift.Int, defaultLang: Swift.Int, fixedLang: Swift.Int, maxStorageLang: Swift.Int, langArray: [protocol_channel.IDODownloadLanguageType])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDODownloadLanguageType : ObjectiveC.NSObject, Swift.Codable {
  @objc public var type: Swift.Int
  @objc public init(type: Swift.Int)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class IDODrinkWaterRemindModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  public var onOff: Swift.Int
  public var startHour: Swift.Int
  public var startMinute: Swift.Int
  public var endHour: Swift.Int
  public var endMinute: Swift.Int
  public var repeats: Swift.Set<protocol_channel.IDOWeek>
  public var interval: Swift.Int
  public var notifyFlag: Swift.Int
  public var doNotDisturbOnOff: Swift.Int
  public var noDisturbStartHour: Swift.Int
  public var noDisturbStartMinute: Swift.Int
  public var noDisturbEndHour: Swift.Int
  public var noDisturbEndMinute: Swift.Int
  public init(onOff: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, repeats: Swift.Set<protocol_channel.IDOWeek>, interval: Swift.Int, notifyFlag: Swift.Int = 0, doNotDisturbOnOff: Swift.Int = 0, noDisturbStartHour: Swift.Int = 0, noDisturbStartMinute: Swift.Int = 0, noDisturbEndHour: Swift.Int = 0, noDisturbEndMinute: Swift.Int = 0)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func toJsonString() -> Swift.String?
  @objc deinit
}
@objc @objcMembers public class IDODrinkWaterRemindModelObjc : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var onOff: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public var repeats: [protocol_channel.IDOWeekObjc]
  @objc public var interval: Swift.Int
  @objc public var notifyFlag: Swift.Int
  @objc public var doNotDisturbOnOff: Swift.Int
  @objc public var noDisturbStartHour: Swift.Int
  @objc public var noDisturbStartMinute: Swift.Int
  @objc public var noDisturbEndHour: Swift.Int
  @objc public var noDisturbEndMinute: Swift.Int
  @objc public init(onOff: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, repeats: [protocol_channel.IDOWeekObjc], interval: Swift.Int, notifyFlag: Swift.Int = 0, doNotDisturbOnOff: Swift.Int = 0, noDisturbStartHour: Swift.Int = 0, noDisturbStartMinute: Swift.Int = 0, noDisturbEndHour: Swift.Int = 0, noDisturbEndMinute: Swift.Int = 0)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
}
@objc @objcMembers public class IDOErrorRecordModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var type: Swift.Int
  @objc public var resetFlag: Swift.Int
  @objc public var hwError: Swift.Int
  @objc public init(type: Swift.Int, resetFlag: Swift.Int, hwError: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol IDOFileTransferInterface {
  @objc var isTransmitting: Swift.Bool { get }
  @objc var transFileType: protocol_channel.IDOTransTypeClass? { get }
  @objc @discardableResult
  func transferFiles(fileItems: [protocol_channel.IDOTransBaseModel], cancelPrevTranTask: Swift.Bool, transProgress: @escaping protocol_channel.BlockFileTransProgress, transStatus: @escaping protocol_channel.BlockFileTransStatus, completion: @escaping ([Swift.Bool]) -> Swift.Void) -> (any protocol_channel.IDOCancellable)?
  @objc func iwfFileSize(filePath: Swift.String, type: Swift.Int64, completion: @escaping (Swift.Int64) -> Swift.Void)
}
@objc @objcMembers public class IDOTransTypeClass : ObjectiveC.NSObject {
  @objc public init(type: protocol_channel.IDOTransType)
  @objc deinit
}
@objc public class IDOFitnessGuidanceParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  public var mode: Swift.Int
  public var startHour: Swift.Int
  public var startMinute: Swift.Int
  public var endHour: Swift.Int
  public var endMinute: Swift.Int
  public var notifyFlag: Swift.Int
  public var goMode: Swift.Int
  public var repeats: Swift.Set<protocol_channel.IDOWeek>
  public var targetSteps: Swift.Int
  public init(mode: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, notifyFlag: Swift.Int, goMode: Swift.Int, repeats: Swift.Set<protocol_channel.IDOWeek>, targetSteps: Swift.Int)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func toJsonString() -> Swift.String?
  @objc deinit
}
@objc @objcMembers public class IDOFitnessGuidanceParamModelObjc : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var mode: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public var notifyFlag: Swift.Int
  @objc public var goMode: Swift.Int
  @objc public var repeats: [protocol_channel.IDOWeekObjc]
  @objc public var targetSteps: Swift.Int
  @objc public init(mode: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, notifyFlag: Swift.Int, goMode: Swift.Int, repeats: [protocol_channel.IDOWeekObjc], targetSteps: Swift.Int)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
}
@objc @objcMembers public class IDOFlashBinInfoModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var status: Swift.Int
  @objc public var matchVersion: Swift.Int
  @objc public var checkCode: Swift.Int
  @objc public init(status: Swift.Int, matchVersion: Swift.Int, checkCode: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOFuncSimpleFileOptModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var error: Swift.Int
  @objc public var operate: Swift.Int
  @objc public var index: Swift.Int
  @objc public init(error: Swift.Int, operate: Swift.Int, index: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOFuncSimpleFileOptParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var operate: Swift.Int
  @objc public var index: Swift.Int
  @objc public var destIndex: Swift.Int
  @objc public init(operate: Swift.Int, index: Swift.Int, destIndex: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol IDOFuncTableInterface {
  @objc var reminderAncs: Swift.Bool { get }
  @objc var reminderSnapchat: Swift.Bool { get }
  @objc var reminderLine: Swift.Bool { get }
  @objc var reminderOutlook: Swift.Bool { get }
  @objc var reminderTelegram: Swift.Bool { get }
  @objc var reminderViber: Swift.Bool { get }
  @objc var reminderVkontakte: Swift.Bool { get }
  @objc var reminderChatwork: Swift.Bool { get }
  @objc var reminderSlack: Swift.Bool { get }
  @objc var reminderTumblr: Swift.Bool { get }
  @objc var reminderYahooMail: Swift.Bool { get }
  @objc var reminderYahooPinterest: Swift.Bool { get }
  @objc var reminderYoutube: Swift.Bool { get }
  @objc var reminderGmail: Swift.Bool { get }
  @objc var reminderKakaoTalk: Swift.Bool { get }
  @objc var reminderOnlyGoogleGmail: Swift.Bool { get }
  @objc var reminderOnlyOutlookEmail: Swift.Bool { get }
  @objc var reminderOnlyYahooEmail: Swift.Bool { get }
  @objc var reminderTiktok: Swift.Bool { get }
  @objc var reminderRedbus: Swift.Bool { get }
  @objc var reminderDailyhunt: Swift.Bool { get }
  @objc var reminderHotstar: Swift.Bool { get }
  @objc var reminderInshorts: Swift.Bool { get }
  @objc var reminderPaytm: Swift.Bool { get }
  @objc var reminderAmazon: Swift.Bool { get }
  @objc var reminderFlipkart: Swift.Bool { get }
  @objc var reminderNhnEmail: Swift.Bool { get }
  @objc var reminderInstantEmail: Swift.Bool { get }
  @objc var reminderZohoEmail: Swift.Bool { get }
  @objc var reminderExchangeEmail: Swift.Bool { get }
  @objc var reminder189Email: Swift.Bool { get }
  @objc var reminderVeryFit: Swift.Bool { get }
  @objc var reminderGeneral: Swift.Bool { get }
  @objc var reminderMattersRemind: Swift.Bool { get }
  @objc var reminderMicrosoft: Swift.Bool { get }
  @objc var reminderMissedCall: Swift.Bool { get }
  @objc var reminderGetAllContact: Swift.Bool { get }
  @objc var reminderWhatsappBusiness: Swift.Bool { get }
  @objc var reminderEmail: Swift.Bool { get }
  @objc var reminderFacebook: Swift.Bool { get }
  @objc var reminderMessage: Swift.Bool { get }
  @objc var reminderQq: Swift.Bool { get }
  @objc var reminderTwitter: Swift.Bool { get }
  @objc var reminderWeixin: Swift.Bool { get }
  @objc var reminderCalendarGoogle: Swift.Bool { get }
  @objc var reminderInstagram: Swift.Bool { get }
  @objc var reminderLinkedIn: Swift.Bool { get }
  @objc var reminderMessengre: Swift.Bool { get }
  @objc var reminderSkype: Swift.Bool { get }
  @objc var reminderCalendar: Swift.Bool { get }
  @objc var reminderWhatsapp: Swift.Bool { get }
  @objc var reminderAlarmClock: Swift.Bool { get }
  @objc var reminderSinaWeibo: Swift.Bool { get }
  @objc var reminderCalling: Swift.Bool { get }
  @objc var reminderCallContact: Swift.Bool { get }
  @objc var reminderCallNum: Swift.Bool { get }
  @objc var reminderPrime: Swift.Bool { get }
  @objc var reminderNetflix: Swift.Bool { get }
  @objc var reminderGpay: Swift.Bool { get }
  @objc var reminderPhonpe: Swift.Bool { get }
  @objc var reminderSwiggy: Swift.Bool { get }
  @objc var reminderZomato: Swift.Bool { get }
  @objc var reminderMakemytrip: Swift.Bool { get }
  @objc var reminderJioTv: Swift.Bool { get }
  @objc var reminderNiosefit: Swift.Bool { get }
  @objc var reminderYtmusic: Swift.Bool { get }
  @objc var reminderUber: Swift.Bool { get }
  @objc var reminderOla: Swift.Bool { get }
  @objc var reminderGoogleMeet: Swift.Bool { get }
  @objc var reminderMormaiiSmartwatch: Swift.Bool { get }
  @objc var reminderTechnosConnect: Swift.Bool { get }
  @objc var reminderEnjoei: Swift.Bool { get }
  @objc var reminderAliexpress: Swift.Bool { get }
  @objc var reminderShopee: Swift.Bool { get }
  @objc var reminderTeams: Swift.Bool { get }
  @objc var reminder99Taxi: Swift.Bool { get }
  @objc var reminderUberEats: Swift.Bool { get }
  @objc var reminderLfood: Swift.Bool { get }
  @objc var reminderRappi: Swift.Bool { get }
  @objc var reminderMercadoLivre: Swift.Bool { get }
  @objc var reminderMagalu: Swift.Bool { get }
  @objc var reminderAmericanas: Swift.Bool { get }
  @objc var reminderYahoo: Swift.Bool { get }
  @objc var reminderMessageIcon: Swift.Bool { get }
  @objc var sportWalk: Swift.Bool { get }
  @objc var sportRun: Swift.Bool { get }
  @objc var sportByBike: Swift.Bool { get }
  @objc var sportOnFoot: Swift.Bool { get }
  @objc var sportSwim: Swift.Bool { get }
  @objc var sportMountainClimbing: Swift.Bool { get }
  @objc var sportBadminton: Swift.Bool { get }
  @objc var sportOther: Swift.Bool { get }
  @objc var sportFitness: Swift.Bool { get }
  @objc var sportSpinning: Swift.Bool { get }
  @objc var sportEllipsoid: Swift.Bool { get }
  @objc var sportTreadmill: Swift.Bool { get }
  @objc var sportSitUp: Swift.Bool { get }
  @objc var sportPushUp: Swift.Bool { get }
  @objc var sportDumbbell: Swift.Bool { get }
  @objc var sportWeightlifting: Swift.Bool { get }
  @objc var sportYoga: Swift.Bool { get }
  @objc var sportRopeSkipping: Swift.Bool { get }
  @objc var sportTableTennis: Swift.Bool { get }
  @objc var sportBasketball: Swift.Bool { get }
  @objc var sportFootballl: Swift.Bool { get }
  @objc var sportVolleyball: Swift.Bool { get }
  @objc var sportTennis: Swift.Bool { get }
  @objc var sportGolf: Swift.Bool { get }
  @objc var sportBaseball: Swift.Bool { get }
  @objc var sportSkiing: Swift.Bool { get }
  @objc var sportRollerSkating: Swift.Bool { get }
  @objc var sportDance: Swift.Bool { get }
  @objc var sportStrengthTraining: Swift.Bool { get }
  @objc var sportCoreTraining: Swift.Bool { get }
  @objc var sportTidyUpRelax: Swift.Bool { get }
  @objc var sportTraditionalStrengthTraining: Swift.Bool { get }
  @objc var sportOutdoorRun: Swift.Bool { get }
  @objc var sportIndoorRun: Swift.Bool { get }
  @objc var sportOutdoorCycle: Swift.Bool { get }
  @objc var sportIndoorCycle: Swift.Bool { get }
  @objc var sportOutdoorWalk: Swift.Bool { get }
  @objc var sportIndoorWalk: Swift.Bool { get }
  @objc var sportPoolSwim: Swift.Bool { get }
  @objc var sportOpenWaterSwim: Swift.Bool { get }
  @objc var sportElliptical: Swift.Bool { get }
  @objc var sportRower: Swift.Bool { get }
  @objc var sportHiit: Swift.Bool { get }
  @objc var sportCricket: Swift.Bool { get }
  @objc var sportPilates: Swift.Bool { get }
  @objc var sportOutdoorFun: Swift.Bool { get }
  @objc var sportOtherActivity: Swift.Bool { get }
  @objc var sportZumba: Swift.Bool { get }
  @objc var sportSurfing: Swift.Bool { get }
  @objc var sportFootvolley: Swift.Bool { get }
  @objc var sportStandWaterSkiing: Swift.Bool { get }
  @objc var sportBattlingRope: Swift.Bool { get }
  @objc var sportSkateboard: Swift.Bool { get }
  @objc var sportNoticeStepper: Swift.Bool { get }
  @objc var sportShowNum: Swift.Int { get }
  @objc var sportAerobicsBodybuildingExercise: Swift.Bool { get }
  @objc var sportPullUp: Swift.Bool { get }
  @objc var sportHighBar: Swift.Bool { get }
  @objc var sportParallelBars: Swift.Bool { get }
  @objc var sportTrailRunning: Swift.Bool { get }
  @objc var sportPickleBall: Swift.Bool { get }
  @objc var getRealtimeData: Swift.Bool { get }
  @objc var getLangLibraryV3: Swift.Bool { get }
  @objc var getFindPhone: Swift.Bool { get }
  @objc var getFindDevice: Swift.Bool { get }
  @objc var getUpHandGestureEx: Swift.Bool { get }
  @objc var getUpHandGesture: Swift.Bool { get }
  @objc var getWeather: Swift.Bool { get }
  @objc var getDownloadLanguage: Swift.Bool { get }
  @objc var getFactoryReset: Swift.Bool { get }
  @objc var getFlashLog: Swift.Bool { get }
  @objc var getMultiActivityNoUseApp: Swift.Bool { get }
  @objc var getMultiDial: Swift.Bool { get }
  @objc var getMenuList: Swift.Bool { get }
  @objc var getDoNotDisturbMain3: Swift.Bool { get }
  @objc var getVoiceTransmission: Swift.Bool { get }
  @objc var setDrinkWaterAddNotifyFlag: Swift.Bool { get }
  @objc var getDeviceLogState: Swift.Bool { get }
  @objc var getNewWatchList: Swift.Bool { get }
  @objc var getNotifyIconAdaptive: Swift.Bool { get }
  @objc var getPressureNotifyFlagMode: Swift.Bool { get }
  @objc var getScientificSleep: Swift.Bool { get }
  @objc var getSpo2NotifyFlag: Swift.Bool { get }
  @objc var getV3Log: Swift.Bool { get }
  @objc var getWatchID: Swift.Bool { get }
  @objc var getDeviceName: Swift.Bool { get }
  @objc var getBatteryLog: Swift.Bool { get }
  @objc var getBatteryInfo: Swift.Bool { get }
  @objc var getHeatLog: Swift.Bool { get }
  @objc var getWalkReminderV3: Swift.Bool { get }
  @objc var getSupportV3BleMusic: Swift.Bool { get }
  @objc var getSupportGetBleBeepV3: Swift.Bool { get }
  @objc var getVeryFitNotSupportPhotoWallpaperV3: Swift.Bool { get }
  @objc var getSupportUpdateGps: Swift.Bool { get }
  @objc var getUbloxModel: Swift.Bool { get }
  @objc var getSupportGetBleMusicInfoVerV3: Swift.Bool { get }
  @objc var getBtVersion: Swift.Bool { get }
  @objc var getSportsTypeV3: Swift.Bool { get }
  @objc var getActivitySwitch: Swift.Bool { get }
  @objc var getNoticeIconInformation: Swift.Bool { get }
  @objc var getSetMaxItemsNum: Swift.Bool { get }
  @objc var getNotifyMsgV3: Swift.Bool { get }
  @objc var getScreenBrightnessMain9: Swift.Bool { get }
  @objc var getNotice128byte: Swift.Bool { get }
  @objc var getNotice250byte: Swift.Bool { get }
  @objc var getDeletableMenuListV2: Swift.Bool { get }
  @objc var getSupportPairEachConnect: Swift.Bool { get }
  @objc var getSupportGetMainSportGoalV3: Swift.Bool { get }
  @objc var getBtAddrV2: Swift.Bool { get }
  @objc var getSupportBpSetOrMeasurementV2: Swift.Bool { get }
  @objc var getMenstrualAddNotifyFlagV3: Swift.Bool { get }
  @objc var getSupportSetGetTimeGoalTypeV2: Swift.Bool { get }
  @objc var getOxygenDataSupportGradeV3: Swift.Bool { get }
  @objc var getSupportSyncActivityDataAltitudeInfo: Swift.Bool { get }
  @objc var getBindCodeAuth: Swift.Bool { get }
  @objc var getSpo2OffChangeV3: Swift.Bool { get }
  @objc var getLevel5HrInterval: Swift.Bool { get }
  @objc var getFiveHRInterval: Swift.Bool { get }
  @objc var getBleAndBtVersion: Swift.Bool { get }
  @objc var getSupportSetGetEmergencyContactV3: Swift.Bool { get }
  @objc var getSupportSetRepeatWeekTypeOnScheduleReminderV3: Swift.Bool { get }
  @objc var getSupportSetRepeatTypeOnScheduleReminderV3: Swift.Bool { get }
  @objc var getSupportSetMenstrualReminderOnOff: Swift.Bool { get }
  @objc var getVersionInfo: Swift.Bool { get }
  @objc var getMtu: Swift.Bool { get }
  @objc var getDeviceUpdateState: Swift.Bool { get }
  @objc var getHeartRateModeV2: Swift.Bool { get }
  @objc var getStepDataTypeV2: Swift.Bool { get }
  @objc var getFastMsgDataV3: Swift.Bool { get }
  @objc var getSupportCallingQuickReply: Swift.Bool { get }
  @objc var getSupportDataTranGetNewErrorCodeV3: Swift.Bool { get }
  @objc var getAutoActivityEndSwitchNotDisplay: Swift.Bool { get }
  @objc var getAutoActivityPauseSwitchNotDisplay: Swift.Bool { get }
  @objc var getV3AutoActivitySwitch: Swift.Bool { get }
  @objc var getAutoActivitySwitchAddBicycle: Swift.Bool { get }
  @objc var getAutoActivitySwitchAddSmartRope: Swift.Bool { get }
  @objc var getAutoActivitySetGetUseNewStructExchange: Swift.Bool { get }
  @objc var getSupportSetGetNoReminderOnWalkReminderV2: Swift.Bool { get }
  @objc var getSupportGetSnInfo: Swift.Bool { get }
  @objc var getScheduleReminderNotDisplayTitle: Swift.Bool { get }
  @objc var getSupportV3LongCityName: Swift.Bool { get }
  @objc var getSupportAddNightLevelV2: Swift.Bool { get }
  @objc var getSupportDialFrameEncodeFormatArgb6666: Swift.Bool { get }
  @objc var getSupportAppSendPhoneSystemInfo: Swift.Bool { get }
  @objc var getDeviceControlFastModeAlone: Swift.Bool { get }
  @objc var getSupportOnekeyDoubleContact: Swift.Bool { get }
  @objc var getSupportSetVoiceAssistantStatus: Swift.Bool { get }
  @objc var getSupportFlashLogSize: Swift.Bool { get }
  @objc var getSupportGetUnit: Swift.Bool { get }
  @objc var getSupportRyzeConnect: Swift.Bool { get }
  @objc var getSupportLoopsFit: Swift.Bool { get }
  @objc var getSupportTasSmart: Swift.Bool { get }
  @objc var getNotSupportSetOvulation: Swift.Bool { get }
  @objc var getSupportWalkGoalSteps: Swift.Bool { get }
  @objc var getNotSupportDeleteAddSportSort: Swift.Bool { get }
  @objc var getSupportSedentaryTensileHabitInfo: Swift.Bool { get }
  @objc var getSupportSendGpsLongitudeAndLatitude: Swift.Bool { get }
  @objc var getSupportGetV3DeviceBtConnectPhoneModel: Swift.Bool { get }
  @objc var getSupportBloodPressureModelFileUpdate: Swift.Bool { get }
  @objc var getSupportDisturbHaveRangRepeat: Swift.Bool { get }
  @objc var getSupportCalendarReminder: Swift.Bool { get }
  @objc var getWatchDailSetAddSize: Swift.Bool { get }
  @objc var getSupportSyncOverHighLowHeartData: Swift.Bool { get }
  @objc var getSupportPerMinuteOne: Swift.Bool { get }
  @objc var getSupportAchievedRemindOnOff: Swift.Bool { get }
  @objc var getSupportDrinkPlan: Swift.Bool { get }
  @objc var getSupportMakeWatchDialDecodeJpg: Swift.Bool { get }
  @objc var getSupportSleepPlan: Swift.Bool { get }
  @objc var setNoticeMessageStateUseVersion0x20: Swift.Bool { get }
  @objc var setScientificSleepSwitch: Swift.Bool { get }
  @objc var setTemperatureSwitchHealth: Swift.Bool { get }
  @objc var setHeartRateMonitor: Swift.Bool { get }
  @objc var setNoReminderOnDrinkReminder: Swift.Bool { get }
  @objc var setAgpsOffLine: Swift.Bool { get }
  @objc var setAgpsOnLine: Swift.Bool { get }
  @objc var setSetV3HeartInterval: Swift.Bool { get }
  @objc var setWeatherCity: Swift.Bool { get }
  @objc var setDoNotDisturb: Swift.Bool { get }
  @objc var setCalorieGoal: Swift.Bool { get }
  @objc var setMenstruation: Swift.Bool { get }
  @objc var setPressureData: Swift.Bool { get }
  @objc var setSpo2Data: Swift.Bool { get }
  @objc var setSportModeSort: Swift.Bool { get }
  @objc var setActivitySwitch: Swift.Bool { get }
  @objc var setNightAutoBrightness: Swift.Bool { get }
  @objc var setScreenBrightness5Level: Swift.Bool { get }
  @objc var setWalkReminder: Swift.Bool { get }
  @objc var setScreenBrightness3Level: Swift.Bool { get }
  @objc var setHandWashReminder: Swift.Bool { get }
  @objc var setLocalDial: Swift.Bool { get }
  @objc var setNotSupportHrHighAlarm: Swift.Bool { get }
  @objc var setNotSupportPhotoWallpaper: Swift.Bool { get }
  @objc var setPressureHighReminder: Swift.Bool { get }
  @objc var setWallpaperOnlyTimeColor: Swift.Bool { get }
  @objc var setWallpaperDial: Swift.Bool { get }
  @objc var setSupportBreathRate: Swift.Bool { get }
  @objc var setSupportCalorieUnit: Swift.Bool { get }
  @objc var setSupportSportPlan: Swift.Bool { get }
  @objc var setSupportSwimPoolUnit: Swift.Bool { get }
  @objc var setSupportV3Bp: Swift.Bool { get }
  @objc var setV3GetSportSortField: Swift.Bool { get }
  @objc var setWatchDialSort: Swift.Bool { get }
  @objc var setGetCalorieDistanceGoal: Swift.Bool { get }
  @objc var setMidHighTimeGoal: Swift.Bool { get }
  @objc var setNewRetainData: Swift.Bool { get }
  @objc var setScheduleReminder: Swift.Bool { get }
  @objc var setSet100SportSort: Swift.Bool { get }
  @objc var setSet20SportParamSort: Swift.Bool { get }
  @objc var setSetMainUiSort: Swift.Bool { get }
  @objc var setSetStressCalibration: Swift.Bool { get }
  @objc var setSmartHeartRate: Swift.Bool { get }
  @objc var setSpo2AllDayOnOff: Swift.Bool { get }
  @objc var setSupportAppSendVoiceToBle: Swift.Bool { get }
  @objc var setSupportCyclingUnit: Swift.Bool { get }
  @objc var setSupportWalkRunUnit: Swift.Bool { get }
  @objc var setWalkReminderTimeGoal: Swift.Bool { get }
  @objc var setWatchCapacitySizeDisplay: Swift.Bool { get }
  @objc var setWatchPhotoPositionMove: Swift.Bool { get }
  @objc var setMenuListMain7: Swift.Bool { get }
  @objc var setHistoryMenstrual: Swift.Bool { get }
  @objc var setMenstrualAddPregnancy: Swift.Bool { get }
  @objc var setNotSurportCalling3SDelay: Swift.Bool { get }
  @objc var setSetFitnessGuidance: Swift.Bool { get }
  @objc var setSetNotificationStatus: Swift.Bool { get }
  @objc var setSetUnreadAppReminder: Swift.Bool { get }
  @objc var setSetV3Weather: Swift.Bool { get }
  @objc var setSetV3WeatherSunrise: Swift.Bool { get }
  @objc var setSetV3WorldTime: Swift.Bool { get }
  @objc var setSyncContact: Swift.Bool { get }
  @objc var setSyncV3ActivityAddParam: Swift.Bool { get }
  @objc var setTransferMusicFile: Swift.Bool { get }
  @objc var setWalkReminderAddNotify: Swift.Bool { get }
  @objc var setSupportFahrenheit: Swift.Bool { get }
  @objc var setGetAlarmSpecify: Swift.Bool { get }
  @objc var setAirohaGpsChip: Swift.Bool { get }
  @objc var setSupportSecondSportIcon: Swift.Bool { get }
  @objc var setSportMediumIcon: Swift.Bool { get }
  @objc var setWeatherSunTime: Swift.Bool { get }
  @objc var setWeatherAirGrade: Swift.Bool { get }
  @objc var setDrinkWaterReminder: Swift.Bool { get }
  @objc var setRespirationRate: Swift.Bool { get }
  @objc var setMaxBloodOxygen: Swift.Bool { get }
  @objc var setBleControlMusic: Swift.Bool { get }
  @objc var setMainPressure: Swift.Bool { get }
  @objc var setNoDisturbAllDayOnOff: Swift.Bool { get }
  @objc var setOnlyNoDisturbAllDayOnOff: Swift.Bool { get }
  @objc var setOnlyNoDisturbSmartOnOff: Swift.Bool { get }
  @objc var setTimeZoneFloat: Swift.Bool { get }
  @objc var setTemperatureSwitchSupport: Swift.Bool { get }
  @objc var setMsgAllSwitch: Swift.Bool { get }
  @objc var setNotSupperCall3Delay: Swift.Bool { get }
  @objc var setNoticeMissedCallV2: Swift.Bool { get }
  @objc var setOverFindPhone: Swift.Bool { get }
  @objc var getHealthSwitchStateSupportV3: Swift.Bool { get }
  @objc var setSedentariness: Swift.Bool { get }
  @objc var setScreenBrightness: Swift.Bool { get }
  @objc var setSetPhoneVoice: Swift.Bool { get }
  @objc var setSupportSetCallQuickReplyOnOff: Swift.Bool { get }
  @objc var setSupportExchangeSetGpsCoordinates: Swift.Bool { get }
  @objc var setSupportV3WeatherAddAtmosphericPressure: Swift.Bool { get }
  @objc var setSupportSetV3WeatcherAddSnowDepth: Swift.Bool { get }
  @objc var setSupportSetV3WeatcherAddSnowfall: Swift.Bool { get }
  @objc var setSupportSetV3WeatcherSendStructVersion04: Swift.Bool { get }
  @objc var setSendCalibrationThreshold: Swift.Bool { get }
  @objc var getNotSupportAppSendRunPlan: Swift.Bool { get }
  @objc var getSupportDisplayNapSleep: Swift.Bool { get }
  @objc var getSupportGetSmartHeartRate: Swift.Bool { get }
  @objc var getSupportGetPressureSwitchInfo: Swift.Bool { get }
  @objc var getSupportECardOperate: Swift.Bool { get }
  @objc var getSupportVoiceMemoOperate: Swift.Bool { get }
  @objc var getSupportMorningEdition: Swift.Bool { get }
  @objc var getSupportGetSpo2SwitchInfo: Swift.Bool { get }
  @objc var getSupportSyncHealthHrUseVersionCompatible: Swift.Bool { get }
  @objc var getSupportSetV3Add48HourWeatherData: Swift.Bool { get }
  @objc var getNotSupportIndoorRunGetVo2max: Swift.Bool { get }
  @objc var getSupportSetEcgReminder: Swift.Bool { get }
  @objc var getSupportSyncEcg: Swift.Bool { get }
  @objc var getSupportSetGameTimeReminder: Swift.Bool { get }
  @objc var getSupportConfigDefaultMegApplicationList: Swift.Bool { get }
  @objc var getSupportSetEciReminder: Swift.Bool { get }
  @objc var setSupportNoiseSetNotifyFlag: Swift.Bool { get }
  @objc var setSupportNoiseSetOverWarning: Swift.Bool { get }
  @objc var setSupportSetVersionInformation: Swift.Bool { get }
  @objc var languageCh: Swift.Bool { get }
  @objc var languageCzech: Swift.Bool { get }
  @objc var languageEnglish: Swift.Bool { get }
  @objc var languageFrench: Swift.Bool { get }
  @objc var languageGerman: Swift.Bool { get }
  @objc var languageItalian: Swift.Bool { get }
  @objc var languageJapanese: Swift.Bool { get }
  @objc var languageSpanish: Swift.Bool { get }
  @objc var languageArabic: Swift.Bool { get }
  @objc var languageBurmese: Swift.Bool { get }
  @objc var languageFilipino: Swift.Bool { get }
  @objc var languageGreek: Swift.Bool { get }
  @objc var languageThai: Swift.Bool { get }
  @objc var languageTraditionalChinese: Swift.Bool { get }
  @objc var languageVietnamese: Swift.Bool { get }
  @objc var languageDutch: Swift.Bool { get }
  @objc var languageHungarian: Swift.Bool { get }
  @objc var languageLithuanian: Swift.Bool { get }
  @objc var languagePolish: Swift.Bool { get }
  @objc var languageRomanian: Swift.Bool { get }
  @objc var languageRussian: Swift.Bool { get }
  @objc var languageSlovenian: Swift.Bool { get }
  @objc var languageUkrainian: Swift.Bool { get }
  @objc var languageCroatian: Swift.Bool { get }
  @objc var languageDanish: Swift.Bool { get }
  @objc var languageHindi: Swift.Bool { get }
  @objc var languageIndonesian: Swift.Bool { get }
  @objc var languageKorean: Swift.Bool { get }
  @objc var languagePortuguese: Swift.Bool { get }
  @objc var languageSlovak: Swift.Bool { get }
  @objc var languageTurkish: Swift.Bool { get }
  @objc var languagePersia: Swift.Bool { get }
  @objc var languageSweden: Swift.Bool { get }
  @objc var languageNorwegian: Swift.Bool { get }
  @objc var languageFinland: Swift.Bool { get }
  @objc var languageBengali: Swift.Bool { get }
  @objc var languageKhmer: Swift.Bool { get }
  @objc var languageMalay: Swift.Bool { get }
  @objc var languageBrazilianPortuguese: Swift.Bool { get }
  @objc var languageHebrew: Swift.Bool { get }
  @objc var languageSerbian: Swift.Bool { get }
  @objc var syncV3Hr: Swift.Bool { get }
  @objc var syncV3Swim: Swift.Bool { get }
  @objc var syncV3Spo2: Swift.Bool { get }
  @objc var syncV3Pressure: Swift.Bool { get }
  @objc var syncV3Activity: Swift.Bool { get }
  @objc var syncV3Sleep: Swift.Bool { get }
  @objc var syncV3Sports: Swift.Bool { get }
  @objc var syncV3Gps: Swift.Bool { get }
  @objc var syncV3SyncAlarm: Swift.Bool { get }
  @objc var syncV3BodyPower: Swift.Bool { get }
  @objc var getSupportHrvV3: Swift.Bool { get }
  @objc var getSupportPerBpV3: Swift.Bool { get }
  @objc var syncV3Noise: Swift.Bool { get }
  @objc var syncV3Temperature: Swift.Bool { get }
  @objc var syncGps: Swift.Bool { get }
  @objc var syncV3ActivityExchangeData: Swift.Bool { get }
  @objc var syncHeartRate: Swift.Bool { get }
  @objc var syncHeartRateMonitor: Swift.Bool { get }
  @objc var syncSleepMonitor: Swift.Bool { get }
  @objc var syncFastSync: Swift.Bool { get }
  @objc var syncActivityTimeSync: Swift.Bool { get }
  @objc var syncTimeLine: Swift.Bool { get }
  @objc var syncNeedV2: Swift.Bool { get }
  @objc var syncRealTimeV3: Swift.Bool { get }
  @objc var syncExchangeDataReplyAddRealTimeSpeedPaceV3: Swift.Bool { get }
  @objc var syncHealthSyncV3ActivityEndTimeUseUtcMode: Swift.Bool { get }
  @objc var syncSupportSetFastModeWhenSyncConfig: Swift.Bool { get }
  @objc var alarmCount: Swift.Int { get }
  @objc var alarmBrushTeeth: Swift.Bool { get }
  @objc var alarmDating: Swift.Bool { get }
  @objc var alarmDinner: Swift.Bool { get }
  @objc var alarmMedicine: Swift.Bool { get }
  @objc var alarmMeeting: Swift.Bool { get }
  @objc var alarmParty: Swift.Bool { get }
  @objc var alarmRest: Swift.Bool { get }
  @objc var alarmSleep: Swift.Bool { get }
  @objc var alarmSport: Swift.Bool { get }
  @objc var alarmWakeUp: Swift.Bool { get }
  @objc var supportSetAntilost: Swift.Bool { get }
  @objc var supportSetWeatherDataV2: Swift.Bool { get }
  @objc var supportSetOnetouchCalling: Swift.Bool { get }
  @objc var alexaReminderAddSecV3: Swift.Bool { get }
  @objc var alexaSetEasyOperateV3: Swift.Bool { get }
  @objc var alexaSetGetAlexaAlarmV3: Swift.Bool { get }
  @objc var alexaSetJumpSportUiV3: Swift.Bool { get }
  @objc var alexaSetJumpUiV3: Swift.Bool { get }
  @objc var alexaSetSetOnOffTypeV3: Swift.Bool { get }
  @objc var alexaSetWeatherV3: Swift.Bool { get }
  @objc var alexaTimeNewV3: Swift.Bool { get }
  @objc var setAlexaControll100brightness: Swift.Bool { get }
  @objc var alexaGetSupportGetAlexaDefaultLanguage: Swift.Bool { get }
  @objc var alexaGetUIControllSports: Swift.Bool { get }
  @objc func printProperties() -> Swift.String?
}
@objc @objcMembers public class IDOGpsControlModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var type: Swift.Int
  @objc public var status: Swift.Int
  @objc public var errorCode: Swift.Int
  @objc public init(type: Swift.Int, status: Swift.Int, errorCode: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOGpsControlParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var operate: Swift.Int
  @objc public var type: Swift.Int
  @objc public init(operate: Swift.Int, type: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOGpsInfoModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var errCode: Swift.Int
  @objc public var fwVersion: Swift.Int
  @objc public var agpsInfo: Swift.Int
  @objc public var agpsErrCode: Swift.Int
  @objc public var utcYear: Swift.Int
  @objc public var utcMonth: Swift.Int
  @objc public var utcDay: Swift.Int
  @objc public var utcHour: Swift.Int
  @objc public var utcMinute: Swift.Int
  @objc public var startMode: Swift.Int
  @objc public var gns: Swift.Int
  @objc public var fixStartBit: Swift.Int
  @objc public init(errCode: Swift.Int, fwVersion: Swift.Int, agpsInfo: Swift.Int, agpsErrCode: Swift.Int, utcYear: Swift.Int, utcMonth: Swift.Int, utcDay: Swift.Int, utcHour: Swift.Int, utcMinute: Swift.Int, startMode: Swift.Int, gns: Swift.Int, fixStartBit: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOGpsHotStartParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var longitude: Swift.Int
  @objc public var latitude: Swift.Int
  @objc public var altitude: Swift.Int
  @objc public var tcxoOffset: Swift.Int
  @objc public init(longitude: Swift.Int, latitude: Swift.Int, altitude: Swift.Int, tcxoOffset: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOGpsStatusModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var gpsRunStatus: Swift.Int
  @objc public var agpsIsValid: Swift.Int
  @objc public init(gpsRunStatus: Swift.Int, agpsIsValid: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOHabitInfoModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var browseCount: Swift.Int
  @objc public var implementCount: Swift.Int
  @objc public var broItems: [protocol_channel.IDOHabitBroItem]
  @objc public var impItems: [protocol_channel.IDOHabitImpItem]
  @objc public init(browseCount: Swift.Int, implementCount: Swift.Int, broItems: [protocol_channel.IDOHabitBroItem], impItems: [protocol_channel.IDOHabitImpItem])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOHabitBroItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var type: Swift.Int
  @objc public var evt: Swift.Int
  @objc public var year: Swift.Int
  @objc public var month: Swift.Int
  @objc public var day: Swift.Int
  @objc public var hour: Swift.Int
  @objc public var min: Swift.Int
  @objc public var sec: Swift.Int
  @objc public var count: Swift.Int
  @objc public init(type: Swift.Int, evt: Swift.Int, year: Swift.Int, month: Swift.Int, day: Swift.Int, hour: Swift.Int, min: Swift.Int, sec: Swift.Int, count: Swift.Int)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOHabitImpItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var type: Swift.Int
  @objc public var evt: Swift.Int
  @objc public var startYear: Swift.Int
  @objc public var startMonth: Swift.Int
  @objc public var startDay: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMin: Swift.Int
  @objc public var startSEC: Swift.Int
  @objc public var endYear: Swift.Int
  @objc public var endMonth: Swift.Int
  @objc public var endDay: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMin: Swift.Int
  @objc public var endSEC: Swift.Int
  @objc public var completionRate: Swift.Int
  @objc public init(type: Swift.Int, evt: Swift.Int, startYear: Swift.Int, startMonth: Swift.Int, startDay: Swift.Int, startHour: Swift.Int, startMin: Swift.Int, startSEC: Swift.Int, endYear: Swift.Int, endMonth: Swift.Int, endDay: Swift.Int, endHour: Swift.Int, endMin: Swift.Int, endSEC: Swift.Int, completionRate: Swift.Int)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class IDOHandWashingReminderParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  public var onOff: Swift.Int
  public var startHour: Swift.Int
  public var startMinute: Swift.Int
  public var endHour: Swift.Int
  public var endMinute: Swift.Int
  public var repeats: Swift.Set<protocol_channel.IDOWeek>
  public var interval: Swift.Int
  public init(onOff: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, repeats: Swift.Set<protocol_channel.IDOWeek>, interval: Swift.Int)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func toJsonString() -> Swift.String?
  @objc deinit
}
@objc @objcMembers public class IDOHandWashingReminderParamModelObjc : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var onOff: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public var repeats: [protocol_channel.IDOWeekObjc]
  @objc public var interval: Swift.Int
  @objc public init(onOff: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, repeats: [protocol_channel.IDOWeekObjc], interval: Swift.Int)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
}
@objc @objcMembers public class IDOHeartModeParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var updateTime: Swift.Int
  @objc public var mode: Swift.Int
  @objc public var hasTimeRange: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public var measurementInterval: Swift.Int
  @objc public var notifyFlag: Swift.Int
  @objc public var highHeartMode: Swift.Int
  @objc public var lowHeartMode: Swift.Int
  @objc public var highHeartValue: Swift.Int
  @objc public var lowHeartValue: Swift.Int
  @objc public init(updateTime: Swift.Int, mode: Swift.Int, hasTimeRange: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, measurementInterval: Swift.Int, notifyFlag: Swift.Int, highHeartMode: Swift.Int, lowHeartMode: Swift.Int, highHeartValue: Swift.Int, lowHeartValue: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOHeartModeModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var updateTime: Swift.Int
  @objc public var mode: Swift.Int
  @objc public var hasTimeRange: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public var measurementInterval: Swift.Int
  @objc public var getSECMode: Swift.Int
  @objc public var getMinMode: Swift.Int
  @objc public var notifyFlag: Swift.Int
  @objc public var highHeartMode: Swift.Int
  @objc public var lowHeartMode: Swift.Int
  @objc public var highHeartValue: Swift.Int
  @objc public var lowHeartValue: Swift.Int
  @objc public init(updateTime: Swift.Int, mode: Swift.Int, hasTimeRange: Swift.Int, getMinMode: Swift.Int, getSECMode: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, measurementInterval: Swift.Int, notifyFlag: Swift.Int, highHeartMode: Swift.Int, lowHeartMode: Swift.Int, highHeartValue: Swift.Int, lowHeartValue: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOHeartRateIntervalModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var burnFatThreshold: Swift.Int
  @objc public var aerobicThreshold: Swift.Int
  @objc public var limitThreshold: Swift.Int
  @objc public var userMaxHr: Swift.Int
  @objc public var range1: Swift.Int
  @objc public var range2: Swift.Int
  @objc public var range3: Swift.Int
  @objc public var range4: Swift.Int
  @objc public var range5: Swift.Int
  @objc public var minHr: Swift.Int
  @objc public var maxHrRemind: Swift.Int
  @objc public var minHrRemind: Swift.Int
  @objc public var remindStartHour: Swift.Int
  @objc public var remindStartMinute: Swift.Int
  @objc public var remindStopHour: Swift.Int
  @objc public var remindStopMinute: Swift.Int
  @objc public init(burnFatThreshold: Swift.Int, aerobicThreshold: Swift.Int, limitThreshold: Swift.Int, userMaxHr: Swift.Int, range1: Swift.Int, range2: Swift.Int, range3: Swift.Int, range4: Swift.Int, range5: Swift.Int, minHr: Swift.Int, maxHrRemind: Swift.Int, minHrRemind: Swift.Int, remindStartHour: Swift.Int, remindStartMinute: Swift.Int, remindStopHour: Swift.Int, remindStopMinute: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOHeartRateModeModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var mode: Swift.Int
  @objc public var hasTimeRange: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public var measurementInterval: Swift.Int
  @objc public init(mode: Swift.Int, hasTimeRange: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, measurementInterval: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOHeartRateModeParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var mode: Swift.Int
  @objc public var hasTimeRange: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public var measurementInterval: Swift.Int
  @objc public init(mode: Swift.Int, hasTimeRange: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, measurementInterval: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOHeartRateModeSmartModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var mode: Swift.Int
  @objc public var notifyFlag: Swift.Int
  @objc public var highHeartMode: Swift.Int
  @objc public var lowHeartMode: Swift.Int
  @objc public var highHeartValue: Swift.Int
  @objc public var lowHeartValue: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public init(mode: Swift.Int, notifyFlag: Swift.Int, highHeartMode: Swift.Int, lowHeartMode: Swift.Int, highHeartValue: Swift.Int, lowHeartValue: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOHeartRateModeSmartParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var mode: Swift.Int
  @objc public var notifyFlag: Swift.Int
  @objc public var highHeartMode: Swift.Int
  @objc public var lowHeartMode: Swift.Int
  @objc public var highHeartValue: Swift.Int
  @objc public var lowHeartValue: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public init(mode: Swift.Int, notifyFlag: Swift.Int, highHeartMode: Swift.Int, lowHeartMode: Swift.Int, highHeartValue: Swift.Int, lowHeartValue: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOHistoricalMenstruationParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var avgMenstrualDay: Swift.Int
  @objc public var avgCycleDay: Swift.Int
  @objc public var items: [protocol_channel.IDOHistoricalMenstruationParamItem]
  @objc public init(avgMenstrualDay: Swift.Int, avgCycleDay: Swift.Int, items: [protocol_channel.IDOHistoricalMenstruationParamItem])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOHistoricalMenstruationParamItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var year: Swift.Int
  @objc public var mon: Swift.Int
  @objc public var day: Swift.Int
  @objc public var menstrualDay: Swift.Int
  @objc public var cycleDay: Swift.Int
  @objc public var ovulationIntervalDay: Swift.Int
  @objc public var ovulationBeforeDay: Swift.Int
  @objc public var ovulationAfterDay: Swift.Int
  @objc public init(year: Swift.Int, mon: Swift.Int, day: Swift.Int, menstrualDay: Swift.Int, cycleDay: Swift.Int, ovulationIntervalDay: Swift.Int, ovulationBeforeDay: Swift.Int, ovulationAfterDay: Swift.Int)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOHotStartParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var tcxoOffset: Swift.Int
  @objc public var longitude: Swift.Int
  @objc public var latitude: Swift.Int
  @objc public var altitude: Swift.Int
  @objc public init(tcxoOffset: Swift.Int, longitude: Swift.Int, latitude: Swift.Int, altitude: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOLanguageLibraryModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var useLang: Swift.Int
  @objc public var defaultLang: Swift.Int
  @objc public var fixedLang: Swift.Int
  @objc public var maxStorageLang: Swift.Int
  @objc public var items: [protocol_channel.IDOLanguageLibraryItem]
  @objc public var itemsUser: [protocol_channel.IDOLanguageLibraryItem]
  @objc public init(useLang: Swift.Int, defaultLang: Swift.Int, fixedLang: Swift.Int, maxStorageLang: Swift.Int, items: [protocol_channel.IDOLanguageLibraryItem], itemsUser: [protocol_channel.IDOLanguageLibraryItem])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOLanguageLibraryItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var languageType: protocol_channel.IDOLanguageType
  @objc public var languageVersion: Swift.Int
  @objc public init(languageType: protocol_channel.IDOLanguageType, languageVersion: Swift.Int)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum IDOLanguageType : Swift.Int, Swift.Codable {
  case invalid = 0
  case chinese = 1
  case english = 2
  case french = 3
  case german = 4
  case italian = 5
  case spanish = 6
  case japanese = 7
  case polish = 8
  case czech = 9
  case romanian = 10
  case lithuanian = 11
  case dutch = 12
  case slovenian = 13
  case hungarian = 14
  case russian = 15
  case ukrainian = 16
  case slovak = 17
  case danish = 18
  case croatian = 19
  case indonesian = 20
  case korean = 21
  case hindi = 22
  case portuguese = 23
  case turkish = 24
  case thai = 25
  case vietnamese = 26
  case burmese = 27
  case filipino = 28
  case traditionalChinese = 29
  case greek = 30
  case arabic = 31
  case swedish = 32
  case finnish = 33
  case persian = 34
  case norwegian = 35
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class IDOLiveDataModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var totalStep: Swift.Int
  @objc public var totalCalories: Swift.Int
  @objc public var totalDistances: Swift.Int
  @objc public var totalActiveTime: Swift.Int
  @objc public var heartRate: Swift.Int
  @objc public init(totalStep: Swift.Int, totalCalories: Swift.Int, totalDistances: Swift.Int, totalActiveTime: Swift.Int, heartRate: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOLongSitParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public var interval: Swift.Int
  @objc public var repetitions: Swift.Int
  @objc public init(startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, interval: Swift.Int, repetitions: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOLostFindParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var mode: Swift.Int
  @objc public init(mode: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOMainSportGoalModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var calorie: Swift.Int
  @objc public var distance: Swift.Int
  @objc public var calorieMin: Swift.Int
  @objc public var calorieMax: Swift.Int
  public var midHighTimeGoal: Swift.Int?
  @objc public var walkGoalTime: Swift.Int
  public var timeGoalType: Swift.Int?
  @objc public init(calorie: Swift.Int = 0, distance: Swift.Int, calorieMin: Swift.Int, calorieMax: Swift.Int, midHighTimeGoal: Swift.Int = 0, walkGoalTime: Swift.Int, timeGoalType: Swift.Int = 0)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOMainUISortParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var operate: Swift.Int
  @objc public var items: [Swift.Int]
  @objc public var locationX: Swift.Int
  @objc public var locationY: Swift.Int
  @objc public var sizeType: Swift.Int
  @objc public var widgetsType: Swift.Int
  @objc public init(operate: Swift.Int, items: [Swift.Int], locationX: Swift.Int, locationY: Swift.Int, sizeType: Swift.Int, widgetsType: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOMainUISortModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var errCode: Swift.Int
  @objc public var operate: Swift.Int
  @objc public var allNum: Swift.Int
  @objc public var supportItems: [protocol_channel.IDOMainUISortSupportItem]
  @objc public var items: [protocol_channel.IDOMainUISortItem]
  @objc public var locationX: Swift.Int
  @objc public var locationY: Swift.Int
  @objc public var sizeType: Swift.Int
  @objc public var widgetsType: Swift.Int
  @objc public init(errCode: Swift.Int, operate: Swift.Int, allNum: Swift.Int, supportItems: [protocol_channel.IDOMainUISortSupportItem], items: [protocol_channel.IDOMainUISortItem], locationX: Swift.Int, locationY: Swift.Int, sizeType: Swift.Int, widgetsType: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOMainUISortItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var locationX: Swift.Int
  @objc public var locationY: Swift.Int
  @objc public var sizeType: Swift.Int
  @objc public var widgetsType: Swift.Int
  @objc public var supportSizeType: Swift.Int
  @objc public init(locationX: Swift.Int, locationY: Swift.Int, sizeType: Swift.Int, widgetsType: Swift.Int, supportSizeType: Swift.Int)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOMainUISortSupportItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var widgetsType: Swift.Int
  @objc public var supportSizeType: Swift.Int
  @objc public init(supportSizeType: Swift.Int, widgetsType: Swift.Int)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOMenstruationModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var onOff: Swift.Int
  @objc public var menstrualLength: Swift.Int
  @objc public var menstrualCycle: Swift.Int
  @objc public var lastMenstrualYear: Swift.Int
  @objc public var lastMenstrualMonth: Swift.Int
  @objc public var lastMenstrualDay: Swift.Int
  @objc public var ovulationIntervalDay: Swift.Int
  @objc public var ovulationBeforeDay: Swift.Int
  @objc public var ovulationAfterDay: Swift.Int
  @objc public var notifyFlag: Swift.Int
  @objc public var menstrualReminderOnOff: Swift.Int
  @objc public init(onOff: Swift.Int, menstrualLength: Swift.Int, menstrualCycle: Swift.Int, lastMenstrualYear: Swift.Int, lastMenstrualMonth: Swift.Int, lastMenstrualDay: Swift.Int, ovulationIntervalDay: Swift.Int, ovulationBeforeDay: Swift.Int, ovulationAfterDay: Swift.Int, notifyFlag: Swift.Int, menstrualReminderOnOff: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOMenstruationRemindParamModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public var startDay: Swift.Int
  @objc public var ovulationDay: Swift.Int
  @objc public var hour: Swift.Int
  @objc public var minute: Swift.Int
  @objc public var pregnancyDayBeforeRemind: Swift.Int
  @objc public var pregnancyDayEndRemind: Swift.Int
  @objc public var menstrualDayEndRemind: Swift.Int
  @objc public init(startDay: Swift.Int, ovulationDay: Swift.Int, hour: Swift.Int, minute: Swift.Int, pregnancyDayBeforeRemind: Swift.Int, pregnancyDayEndRemind: Swift.Int, menstrualDayEndRemind: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOMenuListModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var currentShowNum: Swift.Int
  @objc public var items: [protocol_channel.IDOMenuItem]
  @objc public var maxNum: Swift.Int
  @objc public var maxShowNum: Swift.Int
  @objc public var minShowNum: Swift.Int
  @objc public init(currentShowNum: Swift.Int, items: [protocol_channel.IDOMenuItem], maxNum: Swift.Int, maxShowNum: Swift.Int, minShowNum: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOMenuItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var index: Swift.Int
  @objc public var value: Swift.Int
  @objc public init(index: Swift.Int, value: Swift.Int)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOMenuListParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var items: [Swift.Int]
  @objc public init(items: [Swift.Int])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol IDOMessageIconInterface {
  @objc var updating: Swift.Bool { get }
  @objc var iconDirPath: Swift.String { get }
  @objc func iOSConfig(countryCode: Swift.String, baseUrlPath: Swift.String, appKey: Swift.String, language: Swift.Int)
  @objc func firstGetAppInfo(force: Swift.Bool, completion: @escaping ([protocol_channel.IDOAppIconItemModel]) -> Swift.Void)
  @objc func getDefaultAppInfo(completion: @escaping ([protocol_channel.IDOAppIconItemModel]) -> Swift.Void)
  @objc func getCacheAppInfo(completion: @escaping (protocol_channel.IDOAppIconInfoModel) -> Swift.Void)
  @objc func resetIconInfoData(macAddress: Swift.String, deleteIcon: Swift.Bool, completion: @escaping (Swift.Bool) -> Swift.Void)
}
@objc @objcMembers public class IDOMtuInfoModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var status: Swift.Int
  @objc public var rxMtu: Swift.Int
  @objc public var txMtu: Swift.Int
  @objc public var phySpeed: Swift.Int
  @objc public var dleLength: Swift.Int
  @objc public init(status: Swift.Int, rxMtu: Swift.Int, txMtu: Swift.Int, phySpeed: Swift.Int, dleLength: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOMusicControlParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var status: Swift.Int
  @objc public var curTimeSecond: Swift.Int
  @objc public var totalTimeSecond: Swift.Int
  @objc public var musicName: Swift.String
  @objc public var singerName: Swift.String
  @objc public init(status: Swift.Int, curTimeSecond: Swift.Int, totalTimeSecond: Swift.Int, musicName: Swift.String, singerName: Swift.String)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOMusicOnOffParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var onOff: Swift.Int
  @objc public var showInfoStatus: Swift.Int
  @objc public init(onOff: Swift.Int, showInfoStatus: Swift.Int = 0)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOMusicOpearteParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var musicOperate: Swift.Int
  @objc public var folderOperate: Swift.Int
  @objc public var folderItem: protocol_channel.IDOMusicFolderItem
  @objc public var musicItem: protocol_channel.IDOMusicItem
  @objc public init(musicOperate: Swift.Int, folderOperate: Swift.Int, folderItem: protocol_channel.IDOMusicFolderItem, musicItem: protocol_channel.IDOMusicItem)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOMusicInfoModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var allMemory: Swift.Int
  @objc public var folderItems: [protocol_channel.IDOMusicFolderItem]
  @objc public var musicItems: [protocol_channel.IDOMusicItem]
  @objc public var usedMemory: Swift.Int
  @objc public var usefulMemory: Swift.Int
  @objc public init(allMemory: Swift.Int, folderItems: [protocol_channel.IDOMusicFolderItem], musicItems: [protocol_channel.IDOMusicItem], usedMemory: Swift.Int, usefulMemory: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOMusicFolderItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var folderID: Swift.Int
  @objc public var musicNum: Swift.Int
  @objc public var folderName: Swift.String
  @objc public var musicIndex: [Swift.Int]
  @objc public init(folderID: Swift.Int, musicNum: Swift.Int, folderName: Swift.String, musicIndex: [Swift.Int])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOMusicItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var musicID: Swift.Int
  @objc public var musicMemory: Swift.Int
  @objc public var musicName: Swift.String
  @objc public var singerName: Swift.String
  @objc public init(musicID: Swift.Int, musicMemory: Swift.Int, musicName: Swift.String, singerName: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOMusicOperateModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var operateType: Swift.Int
  @objc public var version: Swift.Int
  @objc public var errCode: Swift.Int
  @objc public var musicId: Swift.Int
  @objc public init(operateType: Swift.Int, version: Swift.Int, errCode: Swift.Int, musicId: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDONotDisturbParamModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public var switchFlag: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public var haveTimeRange: Swift.Int
  @objc public var noontimeRESTOnOff: Swift.Int
  @objc public var noontimeRESTStartHour: Swift.Int
  @objc public var noontimeRESTStartMinute: Swift.Int
  @objc public var noontimeRESTEndHour: Swift.Int
  @objc public var noontimeRESTEndMinute: Swift.Int
  @objc public var allDayOnOff: Swift.Int
  @objc public var intelligentOnOff: Swift.Int
  @objc public init(switchFlag: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, haveTimeRange: Swift.Int = 0, noontimeRESTOnOff: Swift.Int, noontimeRESTStartHour: Swift.Int, noontimeRESTStartMinute: Swift.Int, noontimeRESTEndHour: Swift.Int, noontimeRESTEndMinute: Swift.Int, allDayOnOff: Swift.Int = 0, intelligentOnOff: Swift.Int = 0)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDONotDisturbStatusModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var switchFlag: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public var haveTimeRange: Swift.Int
  @objc public var weekRepeat: Swift.Int
  @objc public var noontimeRestOnOff: Swift.Int
  @objc public var noontimeRestStartHour: Swift.Int
  @objc public var noontimeRestStartMinute: Swift.Int
  @objc public var noontimeRestEndHour: Swift.Int
  @objc public var noontimeRestEndMinute: Swift.Int
  @objc public var allDayOnOff: Swift.Int
  @objc public var intelligentOnOff: Swift.Int
  @objc public init(switchFlag: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, haveTimeRange: Swift.Int, weekRepeat: Swift.Int, noontimeRestOnOff: Swift.Int, noontimeRestStartHour: Swift.Int, noontimeRestStartMinute: Swift.Int, noontimeRestEndHour: Swift.Int, noontimeRestEndMinute: Swift.Int, allDayOnOff: Swift.Int, intelligentOnOff: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDONoticeMesaageParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var osPlatform: Swift.Int
  @objc public var evtType: Swift.Int
  @objc public var notifyType: Swift.Int
  @objc public var msgID: Swift.Int
  @objc public var appItemsLen: Swift.Int
  @objc public var contact: Swift.String
  @objc public var phoneNumber: Swift.String
  @objc public var msgData: Swift.String
  @objc public var items: [protocol_channel.IDONoticeMesaageParamItem]
  @objc public init(osPlatform: Swift.Int, evtType: Swift.Int, notifyType: Swift.Int, msgID: Swift.Int, appItemsLen: Swift.Int, contact: Swift.String, phoneNumber: Swift.String, msgData: Swift.String, items: [protocol_channel.IDONoticeMesaageParamItem])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDONoticeMesaageParamItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var language: Swift.Int
  @objc public var name: Swift.String
  @objc public init(language: Swift.Int, name: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDONoticeMessageParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var evtType: Swift.Int
  @objc public var msgID: Swift.Int
  @objc public var supportAnswering: Swift.Bool
  @objc public var supportMute: Swift.Bool
  @objc public var supportHangUp: Swift.Bool
  @objc public var msgData: Swift.String
  @objc public var contact: Swift.String
  @objc public var phoneNumber: Swift.String
  @objc public var dataText: Swift.String
  @objc public init(evtType: Swift.Int, msgID: Swift.Int, supportAnswering: Swift.Bool, supportMute: Swift.Bool, supportHangUp: Swift.Bool, msgData: Swift.String, contact: Swift.String, phoneNumber: Swift.String, dataText: Swift.String)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDONoticeMessageStateModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var errCode: Swift.Int
  @objc public var operat: Swift.Int
  @objc public var allOnOff: Swift.Int
  @objc public var items: [protocol_channel.IDONoticeMessageStateItem]?
  @objc public init(errCode: Swift.Int, operat: Swift.Int, allOnOff: Swift.Int, items: [protocol_channel.IDONoticeMessageStateItem])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDONoticeMessageStateParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var operat: Swift.Int
  @objc public var allOnOff: Swift.Int
  @objc public var allSendNum: Swift.Int
  @objc public var nowSendIndex: Swift.Int
  @objc public var items: [protocol_channel.IDONoticeMessageStateItem]
  @objc public init(operat: Swift.Int, allOnOff: Swift.Int, allSendNum: Swift.Int, nowSendIndex: Swift.Int, items: [protocol_channel.IDONoticeMessageStateItem])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDONoticeMessageStateItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var evtType: Swift.Int
  @objc public var notifyState: Swift.Int
  @objc public var picFlag: Swift.Int
  @objc public init(evtType: Swift.Int, notifyState: Swift.Int, picFlag: Swift.Int)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOSetNoticeStatusModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var notifySwitch: protocol_channel.IDONoticeNotifySwitchState
  @objc public var callSwitch: protocol_channel.IDONoticeCallSwitchState
  @objc public var msgAllSwitch: protocol_channel.IDONoticeMsgAllSwitchState
  @objc public var callDelay: Swift.Int
  @objc public var isOnSms: Swift.Bool
  @objc public var isOnEmail: Swift.Bool
  @objc public var isOnWeChat: Swift.Bool
  @objc public var isOnQq: Swift.Bool
  @objc public var isOnWeibo: Swift.Bool
  @objc public var isOnFaceBook: Swift.Bool
  @objc public var isOnTwitter: Swift.Bool
  @objc public var isOnWhatsapp: Swift.Bool
  @objc public var isOnMessenger: Swift.Bool
  @objc public var isOnInstagram: Swift.Bool
  @objc public var isOnLinkedIn: Swift.Bool
  @objc public var isOnCalendar: Swift.Bool
  @objc public var isOnSkype: Swift.Bool
  @objc public var isOnAlarm: Swift.Bool
  @objc public var isOnPokeman: Swift.Bool
  @objc public var isOnVkontakte: Swift.Bool
  @objc public var isOnLine: Swift.Bool
  @objc public var isOnViber: Swift.Bool
  @objc public var isOnKakaoTalk: Swift.Bool
  @objc public var isOnGmail: Swift.Bool
  @objc public var isOnOutlook: Swift.Bool
  @objc public var isOnSnapchat: Swift.Bool
  @objc public var isOnTelegram: Swift.Bool
  @objc public var isOnChatwork: Swift.Bool
  @objc public var isOnSlack: Swift.Bool
  @objc public var isOnYahooMail: Swift.Bool
  @objc public var isOnTumblr: Swift.Bool
  @objc public var isOnYoutube: Swift.Bool
  @objc public var isOnYahooPinterest: Swift.Bool
  @objc public var isOnKeep: Swift.Bool
  @objc public var isOnTikTok: Swift.Bool
  @objc public var isOnRedbus: Swift.Bool
  @objc public var isOnDailyhunt: Swift.Bool
  @objc public var isOnHotstar: Swift.Bool
  @objc public var isOnInshorts: Swift.Bool
  @objc public var isOnPaytm: Swift.Bool
  @objc public var isOnAmazon: Swift.Bool
  @objc public var isOnFlipkart: Swift.Bool
  @objc public var isOnPrime: Swift.Bool
  @objc public var isOnNetflix: Swift.Bool
  @objc public var isOnGpay: Swift.Bool
  @objc public var isOnPhonpe: Swift.Bool
  @objc public var isOnSwiggy: Swift.Bool
  @objc public var isOnZomato: Swift.Bool
  @objc public var isOnMakeMyTrip: Swift.Bool
  @objc public var isOnJioTv: Swift.Bool
  @objc public var isOnMicrosoft: Swift.Bool
  @objc public var isOnWhatsAppBusiness: Swift.Bool
  @objc public var isOnNioseFit: Swift.Bool
  @objc public var isOnDidNotCall: Swift.Bool
  @objc public var isOnMattersRemind: Swift.Bool
  @objc public var isOnUber: Swift.Bool
  @objc public var isOnOla: Swift.Bool
  @objc public var isOnYtMusic: Swift.Bool
  @objc public var isOnGoogleMeet: Swift.Bool
  @objc public var isOnMormaiiSmartwatch: Swift.Bool
  @objc public var isOnTechnosConnect: Swift.Bool
  @objc public var isOnEnioei: Swift.Bool
  @objc public var isOnAliexpress: Swift.Bool
  @objc public var isOnShopee: Swift.Bool
  @objc public var isOnTeams: Swift.Bool
  @objc public var isOn99Taxi: Swift.Bool
  @objc public var isOnUberEats: Swift.Bool
  @objc public var isOnLfood: Swift.Bool
  @objc public var isOnRappi: Swift.Bool
  @objc public var isOnMercadoLivre: Swift.Bool
  @objc public var isOnMagalu: Swift.Bool
  @objc public var isOnAmericanas: Swift.Bool
  @objc public var isOnYahoo: Swift.Bool
  @objc public var isOnInstantemail: Swift.Bool
  @objc public var isOnNhnemail: Swift.Bool
  @objc public var isOnZohoemail: Swift.Bool
  @objc public var isOnExchangeemail: Swift.Bool
  @objc public var isOn189email: Swift.Bool
  @objc public var isOnGoogleGmail: Swift.Bool
  @objc public var isOnVeryfit: Swift.Bool
  @objc public var isOnGeneral: Swift.Bool
  @objc public var isOnAlibabaemail: Swift.Bool
  @objc public static func createDefaultModel() -> protocol_channel.IDOSetNoticeStatusModel
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
}
@objc public enum IDONoticeNotifySwitchState : Swift.Int {
  case invalid = -1
  case bleOff = 0
  case bleOn = 1
  case settingSubSwitch = 2
  case btOnlySwitch = 3
  case bleAndBtOn
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IDONoticeCallSwitchState : Swift.Int {
  case invalid = -1
  case off = 0
  case on = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IDONoticeMsgAllSwitchState : Swift.Int {
  case invalid = -1
  case off = 0
  case on = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class IDONotificationCenterModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var notifySwitch: Swift.Int
  @objc public var statusCode: Swift.Int
  @objc public var errCode: Swift.Int
  @objc public init(notifySwitch: Swift.Int, statusCode: Swift.Int, errCode: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDONotificationStatusParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var notifyFlag: Swift.Int
  @objc public init(notifyFlag: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDORunPlanParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var verison: Swift.Int
  @objc public var operate: Swift.Int
  @objc public var type: Swift.Int
  @objc public var year: Swift.Int
  @objc public var month: Swift.Int
  @objc public var day: Swift.Int
  @objc public var hour: Swift.Int
  @objc public var min: Swift.Int
  @objc public var sec: Swift.Int
  @objc public var dayNum: Swift.Int
  @objc public var items: [protocol_channel.IDOGpsInfoModelItem]
  @objc public init(verison: Swift.Int, operate: Swift.Int, type: Swift.Int, year: Swift.Int, month: Swift.Int, day: Swift.Int, hour: Swift.Int, min: Swift.Int, sec: Swift.Int, dayNum: Swift.Int, items: [protocol_channel.IDOGpsInfoModelItem])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOGpsInfoModelItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var type: Swift.Int
  @objc public var num: Swift.Int
  @objc public var item: [protocol_channel.IDOItemItem]
  @objc public init(type: Swift.Int, num: Swift.Int, item: [protocol_channel.IDOItemItem])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOItemItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var type: Swift.Int
  @objc public var time: Swift.Int
  @objc public var heightHeart: Swift.Int
  @objc public var lowHeart: Swift.Int
  @objc public init(type: Swift.Int, time: Swift.Int, heightHeart: Swift.Int, lowHeart: Swift.Int)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOSchedulerReminderParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var operate: Swift.Int
  @objc public var items: [protocol_channel.IDOSchedulerReminderItem]
  @objc public init(operate: Swift.Int, items: [protocol_channel.IDOSchedulerReminderItem])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOSchedulerReminderModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var operate: Swift.Int
  @objc public var errCode: Swift.Int
  @objc public var items: [protocol_channel.IDOSchedulerReminderItem]?
  @objc public init(operate: Swift.Int, errCode: Swift.Int, items: [protocol_channel.IDOSchedulerReminderItem])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOSchedulerReminderItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var id: Swift.Int
  @objc public var year: Swift.Int
  @objc public var mon: Swift.Int
  @objc public var day: Swift.Int
  @objc public var hour: Swift.Int
  @objc public var min: Swift.Int
  @objc public var sec: Swift.Int
  @objc public var repeatType: Swift.Int
  @objc public var remindOnOff: Swift.Int
  @objc public var state: Swift.Int
  @objc public var title: Swift.String
  @objc public var note: Swift.String
  @objc public init(id: Swift.Int, year: Swift.Int, mon: Swift.Int, day: Swift.Int, hour: Swift.Int, min: Swift.Int, sec: Swift.Int, repeatType: Swift.Int, remindOnOff: Swift.Int, state: Swift.Int, title: Swift.String, note: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOScientificSleepSwitchParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var mode: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public init(mode: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOScreenBrightnessModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var level: Swift.Int
  @objc public var opera: Swift.Int
  @objc public var mode: Swift.Int
  @objc public var autoAdjustNight: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public var nightLevel: Swift.Int
  @objc public var showInterval: Swift.Int
  @objc public init(level: Swift.Int, opera: Swift.Int, mode: Swift.Int, autoAdjustNight: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, nightLevel: Swift.Int, showInterval: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class IDOSDK : ObjectiveC.NSObject, protocol_channel.IDOSdkInterface {
  @objc public static let shared: protocol_channel.IDOSDK
  @objc public var device: any protocol_channel.IDODeviceInterface {
    @objc get
  }
  @objc public var funcTable: any protocol_channel.IDOFuncTableInterface {
    @objc get
  }
  @objc public var cmd: any protocol_channel.IDOCmdInterface {
    @objc get
  }
  @objc public var bridge: any protocol_channel.IDOBridgeInterface {
    @objc get
  }
  @objc public var ble: any protocol_channel.IDOBleInterface {
    @objc get
  }
  @objc public var alexa: any protocol_channel.IDOAlexaInterface {
    @objc get
  }
  @objc public var transfer: any protocol_channel.IDOFileTransferInterface {
    @objc get
  }
  @objc public var messageIcon: any protocol_channel.IDOMessageIconInterface {
    @objc get
  }
  @objc public var syncData: any protocol_channel.IDOSyncDataInterface {
    @objc get
  }
  @objc public var dataExchange: any protocol_channel.IDODataExchangeOCInterface {
    @objc get
  }
  @objc public var deviceLog: any protocol_channel.IDODeviceLogInterface {
    @objc get
  }
  @objc public var tool: any protocol_channel.IDOToolsInterface {
    @objc get
  }
  @objc public var info: protocol_channel.IDOSdkInfo {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class IDOSdkInfo : ObjectiveC.NSObject {
  @objc final public let versionSdk: Swift.String
  @objc public var versionLib: Swift.String {
    get
  }
  @objc public var versionAlexa: Swift.String {
    get
  }
  @objc public var versionClib: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol IDOSdkInterface {
  @objc var device: any protocol_channel.IDODeviceInterface { get }
  @objc var funcTable: any protocol_channel.IDOFuncTableInterface { get }
  @objc var cmd: any protocol_channel.IDOCmdInterface { get }
  @objc var bridge: any protocol_channel.IDOBridgeInterface { get }
  @objc var ble: any protocol_channel.IDOBleInterface { get }
  @objc var alexa: any protocol_channel.IDOAlexaInterface { get }
  @objc var transfer: any protocol_channel.IDOFileTransferInterface { get }
  @objc var messageIcon: any protocol_channel.IDOMessageIconInterface { get }
  @objc var syncData: any protocol_channel.IDOSyncDataInterface { get }
  @objc var dataExchange: any protocol_channel.IDODataExchangeOCInterface { get }
  @objc var deviceLog: any protocol_channel.IDODeviceLogInterface { get }
  @objc var tool: any protocol_channel.IDOToolsInterface { get }
  @objc var info: protocol_channel.IDOSdkInfo { get }
}
@objc public protocol IDOCancellable {
  @objc var isCancelled: Swift.Bool { get }
  @objc func cancel()
}
@objc @objcMembers public class IDOSendRunPlanModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var errCode: Swift.Int
  @objc public var version: Swift.Int
  @objc public var operate: Swift.Int
  @objc public var type: Swift.Int
  @objc public var year: Swift.Int
  @objc public var month: Swift.Int
  @objc public var day: Swift.Int
  @objc public var hour: Swift.Int
  @objc public var min: Swift.Int
  @objc public var sec: Swift.Int
  @objc public init(errCode: Swift.Int, version: Swift.Int, operate: Swift.Int, type: Swift.Int, year: Swift.Int, month: Swift.Int, day: Swift.Int, hour: Swift.Int, min: Swift.Int, sec: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOShortcutParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var mode: Swift.Int
  @objc public init(mode: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOSleepPeriodParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var onOff: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public init(onOff: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOSpo2SwitchParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var onOff: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public var lowSpo2OnOff: Swift.Int
  @objc public var lowSpo2Value: Swift.Int
  @objc public var notifyFlag: Swift.Int
  @objc public init(onOff: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, lowSpo2OnOff: Swift.Int = 0, lowSpo2Value: Swift.Int = 0, notifyFlag: Swift.Int = 0)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOSpo2SwitchModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var onOff: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public var lowSpo2OnOff: Swift.Int
  @objc public var lowSpo2Value: Swift.Int
  @objc public var notifyFlag: Swift.Int
  @objc public init(onOff: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, lowSpo2OnOff: Swift.Int = 0, lowSpo2Value: Swift.Int = 0, notifyFlag: Swift.Int = 0)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOSportGoalParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var sportStep: Swift.Int
  @objc public var walkGoalSteps: Swift.Int
  @objc public var targetType: Swift.Int
  @objc public init(sportStep: Swift.Int, walkGoalSteps: Swift.Int, targetType: Swift.Int = 0)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOSportModeSelectParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var flag: Swift.Int
  @objc public var sportType1: Swift.Int
  @objc public var sportType2: Swift.Int
  @objc public var sportType3: Swift.Int
  @objc public var sportType4: Swift.Int
  @objc public var sportType0Walk: Swift.Bool
  @objc public var sportType0Run: Swift.Bool
  @objc public var sportType0ByBike: Swift.Bool
  @objc public var sportType0OnFoot: Swift.Bool
  @objc public var sportType0Swim: Swift.Bool
  @objc public var sportType0MountainClimbing: Swift.Bool
  @objc public var sportType0Badminton: Swift.Bool
  @objc public var sportType0Other: Swift.Bool
  @objc public var sportType1Fitness: Swift.Bool
  @objc public var sportType1Spinning: Swift.Bool
  @objc public var sportType1Ellipsoid: Swift.Bool
  @objc public var sportType1Treadmill: Swift.Bool
  @objc public var sportType1SitUp: Swift.Bool
  @objc public var sportType1PushUp: Swift.Bool
  @objc public var sportType1Dumbbell: Swift.Bool
  @objc public var sportType1Weightlifting: Swift.Bool
  @objc public var sportType2BodybuildingExercise: Swift.Bool
  @objc public var sportType2Yoga: Swift.Bool
  @objc public var sportType2RopeSkipping: Swift.Bool
  @objc public var sportType2TableTennis: Swift.Bool
  @objc public var sportType2Basketball: Swift.Bool
  @objc public var sportType2Football: Swift.Bool
  @objc public var sportType2Volleyball: Swift.Bool
  @objc public var sportType2Tennis: Swift.Bool
  @objc public var sportType3Golf: Swift.Bool
  @objc public var sportType3Baseball: Swift.Bool
  @objc public var sportType3Skiing: Swift.Bool
  @objc public var sportType3RollerSkating: Swift.Bool
  @objc public var sportType3Dance: Swift.Bool
  @objc public var sportType3StrengthTraining: Swift.Bool
  @objc public var sportType3CoreTraining: Swift.Bool
  @objc public var sportType3TidyUpRelax: Swift.Bool
  @objc public init(flag: Swift.Int, sportType1: Swift.Int, sportType2: Swift.Int, sportType3: Swift.Int, sportType4: Swift.Int, sportType0Walk: Swift.Bool, sportType0Run: Swift.Bool, sportType0ByBike: Swift.Bool, sportType0OnFoot: Swift.Bool, sportType0Swim: Swift.Bool, sportType0MountainClimbing: Swift.Bool, sportType0Badminton: Swift.Bool, sportType0Other: Swift.Bool, sportType1Fitness: Swift.Bool, sportType1Spinning: Swift.Bool, sportType1Ellipsoid: Swift.Bool, sportType1Treadmill: Swift.Bool, sportType1SitUp: Swift.Bool, sportType1PushUp: Swift.Bool, sportType1Dumbbell: Swift.Bool, sportType1Weightlifting: Swift.Bool, sportType2BodybuildingExercise: Swift.Bool, sportType2Yoga: Swift.Bool, sportType2RopeSkipping: Swift.Bool, sportType2TableTennis: Swift.Bool, sportType2Basketball: Swift.Bool, sportType2Football: Swift.Bool, sportType2Volleyball: Swift.Bool, sportType2Tennis: Swift.Bool, sportType3Golf: Swift.Bool, sportType3Baseball: Swift.Bool, sportType3Skiing: Swift.Bool, sportType3RollerSkating: Swift.Bool, sportType3Dance: Swift.Bool, sportType3StrengthTraining: Swift.Bool, sportType3CoreTraining: Swift.Bool, sportType3TidyUpRelax: Swift.Bool)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOSportParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var items: [protocol_channel.IDOSportModeSortParamModel]
  @objc public init(items: [protocol_channel.IDOSportModeSortParamModel])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOSportModeSortParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var index: Swift.Int
  @objc public var type: protocol_channel.IDOSportType
  @objc public init(index: Swift.Int, type: protocol_channel.IDOSportType)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOSportSortParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var operate: Swift.Int
  @objc public var sportType: protocol_channel.IDOSportType
  @objc public var nowUserLocation: Swift.Int
  @objc public var items: [Swift.Int]
  @objc public init(operate: Swift.Int, sportType: protocol_channel.IDOSportType, nowUserLocation: Swift.Int, items: [Swift.Int])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOSport100SortParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var operate: Swift.Int
  @objc public var nowUserLocation: Swift.Int
  @objc public var items: [Swift.Int]
  @objc public init(operate: Swift.Int, nowUserLocation: Swift.Int, items: [Swift.Int])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOSport100SortModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var errCode: Swift.Int
  @objc public var operate: Swift.Int
  @objc public var minShowNum: Swift.Int
  @objc public var maxShowNum: Swift.Int
  @objc public var nowUserLocation: Swift.Int
  @objc public var items: [protocol_channel.IDOSport100SortItem]
  @objc public init(errCode: Swift.Int, operate: Swift.Int, minShowNum: Swift.Int, maxShowNum: Swift.Int, nowUserLocation: Swift.Int, items: [protocol_channel.IDOSport100SortItem])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOSport100SortItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var type: protocol_channel.IDOSportType
  @objc public var flag: Swift.Int
  @objc public init(type: protocol_channel.IDOSportType, flag: Swift.Int)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOSportSortModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var errCode: Swift.Int
  @objc public var operate: Swift.Int
  @objc public var sportType: protocol_channel.IDOSportType
  @objc public var nowUserLocation: Swift.Int
  @objc public var items: [Swift.Int]
  @objc public init(operate: Swift.Int, errCode: Swift.Int, sportType: protocol_channel.IDOSportType, nowUserLocation: Swift.Int, items: [Swift.Int])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum IDOSportType : Swift.Int, Swift.Codable {
  case sportTypeNull = 0
  case sportTypeWalk = 1
  case sportTypeRun = 2
  case sportTypeCycling = 3
  case sportTypeOnFoot = 4
  case sportTypeSwim = 5
  case sportTypeClimb = 6
  case sportTypeBadminton = 7
  case sportTypeOther = 8
  case sportTypeFitness = 9
  case sportTypeDynamic = 10
  case sportTypeEllipsoid = 11
  case sportTypeTreadmill = 12
  case sportTypeSitUp = 13
  case sportTypePushUp = 14
  case sportTypeDumbbells = 15
  case sportTypeLifting = 16
  case sportTypeAerobics = 17
  case sportTypeYoga = 18
  case sportTypeRope = 19
  case sportTypePingPong = 20
  case sportTypeBasketball = 21
  case sportTypeSoccer = 22
  case sportTypeVolleyball = 23
  case sportTypeTennisBall = 24
  case sportTypeGolf = 25
  case sportTypeBaseball = 26
  case sportTypeSki = 27
  case sportTypeRoller = 28
  case sportTypeDancing = 29
  case sportTypeRollerMachine = 31
  case sportTypePilates = 32
  case sportTypeCrossTrain = 33
  case sportTypeCardio = 34
  case sportTypeZumba = 35
  case sportTypeSquareDance = 36
  case sportTypePlank = 37
  case sportTypeGym = 38
  case sportTypeOxAerobics = 39
  case sportTypeOutdoorRun = 48
  case sportTypeIndoorRun = 49
  case sportTypeOutdoorCycle = 50
  case sportTypeIndoorCycle = 51
  case sportTypeOutdoorWalk = 52
  case sportTypeIndoorWalk = 53
  case sportTypePoolSwim = 54
  case sportTypeWaterSwim = 55
  case sportTypeElliptical = 56
  case sportTypeRower = 57
  case sportTypeHit = 58
  case sportTypeFreeTraining = 100
  case sportTypeFunctionalStrengthTraining = 101
  case sportTypeCoreTraining = 102
  case sportTypeStepper = 103
  case sportTypeOrganizeAndRelax = 104
  case sportTypeTraditionalStrengthTraining = 110
  case sportTypePullUp = 112
  case sportTypeOpeningAndClosingJump = 114
  case sportTypeSquat = 115
  case sportTypeHighLegLift = 116
  case sportTypeBoxing = 117
  case sportTypeBarbell = 118
  case sportTypeMartial = 119
  case sportTypeTaiJi = 120
  case sportTypeKarate = 122
  case sportTypeTaekwondo = 121
  case sportTypeFreeFight = 123
  case sportTypeFencing = 124
  case sportTypeArchery = 125
  case sportTypeArtisticGymnastics = 126
  case sportTypeHorizontalBar = 127
  case sportTypeParallelBars = 128
  case sportTypeWalkingMachine = 129
  case sportTypeMountaineeringMachine = 130
  case sportTypeBowling = 131
  case sportTypeBilliards = 132
  case sportTypeHockey = 133
  case sportTypeRugby = 134
  case sportTypeSquash = 135
  case sportTypeSoftball = 136
  case sportTypeHandball = 137
  case sportTypeShuttlecock = 138
  case sportTypeBeachSoccer = 139
  case sportTypeSepaktakraw = 140
  case sportTypeDodgeball = 141
  case sportTypeHiphop = 152
  case sportTypeBallet = 153
  case sportTypeSocialDance = 154
  case sportTypeFrisbee = 155
  case sportTypeDarts = 156
  case sportTypeRiding = 157
  case sportTypeClimbbuilding = 158
  case sportTypeflykite = 159
  case sportTypeGofishing = 160
  case sportTypeSled = 161
  case sportTypeSnowmobile = 162
  case sportTypeSnowboarding = 163
  case sportTypeSnowSports = 164
  case sportTypeAlpineskiing = 165
  case sportTypeCrosscountryskiing = 166
  case sportTypeCurling = 167
  case sportTypeIcehockey = 168
  case sportTypeWinterbiathlon = 169
  case sportTypeSurfing = 170
  case sportTypeSailboat = 171
  case sportTypeSailboard = 172
  case sportTypeKayak = 173
  case sportTypeMotorboat = 174
  case sportTypeRowboat = 175
  case sportTypeRowing = 176
  case sportTypeDragonBoat = 177
  case sportTypeWaterPolo = 178
  case sportTypeDrift = 179
  case sportTypeSkate = 180
  case sportTypeRockClimbing = 181
  case sportTypeBungeejumping = 182
  case sportTypeParkour = 183
  case sportTypeBMX = 184
  case sportTypeFootVolley = 187
  case sportTypeStandingStroke = 188
  case sportTypeCrunch = 190
  case sportType
  case hulaHoop = 196
  case beachTennis = 202
  case smartJumpRope = 203
  case pickleball = 204
  case wheelchairSport = 205
  case fitnessTraining = 206
  case kettlebellTraining = 207
  case groupExercise = 208
  case crossFit = 209
  case obstacleCourse = 210
  case scooter = 211
  case glider = 212
  case skiing = 213
  case snowboarding = 214
  case combatAerobics = 215
  case kendo = 216
  case taiChi = 217
  case mma = 218
  case wrestling = 219
  case bellyDance = 220
  case jazzDance = 221
  case latinDance = 222
  case tapDance = 223
  case otherDance = 224
  case beachVolleyball = 225
  case gateBall = 226
  case polo = 227
  case lacrosse = 228
  case kayaking = 229
  case supSurfing = 230
  case combatGame = 231
  case tugOfWar = 232
  case swing = 233
  case equestrian = 234
  case trackAndField = 235
  case stairClimber = 236
  case flexibilityTraining = 237
  case chess = 238
  case checkers = 239
  case go = 240
  case bridge = 241
  case boardGame = 242
  case ethnicDance = 243
  case hipHopDance = 244
  case poleDance = 245
  case breakDance = 246
  case modernDance = 247
  case muayThai = 248
  case judo = 249
  case jiuJitsu = 250
  case jaiAlai = 251
  case snowmobiling = 252
  case paragliding = 253
  case lacrosseField = 254
  case americanFootball = 255
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class IDOStepGoalModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var step: Swift.Int
  @objc public var stepWeek: Swift.Int
  @objc public init(step: Swift.Int, stepWeek: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOStressCalibrationModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var retCode: Swift.Int
  @objc public init(retCode: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOStressCalibrationParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var stressScore: Swift.Int
  @objc public var status: Swift.Int
  @objc public init(stressScore: Swift.Int, status: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class IDOStressSwitchParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  public var onOff: Swift.Int
  public var startHour: Swift.Int
  public var startMinute: Swift.Int
  public var endHour: Swift.Int
  public var endMinute: Swift.Int
  public var remindOnOff: Swift.Int
  public var interval: Swift.Int
  public var highThreshold: Swift.Int
  public var stressThreshold: Swift.Int
  public var notifyFlag: Swift.Int
  public var repeats: Swift.Set<protocol_channel.IDOWeek>
  public init(onOff: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, remindOnOff: Swift.Int, interval: Swift.Int, highThreshold: Swift.Int, stressThreshold: Swift.Int = 0, notifyFlag: Swift.Int, repeats: Swift.Set<protocol_channel.IDOWeek> = [.monday])
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func toJsonString() -> Swift.String?
  @objc deinit
}
@objc @objcMembers public class IDOStressSwitchParamModelObjc : ObjectiveC.NSObject, Swift.Codable {
  @objc public var onOff: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public var remindOnOff: Swift.Int
  @objc public var interval: Swift.Int
  @objc public var highThreshold: Swift.Int
  @objc public var stressThreshold: Swift.Int
  @objc public var notifyFlag: Swift.Int
  @objc public var repeats: [protocol_channel.IDOWeekObjc]
  @objc public init(onOff: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, remindOnOff: Swift.Int, interval: Swift.Int, highThreshold: Swift.Int, stressThreshold: Swift.Int = 0, notifyFlag: Swift.Int, repeats: [protocol_channel.IDOWeekObjc])
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
}
@objc public class IDOStressSwitchModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  public var onOff: Swift.Int
  public var startHour: Swift.Int
  public var startMinute: Swift.Int
  public var endHour: Swift.Int
  public var endMinute: Swift.Int
  public var remindOnOff: Swift.Int
  public var interval: Swift.Int
  public var highThreshold: Swift.Int
  public var stressThreshold: Swift.Int
  public var notifyFlag: Swift.Int
  public var repeats: Swift.Set<protocol_channel.IDOWeek>
  public init(onOff: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, remindOnOff: Swift.Int, interval: Swift.Int, highThreshold: Swift.Int, stressThreshold: Swift.Int = 0, notifyFlag: Swift.Int, repeats: Swift.Set<protocol_channel.IDOWeek> = [.monday])
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func toJsonString() -> Swift.String?
  @objc deinit
}
@objc @objcMembers public class IDOStressSwitchModelObjc : ObjectiveC.NSObject, Swift.Codable {
  @objc public var onOff: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public var remindOnOff: Swift.Int
  @objc public var interval: Swift.Int
  @objc public var highThreshold: Swift.Int
  @objc public var stressThreshold: Swift.Int
  @objc public var notifyFlag: Swift.Int
  @objc public var repeats: [protocol_channel.IDOWeekObjc]
  @objc public init(onOff: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, remindOnOff: Swift.Int, interval: Swift.Int, highThreshold: Swift.Int, stressThreshold: Swift.Int = 0, notifyFlag: Swift.Int, repeats: [protocol_channel.IDOWeekObjc])
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
}
@objc @objcMembers public class IDOStressValModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var stressVal: Swift.Int
  @objc public var threshold: Swift.Int
  @objc public init(stressVal: Swift.Int, threshold: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOSupportMaxSetItemsNumModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var contactMaxSetNum: Swift.Int
  @objc public var reminderMaxSetNum: Swift.Int
  @objc public var msgMaxBuffSize: Swift.Int
  @objc public init(contactMaxSetNum: Swift.Int, reminderMaxSetNum: Swift.Int, msgMaxBuffSize: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOSyncContactParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var operat: Swift.Int
  @objc public var items: [protocol_channel.IDOContactItem]
  @objc public init(operat: Swift.Int, items: [protocol_channel.IDOContactItem])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOSyncContactModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var errCode: Swift.Int
  @objc public var operat: Swift.Int
  @objc public var items: [protocol_channel.IDOContactItem]?
  @objc public init(errCode: Swift.Int, operat: Swift.Int, items: [protocol_channel.IDOContactItem]?)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOContactItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var phone: Swift.String
  @objc public var name: Swift.String
  @objc public init(phone: Swift.String, name: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol IDOSyncDataInterface {
  @objc var syncStatus: protocol_channel.IDOSyncStatus { get }
  @objc func startSync(funcProgress: @escaping protocol_channel.BlockDataSyncProgress, funcData: @escaping protocol_channel.BlockDataSyncData, funcCompleted: @escaping protocol_channel.BlockDataSyncCompleted)
  @objc func startSync(types: [protocol_channel.IDOSyncDataTypeClass], funcData: @escaping protocol_channel.BlockDataSyncData, funcCompleted: @escaping protocol_channel.BlockDataSyncCompleted)
  @objc func getSupportSyncDataTypeList(completion: @escaping ([protocol_channel.IDOSyncDataTypeClass]) -> Swift.Void)
  @objc func stopSync()
}
@objc @objcMembers public class IDOSyncDataTypeClass : ObjectiveC.NSObject {
  @objc public init(type: protocol_channel.IDOSyncDataType)
  @objc deinit
}
@objc public class IDOTakingMedicineReminderParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  public var takingMedicineId: Swift.Int
  public var onOff: Swift.Int
  public var startHour: Swift.Int
  public var startMinute: Swift.Int
  public var endHour: Swift.Int
  public var endMinute: Swift.Int
  public var repeats: Swift.Set<protocol_channel.IDOWeek>
  public var interval: Swift.Int
  public var doNotDisturbOnOff: Swift.Int
  public var doNotDisturbStartHour: Swift.Int
  public var doNotDisturbStartMinute: Swift.Int
  public var doNotDisturbEndHour: Swift.Int
  public var doNotDisturbEndMinute: Swift.Int
  public init(takingMedicineId: Swift.Int, onOff: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, repeats: Swift.Set<protocol_channel.IDOWeek>, interval: Swift.Int, doNotDisturbOnOff: Swift.Int, doNotDisturbStartHour: Swift.Int, doNotDisturbStartMinute: Swift.Int, doNotDisturbEndHour: Swift.Int, doNotDisturbEndMinute: Swift.Int)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func toJsonString() -> Swift.String?
  @objc deinit
}
@objc @objcMembers public class IDOTakingMedicineReminderParamModelObjc : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var takingMedicineId: Swift.Int
  @objc public var onOff: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public var repeats: [protocol_channel.IDOWeekObjc]
  @objc public var interval: Swift.Int
  @objc public var doNotDisturbOnOff: Swift.Int
  @objc public var doNotDisturbStartHour: Swift.Int
  @objc public var doNotDisturbStartMinute: Swift.Int
  @objc public var doNotDisturbEndHour: Swift.Int
  @objc public var doNotDisturbEndMinute: Swift.Int
  @objc public init(takingMedicineId: Swift.Int, onOff: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, repeats: [protocol_channel.IDOWeekObjc], interval: Swift.Int, doNotDisturbOnOff: Swift.Int, doNotDisturbStartHour: Swift.Int, doNotDisturbStartMinute: Swift.Int, doNotDisturbEndHour: Swift.Int, doNotDisturbEndMinute: Swift.Int)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
}
@objc @objcMembers public class IDOTemperatureSwitchParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var mode: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public var unit: Swift.Int
  @objc public init(mode: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, unit: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol IDOToolsInterface {
  @objc func png2Bmp(inPath: Swift.String, outPath: Swift.String, format: Swift.Int, completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc func compressToPNG(inputFilePath: Swift.String, outputFilePath: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc func makeEpoFile(dirPath: Swift.String, epoFilePath: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc func gpsInitType(motionTypeIn: Swift.Int, completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc func gpsAlgProcessRealtime(json: Swift.String, completion: @escaping (Swift.String) -> Swift.Void)
  @objc func gpsSmoothData(json: Swift.String, completion: @escaping (Swift.String) -> Swift.Void)
  @objc func logPath(completion: @escaping (Swift.String) -> Swift.Void)
  @objc func currentDevicePath(completion: @escaping (Swift.String) -> Swift.Void)
  @objc func exportLog(completion: @escaping (Swift.String) -> Swift.Void)
  @objc func lastConnectDevice(completion: @escaping (Swift.String?) -> Swift.Void)
  @objc func loadDeviceExtListByDisk(sortDesc: Swift.Bool, completion: @escaping ([Swift.String]) -> Swift.Void)
}
@objc @objcMembers public class IDOUnerasableMeunListModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var itemList: [Swift.Int]
  @objc public init(itemList: [Swift.Int])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOUnitParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var distUnit: Swift.Int
  @objc public var weightUnit: Swift.Int
  @objc public var temp: Swift.Int
  @objc public var stride: Swift.Int
  @objc public var language: Swift.Int
  @objc public var is12HourFormat: Swift.Int
  @objc public var strideRun: Swift.Int
  @objc public var strideGpsCal: Swift.Int
  @objc public var weekStartDate: Swift.Int
  @objc public var calorieUnit: Swift.Int
  @objc public var swimPoolUnit: Swift.Int
  @objc public var cyclingUnit: Swift.Int
  @objc public var walkingRunningUnit: Swift.Int
  @objc public init(distUnit: Swift.Int, weightUnit: Swift.Int, temp: Swift.Int, stride: Swift.Int, language: Swift.Int, is12HourFormat: Swift.Int, strideRun: Swift.Int, strideGpsCal: Swift.Int, weekStartDate: Swift.Int, calorieUnit: Swift.Int, swimPoolUnit: Swift.Int, cyclingUnit: Swift.Int, walkingRunningUnit: Swift.Int = 0)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOUnitModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var distUnit: Swift.Int
  @objc public var temp: Swift.Int
  @objc public var language: Swift.Int
  @objc public var swimPoolUnit: Swift.Int
  @objc public init(distUnit: Swift.Int, temp: Swift.Int, language: Swift.Int, swimPoolUnit: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOUpdateStatusModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var devVesion: Swift.Int
  @objc public var state: Swift.Int
  @objc public init(devVesion: Swift.Int, state: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOUpHandGestureModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public var hasTimeRange: Swift.Int
  @objc public var onOff: Swift.Int
  @objc public var showSecond: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public init(endHour: Swift.Int, endMinute: Swift.Int, hasTimeRange: Swift.Int, onOff: Swift.Int, showSecond: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOUpHandGestureParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var onOff: Swift.Int
  @objc public var showSecond: Swift.Int
  @objc public var hasTimeRange: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public init(onOff: Swift.Int, showSecond: Swift.Int, hasTimeRange: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOUserInfoPramModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var year: Swift.Int, monuth: Swift.Int, day: Swift.Int
  @objc public var heigh: Swift.Int
  @objc public var weigh: Swift.Int
  @objc public var gender: Swift.Int
  @objc public init(year: Swift.Int, monuth: Swift.Int, day: Swift.Int, heigh: Swift.Int, weigh: Swift.Int, gender: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOV3NoiseParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var mode: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public var highNoiseOnOff: Swift.Int
  @objc public var highNoiseValue: Swift.Int
  @objc public init(mode: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, highNoiseOnOff: Swift.Int, highNoiseValue: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOVersionInfoModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var sdkVersion: Swift.Int
  @objc public var hrAlgorithmVersion: Swift.Int
  @objc public var sleepAlgorithmVersion: Swift.Int
  @objc public var stepAlgorithmVersion: Swift.Int
  @objc public var gestureRecognitionVersion: Swift.Int
  @objc public var pcbVersion: Swift.Int
  @objc public var spo2Version: Swift.Int
  @objc public var wearVersion: Swift.Int
  @objc public var stressVersion: Swift.Int
  @objc public var kcalVersion: Swift.Int
  @objc public var disVersion: Swift.Int
  @objc public var axle3SwimVersion: Swift.Int
  @objc public var axle6SwimVersion: Swift.Int
  @objc public var actModeTypeVersion: Swift.Int
  @objc public var allDayHrVersion: Swift.Int
  @objc public var gpsVersion: Swift.Int
  @objc public var peripheralsVersion: Swift.Int
  @objc public init(sdkVersion: Swift.Int, hrAlgorithmVersion: Swift.Int, sleepAlgorithmVersion: Swift.Int, stepAlgorithmVersion: Swift.Int, gestureRecognitionVersion: Swift.Int, pcbVersion: Swift.Int, spo2Version: Swift.Int, wearVersion: Swift.Int, stressVersion: Swift.Int, kcalVersion: Swift.Int, disVersion: Swift.Int, axle3SwimVersion: Swift.Int, axle6SwimVersion: Swift.Int, actModeTypeVersion: Swift.Int, allDayHrVersion: Swift.Int, gpsVersion: Swift.Int, peripheralsVersion: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOVoiceReplyParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var flagIsContinue: Swift.Int
  @objc public var title: Swift.String
  @objc public var textContent: Swift.String
  @objc public init(flagIsContinue: Swift.Int, title: Swift.String, textContent: Swift.String)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class IDOWalkRemindModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  public var onOff: Swift.Int
  public var goalStep: Swift.Int
  public var startHour: Swift.Int
  public var startMinute: Swift.Int
  public var endHour: Swift.Int
  public var endMinute: Swift.Int
  public var repeats: Swift.Set<protocol_channel.IDOWeek>
  public var goalTime: Swift.Int
  public var notifyFlag: Swift.Int
  public var doNotDisturbOnOff: Swift.Int
  public var noDisturbStartHour: Swift.Int
  public var noDisturbStartMinute: Swift.Int
  public var noDisturbEndHour: Swift.Int
  public var noDisturbEndMinute: Swift.Int
  public init(onOff: Swift.Int, goalStep: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, repeats: Swift.Set<protocol_channel.IDOWeek>, goalTime: Swift.Int, notifyFlag: Swift.Int = 0, doNotDisturbOnOff: Swift.Int = 0, noDisturbStartHour: Swift.Int = 0, noDisturbStartMinute: Swift.Int = 0, noDisturbEndHour: Swift.Int = 0, noDisturbEndMinute: Swift.Int = 0)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func toJsonString() -> Swift.String?
  @objc deinit
}
@objc @objcMembers public class IDOWalkRemindModelObjc : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var onOff: Swift.Int
  @objc public var goalStep: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMinute: Swift.Int
  @objc public var repeats: [protocol_channel.IDOWeekObjc]
  @objc public var goalTime: Swift.Int
  @objc public var notifyFlag: Swift.Int
  @objc public var doNotDisturbOnOff: Swift.Int
  @objc public var noDisturbStartHour: Swift.Int
  @objc public var noDisturbStartMinute: Swift.Int
  @objc public var noDisturbEndHour: Swift.Int
  @objc public var noDisturbEndMinute: Swift.Int
  @objc public init(onOff: Swift.Int, goalStep: Swift.Int, startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int, repeats: [protocol_channel.IDOWeekObjc], goalTime: Swift.Int, notifyFlag: Swift.Int = 0, doNotDisturbOnOff: Swift.Int = 0, noDisturbStartHour: Swift.Int = 0, noDisturbStartMinute: Swift.Int = 0, noDisturbEndHour: Swift.Int = 0, noDisturbEndMinute: Swift.Int = 0)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
}
@objc @objcMembers public class IDOWalkRemindTimesParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var onOff: Swift.Int
  @objc public var items: [protocol_channel.IDOWalkRemindTimesItem]
  @objc public init(onOff: Swift.Int, items: [protocol_channel.IDOWalkRemindTimesItem])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOWalkRemindTimesItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var hour: Swift.Int
  @objc public var min: Swift.Int
  @objc public init(hour: Swift.Int, min: Swift.Int)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOWallpaperDialReplyV3Model : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var errCode: Swift.Int
  @objc public var operate: Swift.Int
  @objc public var location: Swift.Int
  @objc public var hideType: Swift.Int
  @objc public var timeColor: Swift.Int
  @objc public var widgetType: Swift.Int
  @objc public var widgetIconColor: Swift.Int
  @objc public var widgetNumColor: Swift.Int
  @objc public init(errCode: Swift.Int, operate: Swift.Int, location: Swift.Int, hideType: Swift.Int, timeColor: Swift.Int, widgetType: Swift.Int, widgetIconColor: Swift.Int, widgetNumColor: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOWallpaperDialReplyV3ParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var operate: Swift.Int
  @objc public var location: Swift.Int
  @objc public var hideType: Swift.Int
  @objc public var timeColor: Swift.Int
  @objc public var widgetType: Swift.Int
  @objc public var widgetIconColor: Swift.Int
  @objc public var widgetNumColor: Swift.Int
  @objc public init(operate: Swift.Int, location: Swift.Int, hideType: Swift.Int, timeColor: Swift.Int, widgetType: Swift.Int, widgetIconColor: Swift.Int, widgetNumColor: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOWatchDialIdModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var watchId: Swift.Int
  @objc public init(watchId: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOWatchDialInfoModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var blockSize: Swift.Int
  @objc public var familyName: Swift.String
  @objc public var format: Swift.Int
  @objc public var height: Swift.Int
  @objc public var sizex100: Swift.Int
  @objc public var width: Swift.Int
  @objc public init(blockSize: Swift.Int, familyName: Swift.String, format: Swift.Int, height: Swift.Int, sizex100: Swift.Int, width: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOWatchDialParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var dialId: Swift.Int
  @objc public init(dialId: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOWatchDialSortParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var sortItemNumb: Swift.Int
  @objc public var pSortItem: [protocol_channel.IDOWatchDialSortItem]
  @objc public init(sortItemNumb: Swift.Int, pSortItem: [protocol_channel.IDOWatchDialSortItem])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOWatchDialSortItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var type: Swift.Int
  @objc public var sortNumber: Swift.Int
  @objc public var name: Swift.String
  @objc public init(type: Swift.Int, sortNumber: Swift.Int, name: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOWatchFaceModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var errCode: Swift.Int
  @objc public var operate: Swift.Int
  @objc public var fileName: Swift.String?
  @objc public var fileCount: Swift.Int
  @objc public init(errCode: Swift.Int, operate: Swift.Int, fileName: Swift.String?, fileCount: Swift.Int = 0)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
}
@objc @objcMembers public class IDOWatchFaceParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var operate: Swift.Int
  @objc public var fileName: Swift.String
  @objc public var watchFileSize: Swift.Int
  @objc public init(operate: Swift.Int, fileName: Swift.String, watchFileSize: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOWatchListModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var localWatchNum: Swift.Int
  @objc public var cloudWatchNum: Swift.Int
  @objc public var wallpaperWatchNum: Swift.Int
  @objc public var userCloudWatchNum: Swift.Int
  @objc public var userWallpaperWatchNum: Swift.Int
  @objc public var nowShowWatchName: Swift.String
  @objc public var watchFrameMainVersion: Swift.Int
  @objc public var fileMaxSize: Swift.Int
  @objc public var watchCapacitySize: Swift.Int
  @objc public var userWatchCapacitySize: Swift.Int
  @objc public var usableMaxDownloadSpaceSize: Swift.Int
  @objc public var items: [protocol_channel.IDOWatchItem]
  @objc public init(localWatchNum: Swift.Int, cloudWatchNum: Swift.Int, wallpaperWatchNum: Swift.Int, userCloudWatchNum: Swift.Int, userWallpaperWatchNum: Swift.Int, nowShowWatchName: Swift.String, watchFrameMainVersion: Swift.Int, fileMaxSize: Swift.Int, watchCapacitySize: Swift.Int, userWatchCapacitySize: Swift.Int, usableMaxDownloadSpaceSize: Swift.Int, items: [protocol_channel.IDOWatchItem])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOWatchItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var type: Swift.Int
  @objc public var watchVersion: Swift.Int
  @objc public var sortNumber: Swift.Int
  @objc public var name: Swift.String
  @objc public var size: Swift.Int
  @objc public init(type: Swift.Int, watchVersion: Swift.Int, sortNumber: Swift.Int, name: Swift.String, size: Swift.Int)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOWatchListV2Model : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var availableCount: Swift.Int
  @objc public var fileMaxSize: Swift.Int
  @objc public var items: [protocol_channel.IDOWatchListV2Item]
  @objc public init(availableCount: Swift.Int, fileMaxSize: Swift.Int, items: [protocol_channel.IDOWatchListV2Item])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOWatchListV2Item : ObjectiveC.NSObject, Swift.Codable {
  @objc public var fileName: Swift.String
  @objc public init(fileName: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOWeatherDataParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var type: Swift.Int
  @objc public var temp: Swift.Int
  @objc public var maxTemp: Swift.Int
  @objc public var minTemp: Swift.Int
  @objc public var humidity: Swift.Int
  @objc public var uvIntensity: Swift.Int
  @objc public var aqi: Swift.Int
  @objc public var future: [protocol_channel.IDOWeatherDataFuture]
  @objc public init(type: Swift.Int, temp: Swift.Int, maxTemp: Swift.Int, minTemp: Swift.Int, humidity: Swift.Int, uvIntensity: Swift.Int, aqi: Swift.Int, future: [protocol_channel.IDOWeatherDataFuture])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOWeatherDataFuture : ObjectiveC.NSObject, Swift.Codable {
  @objc public var type: Swift.Int
  @objc public var minTemp: Swift.Int
  @objc public var maxTemp: Swift.Int
  @objc public init(type: Swift.Int, minTemp: Swift.Int, maxTemp: Swift.Int)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOWeatherSunTimeParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var sunriseHour: Swift.Int
  @objc public var sunriseMin: Swift.Int
  @objc public var sunsetHour: Swift.Int
  @objc public var sunsetMin: Swift.Int
  @objc public init(sunriseHour: Swift.Int, sunriseMin: Swift.Int, sunsetHour: Swift.Int, sunsetMin: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOWeatherV3ParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var month: Swift.Int
  @objc public var day: Swift.Int
  @objc public var hour: Swift.Int
  @objc public var min: Swift.Int
  @objc public var sec: Swift.Int
  @objc public var week: Swift.Int
  @objc public var weatherType: Swift.Int
  @objc public var todayTmp: Swift.Int
  @objc public var todayMaxTemp: Swift.Int
  @objc public var todayMinTemp: Swift.Int
  @objc public var cityName: Swift.String
  @objc public var airQuality: Swift.Int
  @objc public var precipitationProbability: Swift.Int
  @objc public var humidity: Swift.Int
  @objc public var todayUvIntensity: Swift.Int
  @objc public var windSpeed: Swift.Int
  @objc public var sunriseHour: Swift.Int
  @objc public var sunriseMin: Swift.Int
  @objc public var sunsetHour: Swift.Int
  @objc public var sunsetMin: Swift.Int
  @objc public var sunriseItemNum: Swift.Int
  @objc public var airGradeItem: Swift.String
  @objc public var hoursWeatherItems: [protocol_channel.IDOHoursWeatherItem]
  @objc public var futureItems: [protocol_channel.IDOFutureItem]
  @objc public var sunriseItem: [protocol_channel.IDOSunriseItem]
  @objc public init(month: Swift.Int, day: Swift.Int, hour: Swift.Int, min: Swift.Int, sec: Swift.Int, week: Swift.Int, weatherType: Swift.Int, todayTmp: Swift.Int, todayMaxTemp: Swift.Int, todayMinTemp: Swift.Int, cityName: Swift.String, airQuality: Swift.Int, precipitationProbability: Swift.Int, humidity: Swift.Int, todayUvIntensity: Swift.Int, windSpeed: Swift.Int, sunriseHour: Swift.Int, sunriseMin: Swift.Int, sunsetHour: Swift.Int, sunsetMin: Swift.Int, sunriseItemNum: Swift.Int, airGradeItem: Swift.String, hoursWeatherItems: [protocol_channel.IDOHoursWeatherItem], futureItems: [protocol_channel.IDOFutureItem], sunriseItem: [protocol_channel.IDOSunriseItem])
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOFutureItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var weatherType: Swift.Int
  @objc public var maxTemp: Swift.Int
  @objc public var minTemp: Swift.Int
  @objc public init(weatherType: Swift.Int, maxTemp: Swift.Int, minTemp: Swift.Int)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOHoursWeatherItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var weatherType: Swift.Int
  @objc public var temperature: Swift.Int
  @objc public var probability: Swift.Int
  @objc public init(weatherType: Swift.Int, temperature: Swift.Int, probability: Swift.Int)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOSunriseItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var sunriseHour: Swift.Int
  @objc public var sunriseMin: Swift.Int
  @objc public var sunsetHour: Swift.Int
  @objc public var sunsetMin: Swift.Int
  @objc public init(sunriseHour: Swift.Int, sunriseMin: Swift.Int, sunsetHour: Swift.Int, sunsetMin: Swift.Int)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOWorldTimeParamModel : ObjectiveC.NSObject, protocol_channel.IDOBaseModel {
  @objc public var id: Swift.Int
  @objc public var minOffset: Swift.Int
  @objc public var cityName: Swift.String
  @objc public var sunriseHour: Swift.Int
  @objc public var sunriseMin: Swift.Int
  @objc public var sunsetHour: Swift.Int
  @objc public var sunsetMin: Swift.Int
  @objc public var longitudeFlag: Swift.Int
  @objc public var longitude: Swift.Int
  @objc public var latitudeFlag: Swift.Int
  @objc public var latitude: Swift.Int
  @objc public init(id: Swift.Int, minOffset: Swift.Int, cityName: Swift.String, sunriseHour: Swift.Int, sunriseMin: Swift.Int, sunsetHour: Swift.Int, sunsetMin: Swift.Int, longitudeFlag: Swift.Int, longitude: Swift.Int, latitudeFlag: Swift.Int, latitude: Swift.Int)
  @objc public func toJsonString() -> Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class IDOAppIconItemModel : ObjectiveC.NSObject {
  @objc final public let evtType: Swift.Int64
  @objc final public let packName: Swift.String
  @objc final public let appName: Swift.String
  @objc final public let iconLocalPath: Swift.String
  @objc final public let itemId: Foundation.NSNumber?
  @objc final public let msgCount: Foundation.NSNumber?
  @objc final public let iconCloudPath: Swift.String?
  @objc final public let state: Foundation.NSNumber?
  @objc final public let iconLocalPathBig: Swift.String?
  @objc final public let countryCode: Swift.String?
  @objc final public let appVersion: Swift.String?
  @objc final public let isDownloadAppInfo: Foundation.NSNumber?
  @objc final public let isUpdateAppName: Foundation.NSNumber?
  @objc final public let isUpdateAppIcon: Foundation.NSNumber?
  @objc final public let isDefault: Foundation.NSNumber?
  @objc public init(evtType: Swift.Int64, packName: Swift.String, appName: Swift.String, iconLocalPath: Swift.String, itemId: Foundation.NSNumber? = nil, msgCount: Foundation.NSNumber? = nil, iconCloudPath: Swift.String? = nil, state: Foundation.NSNumber? = nil, iconLocalPathBig: Swift.String? = nil, countryCode: Swift.String? = nil, appVersion: Swift.String? = nil, isDownloadAppInfo: Foundation.NSNumber? = nil, isUpdateAppName: Foundation.NSNumber? = nil, isUpdateAppIcon: Foundation.NSNumber? = nil, isDefault: Foundation.NSNumber? = nil)
  @objc deinit
}
@objc @objcMembers public class IDOAppIconInfoModel : ObjectiveC.NSObject {
  @objc public var version: Foundation.NSNumber?
  @objc public var iconWidth: Foundation.NSNumber?
  @objc public var iconHeight: Foundation.NSNumber?
  @objc public var colorFormat: Foundation.NSNumber?
  @objc public var blockSize: Foundation.NSNumber?
  @objc public var totalNum: Foundation.NSNumber?
  @objc public var items: [protocol_channel.IDOAppIconItemModel]?
  @objc public init(version: Foundation.NSNumber? = nil, iconWidth: Foundation.NSNumber? = nil, iconHeight: Foundation.NSNumber? = nil, colorFormat: Foundation.NSNumber? = nil, blockSize: Foundation.NSNumber? = nil, totalNum: Foundation.NSNumber? = nil, items: [protocol_channel.IDOAppIconItemModel]? = nil)
  @objc deinit
}
public let sdk: any protocol_channel.IDOSdkInterface
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SwiftProtocolChannelPlugin : ObjectiveC.NSObject, Flutter.FlutterPlugin {
  @objc public static let shared: protocol_channel.SwiftProtocolChannelPlugin
  @objc public static func register(with registrar: any Flutter.FlutterPluginRegistrar)
  @objc deinit
}
public typealias BlockDataSyncProgress = (_ progress: Swift.Double) -> Swift.Void
public typealias BlockDataSyncData = (_ type: protocol_channel.IDOSyncDataType, _ jsonStr: Swift.String, _ errorCode: Swift.Int) -> Swift.Void
public typealias BlockDataSyncCompleted = (_ errorCode: Swift.Int) -> Swift.Void
@objc public enum IDOSyncDataType : Swift.Int {
  case nullType = 0
  case stepCount = 1
  case heartRate = 2
  case sleep = 3
  case bloodPressure = 4
  case bloodOxygen = 5
  case pressure = 6
  case noise = 7
  case piven = 8
  case respirationRate = 9
  case bodyPower = 10
  case hRV = 11
  case activity = 12
  case gPS = 13
  case swim = 14
  case v2StepCount = 15
  case v2Sleep = 16
  case v2HeartRate = 17
  case v2BloodPressure = 18
  case v2GPS = 19
  case v2Activity = 20
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IDOSyncStatus : Swift.Int {
  case `init` = 0
  case syncing = 1
  case finished = 2
  case canceled = 3
  case stopped = 4
  case timeout = 5
  case error = 6
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension protocol_channel.IDOAlexaLoginState : Swift.Equatable {}
extension protocol_channel.IDOAlexaLoginState : Swift.Hashable {}
extension protocol_channel.IDOAlexaLoginState : Swift.RawRepresentable {}
extension protocol_channel.IDOGetValueType : Swift.Equatable {}
extension protocol_channel.IDOGetValueType : Swift.Hashable {}
extension protocol_channel.IDOGetValueType : Swift.RawRepresentable {}
extension protocol_channel.IDOAlexaAuthorizeResult : Swift.Equatable {}
extension protocol_channel.IDOAlexaAuthorizeResult : Swift.Hashable {}
extension protocol_channel.IDOAlexaAuthorizeResult : Swift.RawRepresentable {}
extension protocol_channel.IDODeviceStateType : Swift.Equatable {}
extension protocol_channel.IDODeviceStateType : Swift.Hashable {}
extension protocol_channel.IDODeviceStateType : Swift.RawRepresentable {}
extension protocol_channel.IDOBluetoothStateType : Swift.Equatable {}
extension protocol_channel.IDOBluetoothStateType : Swift.Hashable {}
extension protocol_channel.IDOBluetoothStateType : Swift.RawRepresentable {}
extension protocol_channel.IDOBluetoothScanType : Swift.Equatable {}
extension protocol_channel.IDOBluetoothScanType : Swift.Hashable {}
extension protocol_channel.IDOBluetoothScanType : Swift.RawRepresentable {}
extension protocol_channel.IDOConnectErrorType : Swift.Equatable {}
extension protocol_channel.IDOConnectErrorType : Swift.Hashable {}
extension protocol_channel.IDOConnectErrorType : Swift.RawRepresentable {}
extension protocol_channel.IDOWriteType : Swift.Equatable {}
extension protocol_channel.IDOWriteType : Swift.Hashable {}
extension protocol_channel.IDOWriteType : Swift.RawRepresentable {}
extension protocol_channel.IDOSppStateType : Swift.Equatable {}
extension protocol_channel.IDOSppStateType : Swift.Hashable {}
extension protocol_channel.IDOSppStateType : Swift.RawRepresentable {}
extension protocol_channel.IDOStatusNotification : Swift.Equatable {}
extension protocol_channel.IDOStatusNotification : Swift.Hashable {}
extension protocol_channel.IDOStatusNotification : Swift.RawRepresentable {}
extension protocol_channel.IDOLogType : Swift.Equatable {}
extension protocol_channel.IDOLogType : Swift.Hashable {}
extension protocol_channel.IDOLogType : Swift.RawRepresentable {}
extension protocol_channel.IDOOtaType : Swift.Equatable {}
extension protocol_channel.IDOOtaType : Swift.Hashable {}
extension protocol_channel.IDOOtaType : Swift.RawRepresentable {}
extension protocol_channel.IDOBindStatus : Swift.Equatable {}
extension protocol_channel.IDOBindStatus : Swift.Hashable {}
extension protocol_channel.IDOBindStatus : Swift.RawRepresentable {}
extension protocol_channel.NoticeMessageType : Swift.Equatable {}
extension protocol_channel.NoticeMessageType : Swift.Hashable {}
extension protocol_channel.NoticeMessageType : Swift.RawRepresentable {}
extension protocol_channel.IDOExchangeStatus : Swift.Equatable {}
extension protocol_channel.IDOExchangeStatus : Swift.Hashable {}
extension protocol_channel.IDOExchangeStatus : Swift.RawRepresentable {}
extension protocol_channel.IDODeviceLogType : Swift.Equatable {}
extension protocol_channel.IDODeviceLogType : Swift.Hashable {}
extension protocol_channel.IDODeviceLogType : Swift.RawRepresentable {}
extension protocol_channel.IDOTransType : Swift.Equatable {}
extension protocol_channel.IDOTransType : Swift.Hashable {}
extension protocol_channel.IDOTransType : Swift.RawRepresentable {}
extension protocol_channel.IDOTransStatus : Swift.Equatable {}
extension protocol_channel.IDOTransStatus : Swift.Hashable {}
extension protocol_channel.IDOTransStatus : Swift.RawRepresentable {}
extension protocol_channel.IDOAlarmType : Swift.Equatable {}
extension protocol_channel.IDOAlarmType : Swift.Hashable {}
extension protocol_channel.IDOAlarmType : Swift.RawRepresentable {}
extension protocol_channel.IDOWeek : Swift.Equatable {}
extension protocol_channel.IDOWeek : Swift.Hashable {}
extension protocol_channel.IDOWeek : Swift.RawRepresentable {}
extension protocol_channel.IDOAlarmStatus : Swift.Equatable {}
extension protocol_channel.IDOAlarmStatus : Swift.Hashable {}
extension protocol_channel.IDOAlarmStatus : Swift.RawRepresentable {}
extension protocol_channel.IDODefaultMessageConfigParamModel.CodingKeys : Swift.Equatable {}
extension protocol_channel.IDODefaultMessageConfigParamModel.CodingKeys : Swift.Hashable {}
extension protocol_channel.IDODefaultMessageConfigParamModel.CodingKeys : Swift.RawRepresentable {}
extension protocol_channel.IDODefaultMessageConfigModel.CodingKeys : Swift.Equatable {}
extension protocol_channel.IDODefaultMessageConfigModel.CodingKeys : Swift.Hashable {}
extension protocol_channel.IDODefaultMessageConfigModel.CodingKeys : Swift.RawRepresentable {}
extension protocol_channel.IDODefaultMessageItem.CodingKeys : Swift.Equatable {}
extension protocol_channel.IDODefaultMessageItem.CodingKeys : Swift.Hashable {}
extension protocol_channel.IDODefaultMessageItem.CodingKeys : Swift.RawRepresentable {}
extension protocol_channel.IDOLanguageType : Swift.Equatable {}
extension protocol_channel.IDOLanguageType : Swift.Hashable {}
extension protocol_channel.IDOLanguageType : Swift.RawRepresentable {}
extension protocol_channel.IDONoticeNotifySwitchState : Swift.Equatable {}
extension protocol_channel.IDONoticeNotifySwitchState : Swift.Hashable {}
extension protocol_channel.IDONoticeNotifySwitchState : Swift.RawRepresentable {}
extension protocol_channel.IDONoticeCallSwitchState : Swift.Equatable {}
extension protocol_channel.IDONoticeCallSwitchState : Swift.Hashable {}
extension protocol_channel.IDONoticeCallSwitchState : Swift.RawRepresentable {}
extension protocol_channel.IDONoticeMsgAllSwitchState : Swift.Equatable {}
extension protocol_channel.IDONoticeMsgAllSwitchState : Swift.Hashable {}
extension protocol_channel.IDONoticeMsgAllSwitchState : Swift.RawRepresentable {}
extension protocol_channel.IDOSportType : Swift.Equatable {}
extension protocol_channel.IDOSportType : Swift.Hashable {}
extension protocol_channel.IDOSportType : Swift.RawRepresentable {}
extension protocol_channel.IDOSyncDataType : Swift.Equatable {}
extension protocol_channel.IDOSyncDataType : Swift.Hashable {}
extension protocol_channel.IDOSyncDataType : Swift.RawRepresentable {}
extension protocol_channel.IDOSyncStatus : Swift.Equatable {}
extension protocol_channel.IDOSyncStatus : Swift.Hashable {}
extension protocol_channel.IDOSyncStatus : Swift.RawRepresentable {}
